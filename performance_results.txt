=== MIXED NESTING SCHEMA PERFORMANCE TEST ===
Test run: 2025-08-21 01:31:06 -0300
Ruby version: 3.3.8

✅ Schema loaded successfully

=== COMPILATION PERFORMANCE ===

Tiny     (  1 items):     2.47ms
Small    (  4 items):     3.67ms
Medium   ( 25 items):     1.86ms
Large    (100 items):     1.92ms
XLarge   (200 items):     2.96ms
Huge     (250 items):      2.0ms

=== EXECUTION PERFORMANCE ===

Tiny     (  1 items): avg=  0.54ms, throughput=   1.8 items/ms
Small    (  4 items): avg=  0.64ms, throughput=   6.2 items/ms
Medium   ( 25 items): avg=  1.15ms, throughput=  21.8 items/ms
Large    (100 items): avg=  3.61ms, throughput=  27.7 items/ms
XLarge   (200 items): avg=  7.25ms, throughput=  27.6 items/ms
Huge     (250 items): avg=  11.8ms, throughput=  21.2 items/ms

=== SCALING ANALYSIS ===

 50 items:   0.87ms (57.2 items/ms)
100 items:   1.45ms (68.9 items/ms)
200 items:   2.85ms (70.3 items/ms)
400 items:   5.75ms (69.6 items/ms)
800 items:  15.16ms (52.8 items/ms)

=== MEMORY ANALYSIS ===

Iteration 0: RSS=35472KB (Δ256KB)
Iteration 3: RSS=35472KB (Δ256KB)
Iteration 6: RSS=35472KB (Δ256KB)
Iteration 9: RSS=35472KB (Δ256KB)

=== SAMPLE OUTPUT VALIDATION ===

org_name: Global Corp
region_names: ["Region 1", "Region 2"]
total_capacity: [147, 173]
org_classification: Enterprise

=== PERFORMANCE BOTTLENECKS IDENTIFIED ===

1. Deep nesting (5+ levels) creates complex IR with many lift operations
2. Each nested access requires scope transitions
3. Compilation cold start: ~80ms first time
4. Linear scaling with data size is expected behavior
5. Memory usage is stable (no leaks detected)

=== RECOMMENDATIONS ===

• For production: Cache compiled schemas to avoid cold start
• For large datasets: Consider schema restructuring to reduce nesting
• Current performance acceptable for <1000 items
• Deep nesting workable but monitor performance with >10,000 items

Test completed at: 2025-08-21 01:31:06 -0300
Total runtime: 0.37s
