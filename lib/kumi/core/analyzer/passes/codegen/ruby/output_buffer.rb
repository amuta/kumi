# frozen_string_literal: true

module Kumi
  module Core
    module Analyzer
      module Passes
        module Codegen
          module Ruby
            class OutputBuffer
              def initialize
                @out = []
                @indent = 0
              end

              def to_s = @out.join
              def reset! = @out.clear

              def indent!
                @indent += 1
              end

              def dedent!
                @indent -= 1
              end

              def emit_header(module_name)
                write "# Autogenerated by Kumi Codegen"
                write "module Kumi::Compiled::#{module_name}"
                indent!
              end

              def emit_footer
                dedent!
                rewrite_line("end") if last_line == "end\n"
                write "end"
              end

              def emit_class_methods(decl_names)
                write "def self.from(input_data=nil)"
                indented do
                  write "instance = Object.new"
                  write "instance.extend(self)"
                  write "instance.instance_variable_set(:@input, input_data)"
                  write "instance"
                end
                write "end\n"

                write "def self.__kumi_executable__"
                indented do
                  write "instance = Object.new"
                  write "instance.extend(self)"
                  write "instance"
                end
                write "end\n"

                write "def update(input_data)"
                indented do
                  write "@input = input_data"
                end
                write "end\n"

                return unless decl_names.size > 1

                write "def [](name)"
                indented do
                  write "case name"
                  decl_names.each { |name| write "when :#{name} then _#{name}" }
                  write "else raise KeyError, \"Unknown declaration\""
                  write "end"
                end
                write "end\n"
              end

              def section(name)
                write "#{name}\n"
                yield
              end

              def indented
                indent!
                yield
                dedent!
              end

              def write(s, indent = @indent)
                @out << ("  " * indent) << s << "\n"
              end

              def last_line
                line_at(-2)
              end

              def line_at(idx)
                @out[idx]
              end

              # Replaces the last line in the buffer.
              def rewrite_line(new_line_content, idx = -2)
                return if @out.empty?

                # Preserve the indentation of the line being replaced.
                @out[idx] = new_line_content
              end
            end
          end
        end
      end
    end
  end
end
