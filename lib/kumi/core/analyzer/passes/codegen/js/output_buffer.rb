# frozen_string_literal: true

require "json"

module Kumi
  module Core
    module Analyzer
      module Passes
        module Codegen
          module Js
            class OutputBuffer
              def initialize
                @out = []
                @indent = 0
              end

              def to_s = @out.join
              def reset! = @out.clear

              def indent!
                @indent += 1
              end

              def dedent!
                @indent -= 1 if @indent.positive?
              end

              def emit_header(schema_digest)
                write "// Autogenerated by Kumi Codegen for schema #{schema_digest}"
                write "export class KumiCompiledModule {"
                indent!
              end

              def emit_footer
                dedent!
                write "}"
              end

              def emit_class_methods(decl_names)
                # write "constructor(inputData = {}) {"
                # indented do
                #   write "this.input = inputData;"
                # end
                # write "}\n"

                # write "static from(inputData = {}) {"
                # indented do
                #   write "return new KumiCompiledModule(inputData);"
                # end
                # write "}\n"

                # write "update(inputData) {"
                # indented do
                #   write "this.input = { ...this.input, ...inputData };"
                #   write "return this;"
                # end
                # write "}\n"

                # return if decl_names.empty?

                # write "get(name) {"
                # indented do
                #   write "switch (name) {"
                #   decl_names.each { |name| write "  case '#{name}': return this._#{name}();" }
                #   write "  default: throw new Error(`Unknown declaration: ${name}`);"
                #   write "}"
                # end
                # write "}\n"
              end

              def section(name)
                write ""
                write "// --- #{name} ---"
                yield
                write "// --- END #{name} ---"
                write ""
              end

              def indented
                indent!
                yield
                dedent!
              end

              def write(s, indent = @indent)
                @out << ("  " * indent) << s << "\n"
              end

              def last_line
                # In our array, the last item is the full line with newline
                @out.last
              end

              def rewrite_line(new_line_content)
                return if @out.empty?

                # Preserve the indentation of the line being replaced.
                current_indent_str = @out.last.match(/^\s*/)[0]
                @out[-1] = "#{current_indent_str}#{new_line_content}\n"
              end
            end
          end
        end
      end
    end
  end
end
