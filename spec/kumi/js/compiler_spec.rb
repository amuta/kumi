# frozen_string_literal: true

require "spec_helper"
require_relative "../../../lib/kumi/js"

RSpec.describe Kumi::Js::Compiler do
  describe "JavaScript compilation" do
    let(:simple_schema) do
      Class.new do
        extend Kumi::Schema

        schema do
          input do
            integer :age
            float :salary
          end

          trait :adult, (input.age >= 18)
          value :monthly_salary, input.salary / 12
          value :status do
            on adult, "Adult"
            base "Minor"
          end
        end
      end
    end

    let(:complex_schema) do
      Class.new do
        extend Kumi::Schema

        schema do
          input do
            integer :age, domain: 0..150
            float :salary, domain: 0..Float::INFINITY
            string :name
            array :skills, elem: { type: :string }
          end

          trait :adult, (input.age >= 18)
          trait :senior, (input.age >= 65)
          trait :high_earner, (input.salary > 100_000)

          value :monthly_salary, input.salary / 12
          value :annual_bonus, input.salary * 0.1
          value :has_programming_skills, fn(:include?, input.skills, "programming")

          value :status do
            on senior, "Senior"
            on adult, "Adult"
            base "Minor"
          end

          value :compensation_tier do
            on high_earner, adult, "High"
            on adult, "Standard"
            base "Entry"
          end

          value :total_compensation, input.salary + annual_bonus
        end
      end
    end

    describe "#compile" do
      it "generates valid JavaScript code" do
        js_code = Kumi::Js.compile(simple_schema)

        expect(js_code).to include("// Generated by Kumi JavaScript Transpiler")
        expect(js_code).to include("const kumiRegistry = {")
        expect(js_code).to include("const bindings = {")
        expect(js_code).to include("class KumiRunner")
        expect(js_code).to include("fetch(key)")
        expect(js_code).to include("slice(...keys)")
      end

      it "includes function registry mappings for used functions" do
        js_code = Kumi::Js.compile(simple_schema)

        # Check for functions actually used by the schema
        expect(js_code).to include("divide: (a, b) => a / b")
        expect(js_code).to include('">=": (a, b) => a >= b')
        expect(js_code).to include("cascade_and: (...conditions) =>")

        # Should not include unused functions (optimized out)
        expect(js_code).not_to include("add: (a, b) => a + b")
        expect(js_code).not_to include("sum: (collection) => collection.reduce")
      end

      it "generates bindings for all schema declarations" do
        js_code = Kumi::Js.compile(complex_schema)

        # Check that all traits and values are present
        expect(js_code).to include("adult:")
        expect(js_code).to include("senior:")
        expect(js_code).to include("monthly_salary:")
        expect(js_code).to include("status:")
        expect(js_code).to include("compensation_tier:")
      end
    end

    describe "function compilation" do
      it "compiles literals correctly" do
        js_code = Kumi::Js.compile(simple_schema)

        expect(js_code).to include("(ctx) => 18")  # Age literal
        expect(js_code).to include("(ctx) => 12")  # Division literal
        expect(js_code).to include('(ctx) => "Adult"') # String literal
      end

      it "compiles field references correctly" do
        js_code = Kumi::Js.compile(simple_schema)

        expect(js_code).to include("ctx.age")
        expect(js_code).to include("ctx.salary")
        expect(js_code).to include("Key 'age' not found")
      end

      it "compiles function calls correctly" do
        js_code = Kumi::Js.compile(simple_schema)

        expect(js_code).to include("kumiRegistry.divide")
        expect(js_code).to include("kumiRegistry[\">=\"]")
      end

      it "compiles cascades correctly" do
        js_code = Kumi::Js.compile(simple_schema)

        expect(js_code).to include("if (condition0(ctx)) return result0(ctx)")
        expect(js_code).to include("if (condition1(ctx)) return result1(ctx)")
      end
    end
  end
end
