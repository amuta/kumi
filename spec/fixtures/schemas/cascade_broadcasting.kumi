input do
  array :products do
    hash :product do
      float   :price
      integer :stock
      string  :status
    end
  end
  
  float :discount_rate
  integer :low_stock_threshold
end

# Base vectorized values
trait :low_stock, input.products.product.stock < input.low_stock_threshold
trait :available, input.products.product.status == "available"
value :base_prices, input.products.product.price

# Cascades with vectorized results (proper cascade syntax)
value :effective_prices do
  on low_stock, fn(:multiply, base_prices, fn(:subtract, 1, input.discount_rate))
  base base_prices
end

value :availability_status do
  on available, "In Stock"
  on low_stock, "Low Stock"
  base "Out of Stock"
end

# Simple cascades
value :final_prices do
  on available, effective_prices
  base 0.0
end

# Cascades referencing other vectorized values
value :display_prices do
  on available, effective_prices
  base fn(:multiply, base_prices, 0.5)
end