(SNAST
  (VALUE global_offset_plus
    (Call :core.add
      (InputRef global_offset key_chain=[]) :: [] -> float
      (Const 1.0) :: [] -> float
    ) :: [] -> float
  ) :: [] -> float
  (VALUE batch_bias
    (Call :core.add
      (InputRef batch.b.mean key_chain=[]) :: [batch] -> float
      (Ref global_offset_plus) :: [] -> float
    ) :: [batch] -> float
  ) :: [batch] -> float
  (VALUE row_scale2
    (Call :core.mul
      (InputRef batch.b.row.r.scale key_chain=[]) :: [batch, row] -> float
      (Const 2.0) :: [] -> float
    ) :: [batch, row] -> float
  ) :: [batch, row] -> float
  (VALUE elem_affine
    (Call :core.add
      (Call :core.mul
        (InputRef batch.b.row.r.col.c.val key_chain=[]) :: [batch, row, col] -> float
        (Ref row_scale2) :: [batch, row] -> float
      ) :: [batch, row, col] -> float
      (Ref batch_bias) :: [batch] -> float
    ) :: [batch, row, col] -> float
  ) :: [batch, row, col] -> float
  (VALUE row_sum_affine
    (Reduce :agg.sum over [col]
      (Ref elem_affine) :: [batch, row, col] -> float
    ) :: [batch, row] -> float
  ) :: [batch, row] -> float
  (VALUE batch_total_affine
    (Reduce :agg.sum over [row]
      (Ref row_sum_affine) :: [batch, row] -> float
    ) :: [batch] -> float
  ) :: [batch] -> float
)