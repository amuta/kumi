(LIR
  (Declaration global_offset_plus
  %t1 = load_input "global_offset" :: float
  %t2 = const 1.0 :: float
  %t3 = call core.add(%t1, %t2) :: float
  yield %t3
  )
  (Declaration batch_bias
  %t4 = load_input "batch" :: array
  loop batch id=L1 in %t4 as el=%batch_el_5, idx=%batch_i_6
    %t7 = load_field batch_el_5["mean"] :: float
    %t1 = load_input "global_offset" :: float
    %t2 = const 1.0 :: float
    %t3 = call core.add(%t1, %t2) :: float
    %t9 = call core.add(%t7, %t3) :: float
    yield %t9
  end_loop
  )
  (Declaration row_scale2
  %t10 = load_input "batch" :: array
  loop batch id=L2 in %t10 as el=%batch_el_11, idx=%batch_i_12
    %t13 = load_field batch_el_11["row"] :: array
    loop row id=L3 in %t13 as el=%row_el_14, idx=%row_i_15
      %t16 = load_field row_el_14["scale"] :: float
      %t17 = const 2.0 :: float
      %t18 = call core.mul(%t16, %t17) :: float
      yield %t18
    end_loop
  end_loop
  )
  (Declaration elem_affine
  %t19 = load_input "batch" :: array
  loop batch id=L4 in %t19 as el=%batch_el_20, idx=%batch_i_21
    %t22 = load_field batch_el_20["row"] :: array
    loop row id=L5 in %t22 as el=%row_el_23, idx=%row_i_24
      %t25 = load_field row_el_23["col"] :: array
      loop col id=L6 in %t25 as el=%col_el_26, idx=%col_i_27
        %t28 = load_field col_el_26["val"] :: float
        %t4 = load_field batch_el_20["row"] :: array
        %t5 = load_field row_el_23["scale"] :: float
        %t6 = const 2.0 :: float
        %t7 = call core.mul(%t5, %t6) :: float
        %t30 = call core.mul(%t28, %t7) :: float
        %t8 = load_field batch_el_20["mean"] :: float
        %t23 = load_input "global_offset" :: float
        %t24 = const 1.0 :: float
        %t25 = call core.add(%t23, %t24) :: float
        %t10 = call core.add(%t8, %t25) :: float
        %t32 = call core.add(%t30, %t10) :: float
        yield %t32
      end_loop
    end_loop
  end_loop
  )
  (Declaration row_sum_affine
  %t33 = load_input "batch" :: array
  loop batch id=L7 in %t33 as el=%batch_el_34, idx=%batch_i_35
    %t36 = load_field batch_el_34["row"] :: array
    loop row id=L8 in %t36 as el=%row_el_37, idx=%row_i_38
      acc.declare acc_39=0.0
      %t40 = load_field row_el_37["col"] :: array
      loop col id=L9 in %t40 as el=%col_el_41, idx=%col_i_42
        %t11 = load_field batch_el_34["row"] :: array
        %t12 = load_field row_el_37["col"] :: array
        %t13 = load_field col_el_41["val"] :: float
        %t26 = load_field batch_el_34["row"] :: array
        %t27 = load_field row_el_37["scale"] :: float
        %t28 = const 2.0 :: float
        %t29 = call core.mul(%t27, %t28) :: float
        %t15 = call core.mul(%t13, %t29) :: float
        %t30 = load_field batch_el_34["mean"] :: float
        %t31 = load_input "global_offset" :: float
        %t32 = const 1.0 :: float
        %t33 = call core.add(%t31, %t32) :: float
        %t34 = call core.add(%t30, %t33) :: float
        %t17 = call core.add(%t15, %t34) :: float
        acc.add acc_39 using agg.sum <- %t17
      end_loop
      %t44 = acc.load acc_39 :: float
      yield %t44
    end_loop
  end_loop
  )
  (Declaration batch_total_affine
  %t45 = load_input "batch" :: array
  loop batch id=L10 in %t45 as el=%batch_el_46, idx=%batch_i_47
    acc.declare acc_48=0.0
    %t49 = load_field batch_el_46["row"] :: array
    loop row id=L11 in %t49 as el=%row_el_50, idx=%row_i_51
      %t18 = load_field batch_el_46["row"] :: array
      acc.declare acc_39_19=0.0
      %t20 = load_field row_el_50["col"] :: array
      loop col id=L1 in %t20 as el=%col_el_41, idx=%col_i_42
        %t35 = load_field batch_el_46["row"] :: array
        %t36 = load_field row_el_50["col"] :: array
        %t37 = load_field col_el_41["val"] :: float
        %t38 = load_field batch_el_46["row"] :: array
        %t39 = load_field row_el_50["scale"] :: float
        %t40 = const 2.0 :: float
        %t41 = call core.mul(%t39, %t40) :: float
        %t42 = call core.mul(%t37, %t41) :: float
        %t43 = load_field batch_el_46["mean"] :: float
        %t47 = load_input "global_offset" :: float
        %t48 = const 1.0 :: float
        %t49 = call core.add(%t47, %t48) :: float
        %t45 = call core.add(%t43, %t49) :: float
        %t46 = call core.add(%t42, %t45) :: float
        acc.add acc_39_19 using agg.sum <- %t46
      end_loop
      %t22 = acc.load acc_39_19 :: float
      acc.add acc_48 using agg.sum <- %t22
    end_loop
    %t53 = acc.load acc_48 :: float
    yield %t53
  end_loop
  )
)
