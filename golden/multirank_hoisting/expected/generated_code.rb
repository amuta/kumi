# Autogenerated by Kumi Codegen
module SchemaModule
  def self.from(input_data)
      instance = Object.new
      instance.extend(self)
      instance.instance_variable_set(:@input, input_data)
      instance
  end

  def [](name)
      case name
        when :global_offset_plus then _eval_global_offset_plus
        when :batch_bias then _eval_batch_bias
        when :row_scale2 then _eval_row_scale2
        when :elem_affine then _eval_elem_affine
        when :row_sum_affine then _eval_row_sum_affine
        when :batch_total_affine then _eval_batch_total_affine
        else raise KeyError, "Unknown declaration"
      end
  end

  def _eval_global_offset_plus
    out = nil
    t1 = @input["global_offset"]
    t2 = 1.0
    t3 = __add(t1, t2)
    out = t3
    out
  end

  def _eval_batch_bias
    out = []
    t4 = @input["batch"]
    t4.each_with_index do |batch_el_5, batch_i_6|
      t7 = batch_el_5["mean"]
      t1 = @input["global_offset"]
      t2 = 1.0
      t3 = __add(t1, t2)
      t9 = __add(t7, t3)
      out << t9
    end
    out
  end

  def _eval_row_scale2
    out = []
    t10 = @input["batch"]
    t10.each_with_index do |batch_el_11, batch_i_12|
      out_1 = []
      t13 = batch_el_11["row"]
      t13.each_with_index do |row_el_14, row_i_15|
        t16 = row_el_14["scale"]
        t17 = 2.0
        t18 = __mul(t16, t17)
        out_1 << t18
      end
      out << out_1
    end
    out
  end

  def _eval_elem_affine
    out = []
    t19 = @input["batch"]
    t19.each_with_index do |batch_el_20, batch_i_21|
      out_1 = []
      t22 = batch_el_20["row"]
      t22.each_with_index do |row_el_23, row_i_24|
        out_2 = []
        t25 = row_el_23["col"]
        t25.each_with_index do |col_el_26, col_i_27|
          t28 = col_el_26["val"]
          t5 = row_el_23["scale"]
          t6 = 2.0
          t7 = __mul(t5, t6)
          t30 = __mul(t28, t7)
          t8 = batch_el_20["mean"]
          t23 = @input["global_offset"]
          t24 = 1.0
          t25 = __add(t23, t24)
          t10 = __add(t8, t25)
          t32 = __add(t30, t10)
          out_2 << t32
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _eval_row_sum_affine
    out = []
    t33 = @input["batch"]
    t33.each_with_index do |batch_el_34, batch_i_35|
      out_1 = []
      t36 = batch_el_34["row"]
      t36.each_with_index do |row_el_37, row_i_38|
        acc_39 = 0.0
        t40 = row_el_37["col"]
        t40.each_with_index do |col_el_41, col_i_42|
          t13 = col_el_41["val"]
          t27 = row_el_37["scale"]
          t28 = 2.0
          t29 = __mul(t27, t28)
          t15 = __mul(t13, t29)
          t30 = batch_el_34["mean"]
          t31 = @input["global_offset"]
          t32 = 1.0
          t33 = __add(t31, t32)
          t34 = __add(t30, t33)
          t17 = __add(t15, t34)
          acc_39 = __sum(acc_39, t17)
        end
        t44 = acc_39
        out_1 << t44
      end
      out << out_1
    end
    out
  end

  def _eval_batch_total_affine
    out = []
    t45 = @input["batch"]
    t45.each_with_index do |batch_el_46, batch_i_47|
      acc_48 = 0.0
      t49 = batch_el_46["row"]
      t49.each_with_index do |row_el_50, row_i_51|
        acc_39_19 = 0.0
        t20 = row_el_50["col"]
        t20.each_with_index do |col_el_41, col_i_42|
          t37 = col_el_41["val"]
          t39 = row_el_50["scale"]
          t40 = 2.0
          t41 = __mul(t39, t40)
          t42 = __mul(t37, t41)
          t43 = batch_el_46["mean"]
          t47 = @input["global_offset"]
          t48 = 1.0
          t49 = __add(t47, t48)
          t45 = __add(t43, t49)
          t46 = __add(t42, t45)
          acc_39_19 = __sum(acc_39_19, t46)
        end
        t22 = acc_39_19
        acc_48 = __sum(acc_48, t22)
      end
      t53 = acc_48
      out << t53
    end
    out
  end

  private

    def __count(a,b)
      a + b
    end

    def __sum(a,b)
      a + b
    end

    def __add(a, b)
      a + b
    end

    def __and(a, b)
      a && b
    end

    def __concat(a, b)
      a.to_s + b.to_s
    end

    def __div(a, b)
      a / b
    end

    def __eq(a, b)
      a == b
    end

    def __gt(a, b)
      a > b
    end

    def __gte(a, b)
      a >= b
    end

    def __length(collection)
      collection.size
    end

    def __mul(a, b)
      a * b
    end

    def __or(a, b)
      a || b
    end

    def __pow(a, b)
      a ** b
    end

    def __select(condition, true_val, false_val)
      condition ? true_val : false_val
    end

    def __sub(a, b)
      a - b
    end

end
