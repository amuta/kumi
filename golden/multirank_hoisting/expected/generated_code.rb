# Autogenerated by Kumi Codegen
module SchemaModule
  def self.from(input_data)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def [](name)
    case name
      when :global_offset_plus then _eval_global_offset_plus
      when :batch_bias then _eval_batch_bias
      when :row_scale2 then _eval_row_scale2
      when :elem_affine then _eval_elem_affine
      when :row_sum_affine then _eval_row_sum_affine
      when :batch_total_affine then _eval_batch_total_affine
      else raise KeyError, "Unknown declaration"
    end
  end

  def _eval_global_offset_plus
    out = nil
    t1 = @input["global_offset"]
    t2 = 1.0
    t3 = __core_add(t1, t2)
    out = t3
    out
  end

  def _eval_batch_bias
    out = []
    t4 = @input["batch"]
    t4.each_with_index do |batch_el_5, batch_i_6|
      t7 = batch_el_5["mean"]
      t54 = @input["global_offset"]
      t55 = 1.0
      t56 = __core_add(t54, t55)
      t9 = __core_add(t7, t56)
      out << t9
    end
    out
  end

  def _eval_row_scale2
    out = []
    t10 = @input["batch"]
    t10.each_with_index do |batch_el_11, batch_i_12|
      out_1 = []
      t13 = batch_el_11["row"]
      t13.each_with_index do |row_el_14, row_i_15|
        t16 = row_el_14["scale"]
        t17 = 2.0
        t18 = __core_mul(t16, t17)
        out_1 << t18
      end
      out << out_1
    end
    out
  end

  def _eval_elem_affine
    out = []
    t19 = @input["batch"]
    t19.each_with_index do |batch_el_20, batch_i_21|
      out_1 = []
      t22 = batch_el_20["row"]
      t22.each_with_index do |row_el_23, row_i_24|
        out_2 = []
        t25 = row_el_23["col"]
        t25.each_with_index do |col_el_26, col_i_27|
          t28 = col_el_26["val"]
          t58 = row_el_23["scale"]
          t59 = 2.0
          t60 = __core_mul(t58, t59)
          t30 = __core_mul(t28, t60)
          t61 = batch_el_20["mean"]
          t77 = @input["global_offset"]
          t78 = 1.0
          t79 = __core_add(t77, t78)
          t63 = __core_add(t61, t79)
          t32 = __core_add(t30, t63)
          out_2 << t32
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _eval_row_sum_affine
    out = []
    t33 = @input["batch"]
    t33.each_with_index do |batch_el_34, batch_i_35|
      out_1 = []
      t36 = batch_el_34["row"]
      t36.each_with_index do |row_el_37, row_i_38|
        acc_39 = 0.0
        t40 = row_el_37["col"]
        t40.each_with_index do |col_el_41, col_i_42|
          t66 = col_el_41["val"]
          t81 = row_el_37["scale"]
          t82 = 2.0
          t83 = __core_mul(t81, t82)
          t68 = __core_mul(t66, t83)
          t84 = batch_el_34["mean"]
          t85 = @input["global_offset"]
          t86 = 1.0
          t87 = __core_add(t85, t86)
          t88 = __core_add(t84, t87)
          t70 = __core_add(t68, t88)
          acc_39 = __agg_sum(acc_39, t70)
        end
        t44 = acc_39
        out_1 << t44
      end
      out << out_1
    end
    out
  end

  def _eval_batch_total_affine
    out = []
    t45 = @input["batch"]
    t45.each_with_index do |batch_el_46, batch_i_47|
      acc_48 = 0.0
      t49 = batch_el_46["row"]
      t49.each_with_index do |row_el_50, row_i_51|
        t72 = 0.0
        t74 = row_el_50["col"]
        t74.each_with_index do |col_el_41, col_i_42|
          t91 = col_el_41["val"]
          t93 = row_el_50["scale"]
          t94 = 2.0
          t95 = __core_mul(t93, t94)
          t96 = __core_mul(t91, t95)
          t97 = batch_el_46["mean"]
          t101 = @input["global_offset"]
          t102 = 1.0
          t103 = __core_add(t101, t102)
          t99 = __core_add(t97, t103)
          t100 = __core_add(t96, t99)
          t72 = __agg_sum(t72, t100)
        end
        t76 = t72
        acc_48 = __agg_sum(acc_48, t76)
      end
      t53 = acc_48
      out << t53
    end
    out
  end

  private

  def __agg_sum(a,b)
    a + b
  end

  def __core_add(a, b)
    a + b
  end

  def __core_mul(a, b)
    a * b
  end

end
