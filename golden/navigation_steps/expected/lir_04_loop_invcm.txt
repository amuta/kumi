(LIR
  (Declaration numbers_mult_10
    %t1 = load_input "a1" :: array
    %t11 = const 10 :: integer
    loop a1 id=L1 in %t1 as el=%a1_el_2, idx=%a1_i_3
      loop ea1 id=L2 in %a1_el_2 as el=%ea1_el_4, idx=%ea1_i_5
        loop a2 id=L3 in %ea1_el_4 as el=%a2_el_6, idx=%a2_i_7
          %t8 = load_field a2_el_6["ea2"] :: any
          loop ea2 id=L4 in %t8 as el=%ea2_el_9, idx=%ea2_i_10
            %t12 = call core.mul(%ea2_el_9, %t11) :: integer
            yield %t12
          end_loop
        end_loop
      end_loop
    end_loop
  )
  (Declaration sum_of_nums
    %t13 = load_input "a1" :: array
    %t28 = const 10 :: integer
    loop a1 id=L5 in %t13 as el=%a1_el_14, idx=%a1_i_15
      loop ea1 id=L6 in %a1_el_14 as el=%ea1_el_16, idx=%ea1_i_17
        loop a2 id=L7 in %ea1_el_16 as el=%a2_el_18, idx=%a2_i_19
          %acc_20 = decl_acc :: integer
          %t21 = load_field a2_el_18["ea2"] :: any
          loop ea2 id=L8 in %t21 as el=%ea2_el_22, idx=%ea2_i_23
            %t29 = call core.mul(%ea2_el_22, %t28) :: integer
            %acc_20 = acc_add agg.sum(%acc_20, %t29) :: integer
          end_loop
          %t25 = acc_load %acc_20 :: integer
          yield %t25
        end_loop
      end_loop
    end_loop
  )
)
