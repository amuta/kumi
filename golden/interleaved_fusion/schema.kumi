# interleaved_fusion_schema.kumi
#
# Written on: Saturday, September 20, 2025
# Location: SÃ£o Paulo, Brazil
#
# This schema tests an advanced case for the LoopFusionPass.
#
# It creates a situation with three calculations: A, B, and C.
#   - Calc A (`total_payroll`) is a loop over `employees`.
#   - Calc B (`payroll_tax`) depends on the result of A.
#   - Calc C (`manager_count`) is another loop over `employees`, independent of A and B.
#
# The final summary uses them in the order A, B, C. This will create LIR where
# Loop A and Loop C are separated by the code for Calc B.
#
# A simple fusion pass will fail this test. An advanced pass would need to
# reorder the code for Calc B to make Loop A and Loop C adjacent before fusing.

schema do
  input do
    array :departments do
      string :name
      array :employees do
        integer :salary
        string  :role
      end
    end
  end

  # --- Interleaved Calculations ---

  # Calculation A: Requires a loop over employees.
  value :total_payroll, fn(:sum, input.departments.employees.salary)

  # Calculation B: Depends on the final result of A. This creates the barrier.
  value :payroll_tax, total_payroll * 0.15

  # Calculation C: Another loop over employees, but independent of A and B.
  value :manager_count, fn(:count_if, input.departments.employees.role, "manager")


  # --- Final Value ---

  # The dependency order here (A, B, C) is critical.
  # An intelligent optimizer should be able to reorder the calculation for B
  # to allow the loops from A and C to be fused.
  value :department_summary, {
    name: input.departments.name,
    payroll: total_payroll,
    tax: payroll_tax,
    managers: manager_count
  }
end