// Autogenerated by Kumi Codegen for schema KUMI_ea9477e5186bba146507352bd914f49870a3cac51368c6cd97be139804acd048
export class KumiCompiledModule {
  constructor(inputData = {}) {
    this.input = inputData;
  }

  static from(inputData = {}) {
    return new KumiCompiledModule(inputData);
  }

  update(inputData) {
    this.input = { ...this.input, ...inputData };
    return this;
  }

  get(name) {
    switch (name) {
      case 'subtotals': return this._subtotals();
      case 'discounted_price': return this._discounted_price();
      case 'is_valid_quantity': return this._is_valid_quantity();
      case 'expensive_items': return this._expensive_items();
      case 'electronics': return this._electronics();
      default: throw new Error(`Unknown declaration: ${name}`);
    }
  }

  _subtotals(input = this.input) {
    let out = [];
    let t1 = input["items"];
    t1?.forEach((items_el_2, items_i_3) => {
      let t4 = items_el_2?.price;
      let t5 = items_el_2?.quantity;
      let t6 = t4 * t5;
      out.push(t6);
    });
    return out;
  }

  _discounted_price(input = this.input) {
    let out = [];
    let t7 = input["items"];
    t7?.forEach((items_el_8, items_i_9) => {
      let t10 = items_el_8?.price;
      let t12 = t10 * 0.9;
      out.push(t12);
    });
    return out;
  }

  _is_valid_quantity(input = this.input) {
    let out = [];
    let t13 = input["items"];
    t13?.forEach((items_el_14, items_i_15) => {
      let t16 = items_el_14?.quantity;
      let t18 = t16 > 0;
      out.push(t18);
    });
    return out;
  }

  _expensive_items(input = this.input) {
    let out = [];
    let t19 = input["items"];
    t19?.forEach((items_el_20, items_i_21) => {
      let t22 = items_el_20?.price;
      let t24 = t22 > 100.0;
      out.push(t24);
    });
    return out;
  }

  _electronics(input = this.input) {
    let out = [];
    let t25 = input["items"];
    t25?.forEach((items_el_26, items_i_27) => {
      let t28 = items_el_26?.category;
      let t30 = t28 == "electronics";
      out.push(t30);
    });
    return out;
  }

}
