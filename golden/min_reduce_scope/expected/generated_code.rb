# Autogenerated by Kumi Codegen
module SchemaModule
  def self.from(input_data)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def [](name)
    case name
      when :dept_total then _eval_dept_total
      when :company_total then _eval_company_total
      when :big_team then _eval_big_team
      when :dept_total_masked then _eval_dept_total_masked
      else raise KeyError, "Unknown declaration"
    end
  end

  def _eval_dept_total
    out = []
    t1 = @input["depts"]
    t1.each_with_index do |depts_el_2, depts_i_3|
      # unsupported: DeclareAccumulator
      t5 = depts_el_2["teams"]
      t5.each_with_index do |teams_el_6, teams_i_7|
        t8 = teams_el_6["headcount"]
        acc_4 = __agg_sum(acc_4, t8)
      end
      t9 = acc_4
      out << t9
    end
    out
  end

  def _eval_company_total
    out = nil
    # unsupported: DeclareAccumulator
    t11 = @input["depts"]
    t11.each_with_index do |depts_el_12, depts_i_13|
      # unsupported: DeclareAccumulator
      t15 = depts_el_12["teams"]
      t15.each_with_index do |teams_el_16, teams_i_17|
        t18 = teams_el_16["headcount"]
        acc_14 = __agg_sum(acc_14, t18)
      end
      t19 = acc_14
      acc_10 = __agg_sum(acc_10, t19)
    end
    t20 = acc_10
    out = t20
    out
  end

  def _eval_big_team
    out = []
    t21 = @input["depts"]
    t21.each_with_index do |depts_el_22, depts_i_23|
      out_1 = []
      t24 = depts_el_22["teams"]
      t24.each_with_index do |teams_el_25, teams_i_26|
        t27 = teams_el_25["headcount"]
        t28 = 10
        t29 = __core_gt(t27, t28)
        out_1 << t29
      end
      out << out_1
    end
    out
  end

  def _eval_dept_total_masked
    out = []
    t30 = @input["depts"]
    t30.each_with_index do |depts_el_31, depts_i_32|
      # unsupported: DeclareAccumulator
      t34 = depts_el_31["teams"]
      t34.each_with_index do |teams_el_35, teams_i_36|
        t43 = teams_el_35["headcount"]
        t44 = 10
        t45 = __core_gt(t43, t44)
        t39 = 0
        t40 = (t45) ? (t43) : (t39)
        acc_33 = __agg_sum(acc_33, t40)
      end
      t41 = acc_33
      out << t41
    end
    out
  end

  private

  def __agg_sum(a,b)
    a + b
  end

  def __core_gt(a, b)
    a > b
  end

end
