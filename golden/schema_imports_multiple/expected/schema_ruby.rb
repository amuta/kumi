# Autogenerated by Kumi Codegen
module Kumi::Compiled::KUMI_2f51747a4f4f58a0a1e5d00c798ef56705defe10718ff1dabf12c4cbd1bf9476
  def self.from(input_data = nil)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def self.__kumi_executable__
    instance = Object.new
    instance.extend(self)
    instance
  end

  def update(input_data)
    @input = @input.merge(input_data)
    self
  end

  def [](name)
    case name
    when :tax_amount then _tax_amount
    when :price_after_tax then _price_after_tax
    when :discounted_price then _discounted_price
    when :discount_amount then _discount_amount
    when :final_price then _final_price
    else raise KeyError, "Unknown declaration"
    end
  end

  def _tax_amount(input = @input)
    t1 = input["amount"] || input[:amount]
    GoldenSchemas::Tax.from({"amount" => t1})._tax
  end

  def _price_after_tax(input = @input)
    t3 = input["amount"] || input[:amount]
    t14 = GoldenSchemas::Tax.from({"amount" => t3})._tax
    t3 + t14
  end

  def _discounted_price(input = @input)
    t15 = input["amount"] || input[:amount]
    t19 = GoldenSchemas::Tax.from({"amount" => t15})._tax
    t17 = t15 + t19
    t7 = input["discount_rate"] || input[:discount_rate]
    GoldenSchemas::Discount.from({"price" => t17, "rate" => t7})._discounted
  end

  def _discount_amount(input = @input)
    t20 = input["amount"] || input[:amount]
    t24 = GoldenSchemas::Tax.from({"amount" => t20})._tax
    t22 = t20 + t24
    t10 = input["discount_rate"] || input[:discount_rate]
    GoldenSchemas::Discount.from({"price" => t22, "rate" => t10})._savings
  end

  def _final_price(input = @input)
    t28 = input["amount"] || input[:amount]
    t32 = GoldenSchemas::Tax.from({"amount" => t28})._tax
    t30 = t28 + t32
    t26 = input["discount_rate"] || input[:discount_rate]
    GoldenSchemas::Discount.from({"price" => t30, "rate" => t26})._discounted
  end
end
