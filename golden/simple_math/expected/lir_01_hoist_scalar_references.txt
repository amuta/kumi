(LIR
  (Declaration sum
    %t1 = load_input "x" :: integer
    %t2 = load_input "y" :: integer
    %t3 = call core.add(%t1, %t2) :: integer
    yield %t3
  )
  (Declaration product
    %t4 = load_input "x" :: integer
    %t5 = load_input "y" :: integer
    %t6 = call core.mul(%t4, %t5) :: integer
    yield %t6
  )
  (Declaration difference
    %t7 = load_input "x" :: integer
    %t8 = load_input "y" :: integer
    %t9 = call core.sub(%t7, %t8) :: integer
    yield %t9
  )
  (Declaration results_array
    %t10 = const 1 :: integer
    %t11 = load_input "x" :: integer
    %t12 = const 10 :: integer
    %t13 = call core.add(%t11, %t12) :: integer
    %t14 = load_input "y" :: integer
    %t15 = const 2 :: integer
    %t16 = call core.mul(%t14, %t15) :: integer
    %t17 = make_tuple(%t10, %t13, %t16) :: tuple<integer>
    yield %t17
  )
)
