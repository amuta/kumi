# Autogenerated by Kumi Codegen
module SchemaModule
  def self.from(input_data)
      instance = Object.new
      instance.extend(self)
      instance.instance_variable_set(:@input, input_data)
      instance
  end

  def [](name)
      case name
        when :y_positive then _eval_y_positive
        when :x_positive then _eval_x_positive
        when :status then _eval_status
        else raise KeyError, "Unknown declaration"
      end
  end

  def _eval_y_positive
    out = nil
    t1 = @input["y"]
    t2 = 0
    t3 = __gt(t1, t2)
    out = t3
    out
  end

  def _eval_x_positive
    out = nil
    t4 = @input["x"]
    t5 = 0
    t6 = __gt(t4, t5)
    out = t6
    out
  end

  def _eval_status
    out = nil
    t1 = @input["y"]
    t2 = 0
    t3 = __gt(t1, t2)
    t4 = @input["x"]
    t6 = __gt(t4, t2)
    t9 = __and(t3, t6)
    t10 = "both positive"
    t12 = "x positive"
    t14 = "y positive"
    t15 = "neither positive"
    t16 = (t3) ? (t14) : (t15)
    t17 = (t6) ? (t12) : (t16)
    t18 = (t9) ? (t10) : (t17)
    out = t18
    out
  end

  private

    def __count(a,b)
      a + b
    end

    def __sum(a,b)
      a + b
    end

    def __add(a, b)
      a + b
    end

    def __and(a, b)
      a && b
    end

    def __concat(a, b)
      a.to_s + b.to_s
    end

    def __div(a, b)
      a / b
    end

    def __eq(a, b)
      a == b
    end

    def __gt(a, b)
      a > b
    end

    def __gte(a, b)
      a >= b
    end

    def __length(collection)
      collection.size
    end

    def __mul(a, b)
      a * b
    end

    def __or(a, b)
      a || b
    end

    def __pow(a, b)
      a ** b
    end

    def __select(condition, true_val, false_val)
      condition ? true_val : false_val
    end

    def __sub(a, b)
      a - b
    end

end
