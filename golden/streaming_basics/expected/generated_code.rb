# Autogenerated by Kumi Codegen
module SchemaModule
  def self.from(input_data)
      instance = Object.new
      instance.extend(self)
      instance.instance_variable_set(:@input, input_data)
      instance
  end

  def [](name)
      case name
        when :items_subtotal then _eval_items_subtotal
        when :items_discounted then _eval_items_discounted
        when :items_is_big then _eval_items_is_big
        when :items_effective then _eval_items_effective
        when :total_qty then _eval_total_qty
        when :cart_total then _eval_cart_total
        when :cart_total_effective then _eval_cart_total_effective
        else raise KeyError, "Unknown declaration"
      end
  end

  def _eval_items_subtotal
    out = []
    t1 = @input["items"]
    t1.each_with_index do |items_el_2, items_i_3|
      t4 = items_el_2["price"]
      t5 = items_el_2["qty"]
      t6 = __mul(t4, t5)
      out << t6
    end
    out
  end

  def _eval_items_discounted
    out = []
    t7 = @input["items"]
    t7.each_with_index do |items_el_8, items_i_9|
      t10 = items_el_8["price"]
      t11 = 1.0
      t12 = @input["discount"]
      t13 = __sub(t11, t12)
      t14 = __mul(t10, t13)
      out << t14
    end
    out
  end

  def _eval_items_is_big
    out = []
    t15 = @input["items"]
    t15.each_with_index do |items_el_16, items_i_17|
      t18 = items_el_16["price"]
      t19 = 100.0
      t20 = __gt(t18, t19)
      out << t20
    end
    out
  end

  def _eval_items_effective
    out = []
    t21 = @input["items"]
    t21.each_with_index do |items_el_22, items_i_23|
      t1 = items_el_22["price"]
      t2 = 100.0
      t3 = __gt(t1, t2)
      t5 = items_el_22["qty"]
      t6 = __mul(t1, t5)
      t26 = 0.9
      t27 = __mul(t6, t26)
      t29 = (t3) ? (t27) : (t6)
      out << t29
    end
    out
  end

  def _eval_total_qty
    out = nil
    acc_30 = 0
    t31 = @input["items"]
    t31.each_with_index do |items_el_32, items_i_33|
      t34 = items_el_32["qty"]
      acc_30 = __sum(acc_30, t34)
    end
    t35 = acc_30
    out = t35
    out
  end

  def _eval_cart_total
    out = nil
    acc_36 = 0.0
    t37 = @input["items"]
    t37.each_with_index do |items_el_38, items_i_39|
      t7 = items_el_38["price"]
      t8 = items_el_38["qty"]
      t9 = __mul(t7, t8)
      acc_36 = __sum(acc_36, t9)
    end
    t41 = acc_36
    out = t41
    out
  end

  def _eval_cart_total_effective
    out = nil
    acc_42 = 0.0
    t43 = @input["items"]
    t43.each_with_index do |items_el_44, items_i_45|
      t16 = items_el_44["price"]
      t17 = 100.0
      t18 = __gt(t16, t17)
      t20 = items_el_44["qty"]
      t21 = __mul(t16, t20)
      t12 = 0.9
      t13 = __mul(t21, t12)
      t15 = (t18) ? (t13) : (t21)
      acc_42 = __sum(acc_42, t15)
    end
    t47 = acc_42
    out = t47
    out
  end

  private

    def __count(a,b)
      a + b
    end

    def __sum(a,b)
      a + b
    end

    def __add(a, b)
      a + b
    end

    def __and(a, b)
      a && b
    end

    def __concat(a, b)
      a.to_s + b.to_s
    end

    def __div(a, b)
      a / b
    end

    def __eq(a, b)
      a == b
    end

    def __gt(a, b)
      a > b
    end

    def __gte(a, b)
      a >= b
    end

    def __length(collection)
      collection.size
    end

    def __mul(a, b)
      a * b
    end

    def __or(a, b)
      a || b
    end

    def __pow(a, b)
      a ** b
    end

    def __select(condition, true_val, false_val)
      condition ? true_val : false_val
    end

    def __sub(a, b)
      a - b
    end

end
