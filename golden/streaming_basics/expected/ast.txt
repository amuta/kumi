(Root
  inputs: [
    (InputDeclaration :items :array
      [
        (InputDeclaration :item :hash
          [
            (InputDeclaration :price :float)
            (InputDeclaration :qty :integer)
          ]
        )
      ]
    )
    (InputDeclaration :discount :float)
  ]
  values: [
    (ValueDeclaration :items_subtotal
      (CallExpression :multiply
        (InputElementReference items.item.price)
        (InputElementReference items.item.qty)
      )
    )
    (ValueDeclaration :items_discounted
      (CallExpression :multiply
        (InputElementReference items.item.price)
        (CallExpression :subtract
          (Literal 1.0)
          (InputReference :discount)
        )
      )
    )
    (ValueDeclaration :items_is_big
      (CallExpression :>
        (InputElementReference items.item.price)
        (Literal 100.0)
      )
    )
    (ValueDeclaration :items_effective
      (CallExpression :select
        (DeclarationReference :items_is_big)
        (CallExpression :multiply
          (DeclarationReference :items_subtotal)
          (Literal 0.9)
        )
        (DeclarationReference :items_subtotal)
      )
    )
    (ValueDeclaration :total_qty
      (CallExpression :sum
        (InputElementReference items.item.qty)
      )
    )
    (ValueDeclaration :cart_total
      (CallExpression :sum
        (DeclarationReference :items_subtotal)
      )
    )
    (ValueDeclaration :cart_total_effective
      (CallExpression :sum
        (DeclarationReference :items_effective)
      )
    )
  ]
  traits: []
)