(SNAST
  (VALUE state_tax
    (Call :core.mul
      (InputRef income key_chain=[]) :: [] -> float
      (InputRef state_rate key_chain=[]) :: [] -> float
    ) :: [] -> float
  ) :: [] -> float
  (VALUE local_tax
    (Call :core.mul
      (InputRef income key_chain=[]) :: [] -> float
      (InputRef local_rate key_chain=[]) :: [] -> float
    ) :: [] -> float
  ) :: [] -> float
  (VALUE taxable
    (Fold :agg.max
      (Tuple
        (Call :core.sub
          (InputRef income key_chain=[]) :: [] -> float
          (InputRef statuses.status.std key_chain=[]) :: [statuses] -> float
        ) :: [statuses] -> float
        (Const 0) :: [] -> integer
      ) :: [statuses] -> tuple<float, integer>
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE lo
    (InputRef statuses.status.rates.bracket.lo key_chain=[]) :: [statuses, rates] -> float
  ) :: [statuses, rates] -> float
  (VALUE hi
    (InputRef statuses.status.rates.bracket.hi key_chain=[]) :: [statuses, rates] -> float
  ) :: [statuses, rates] -> float
  (VALUE rate
    (InputRef statuses.status.rates.bracket.rate key_chain=[]) :: [statuses, rates] -> float
  ) :: [statuses, rates] -> float
  (VALUE big_hi
    (Const 100000000000.0) :: [] -> float
  ) :: [] -> float
  (VALUE hi_eff
    (Select
      (Call :core.eq
        (Ref hi) :: [statuses, rates] -> float
        (Const -1) :: [] -> integer
      ) :: [statuses, rates] -> boolean
      (Const 100000000000.0) :: [] -> float
      (Ref hi) :: [statuses, rates] -> float
    ) :: [statuses, rates] -> float
  ) :: [statuses, rates] -> float
  (VALUE amt
    (Call :core.clamp
      (Call :core.sub
        (Ref taxable) :: [statuses] -> float
        (Ref lo) :: [statuses, rates] -> float
      ) :: [statuses, rates] -> float
      (Const 0) :: [] -> integer
      (Call :core.sub
        (Ref hi_eff) :: [statuses, rates] -> float
        (Ref lo) :: [statuses, rates] -> float
      ) :: [statuses, rates] -> float
    ) :: [statuses, rates] -> float
  ) :: [statuses, rates] -> float
  (VALUE fed_tax
    (Reduce :agg.sum over [rates]
      (Call :core.mul
        (Ref amt) :: [statuses, rates] -> float
        (Ref rate) :: [statuses, rates] -> float
      ) :: [statuses, rates] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (TRAIT in_br
    (Call :core.and
      (Call :core.gte
        (Ref taxable) :: [statuses] -> float
        (Ref lo) :: [statuses, rates] -> float
      ) :: [statuses, rates] -> boolean
      (Call :core.lt
        (Ref taxable) :: [statuses] -> float
        (Ref hi_eff) :: [statuses, rates] -> float
      ) :: [statuses, rates] -> boolean
    ) :: [statuses, rates] -> boolean
  ) :: [statuses, rates] -> boolean
  (VALUE fed_marg
    (Reduce :agg.sum over [rates]
      (Select
        (Ref in_br) :: [statuses, rates] -> boolean
        (Ref rate) :: [statuses, rates] -> float
        (Const 0) :: [] -> integer
      ) :: [statuses, rates] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE fed_eff
    (Call :core.div
      (Ref fed_tax) :: [statuses] -> float
      (Fold :agg.max
        (Tuple
          (InputRef income key_chain=[]) :: [] -> float
          (Const 1.0) :: [] -> float
        ) :: [] -> tuple<float>
      ) :: [] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE ss_wage_base
    (Const 168600.0) :: [] -> float
  ) :: [] -> float
  (VALUE ss_rate
    (Const 0.062) :: [] -> float
  ) :: [] -> float
  (VALUE ss_tax
    (Call :core.mul
      (Fold :agg.min
        (Tuple
          (InputRef income key_chain=[]) :: [] -> float
          (Const 168600.0) :: [] -> float
        ) :: [] -> tuple<float>
      ) :: [] -> float
      (Const 0.062) :: [] -> float
    ) :: [] -> float
  ) :: [] -> float
  (VALUE med_base_rate
    (Const 0.0145) :: [] -> float
  ) :: [] -> float
  (VALUE med_tax
    (Call :core.mul
      (InputRef income key_chain=[]) :: [] -> float
      (Const 0.0145) :: [] -> float
    ) :: [] -> float
  ) :: [] -> float
  (VALUE addl_med_rate
    (Const 0.009) :: [] -> float
  ) :: [] -> float
  (VALUE addl_med_tax
    (Call :core.mul
      (Fold :agg.max
        (Tuple
          (Call :core.sub
            (InputRef income key_chain=[]) :: [] -> float
            (InputRef statuses.status.addl_threshold key_chain=[]) :: [statuses] -> float
          ) :: [statuses] -> float
          (Const 0) :: [] -> integer
        ) :: [statuses] -> tuple<float, integer>
      ) :: [statuses] -> float
      (Const 0.009) :: [] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE fica_tax
    (Call :core.add
      (Call :core.add
        (Ref ss_tax) :: [] -> float
        (Ref med_tax) :: [] -> float
      ) :: [] -> float
      (Ref addl_med_tax) :: [statuses] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE fica_eff
    (Call :core.div
      (Ref fica_tax) :: [statuses] -> float
      (Fold :agg.max
        (Tuple
          (InputRef income key_chain=[]) :: [] -> float
          (Const 1.0) :: [] -> float
        ) :: [] -> tuple<float>
      ) :: [] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE total_tax
    (Call :core.add
      (Call :core.add
        (Call :core.add
          (Ref fed_tax) :: [statuses] -> float
          (Ref fica_tax) :: [statuses] -> float
        ) :: [statuses] -> float
        (Ref state_tax) :: [] -> float
      ) :: [statuses] -> float
      (Ref local_tax) :: [] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE total_eff
    (Call :core.div
      (Ref total_tax) :: [statuses] -> float
      (Fold :agg.max
        (Tuple
          (InputRef income key_chain=[]) :: [] -> float
          (Const 1.0) :: [] -> float
        ) :: [] -> tuple<float>
      ) :: [] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE after_tax
    (Call :core.sub
      (InputRef income key_chain=[]) :: [] -> float
      (Ref total_tax) :: [statuses] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE take_home
    (Call :core.sub
      (Ref after_tax) :: [statuses] -> float
      (InputRef retirement_contrib key_chain=[]) :: [] -> float
    ) :: [statuses] -> float
  ) :: [statuses] -> float
  (VALUE summary
    (Hash
      (Pair filing_status
        (InputRef statuses.status.name key_chain=[]) :: [statuses] -> string
      ) :: [statuses] -> pair
      (Pair federal
        (Hash
          (Pair marginal
            (Ref fed_marg) :: [statuses] -> float
          ) :: [statuses] -> pair
          (Pair effective
            (Ref fed_eff) :: [statuses] -> float
          ) :: [statuses] -> pair
          (Pair tax
            (Ref fed_tax) :: [statuses] -> float
          ) :: [statuses] -> pair
        ) :: [statuses] -> hash
      ) :: [statuses] -> pair
      (Pair fica
        (Hash
          (Pair effective
            (Ref fica_eff) :: [statuses] -> float
          ) :: [statuses] -> pair
          (Pair tax
            (Ref fica_tax) :: [statuses] -> float
          ) :: [statuses] -> pair
        ) :: [statuses] -> hash
      ) :: [statuses] -> pair
      (Pair state
        (Hash
          (Pair marginal
            (InputRef state_rate key_chain=[]) :: [] -> float
          ) :: [] -> pair
          (Pair effective
            (InputRef state_rate key_chain=[]) :: [] -> float
          ) :: [] -> pair
          (Pair tax
            (Ref state_tax) :: [] -> float
          ) :: [] -> pair
        ) :: [] -> hash
      ) :: [] -> pair
      (Pair local
        (Hash
          (Pair marginal
            (InputRef local_rate key_chain=[]) :: [] -> float
          ) :: [] -> pair
          (Pair effective
            (InputRef local_rate key_chain=[]) :: [] -> float
          ) :: [] -> pair
          (Pair tax
            (Ref local_tax) :: [] -> float
          ) :: [] -> pair
        ) :: [] -> hash
      ) :: [] -> pair
      (Pair total
        (Hash
          (Pair effective
            (Ref total_eff) :: [statuses] -> float
          ) :: [statuses] -> pair
          (Pair tax
            (Ref total_tax) :: [statuses] -> float
          ) :: [statuses] -> pair
        ) :: [statuses] -> hash
      ) :: [statuses] -> pair
      (Pair after_tax
        (Ref after_tax) :: [statuses] -> float
      ) :: [statuses] -> pair
      (Pair retirement_contrib
        (InputRef retirement_contrib key_chain=[]) :: [] -> float
      ) :: [] -> pair
      (Pair take_home
        (Ref take_home) :: [statuses] -> float
      ) :: [statuses] -> pair
    ) :: [statuses] -> hash
  ) :: [statuses] -> hash
)