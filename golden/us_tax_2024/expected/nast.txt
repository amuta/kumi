(NAST
  (VALUE state_tax
    (Call :"core.mul"
    (InputRef [:income])
    (InputRef [:state_rate])
  )
  )
  (VALUE local_tax
    (Call :"core.mul"
    (InputRef [:income])
    (InputRef [:local_rate])
  )
  )
  (VALUE taxable
    (Call :"agg.max"
    (Tuple
      (Call :"core.sub"
        (InputRef [:income])
        (InputRef [:statuses, :status, :std])
      )
      (Const 0)
    )
  )
  )
  (VALUE lo
    (InputRef [:statuses, :status, :rates, :bracket, :lo])
  )
  (VALUE hi
    (InputRef [:statuses, :status, :rates, :bracket, :hi])
  )
  (VALUE rate
    (InputRef [:statuses, :status, :rates, :bracket, :rate])
  )
  (VALUE big_hi
    (Const 100000000000.0)
  )
  (VALUE hi_eff
    (Call :__select__
    (Call :"core.eq"
      (Ref hi)
      (Const -1)
    )
    (Ref big_hi)
    (Ref hi)
  )
  )
  (VALUE amt
    (Call :"core.clamp"
    (Call :"core.sub"
      (Ref taxable)
      (Ref lo)
    )
    (Const 0)
    (Call :"core.sub"
      (Ref hi_eff)
      (Ref lo)
    )
  )
  )
  (VALUE fed_tax
    (Call :"agg.sum"
    (Call :"core.mul"
      (Ref amt)
      (Ref rate)
    )
  )
  )
  (VALUE in_br
    (Call :"core.and"
    (Call :"core.gte"
      (Ref taxable)
      (Ref lo)
    )
    (Call :"core.lt"
      (Ref taxable)
      (Ref hi_eff)
    )
  )
  )
  (VALUE fed_marg
    (Call :sum
    (Call :__select__
      (Ref in_br)
      (Ref rate)
      (Const 0)
    )
  )
  )
  (VALUE fed_eff
    (Call :"core.div"
    (Ref fed_tax)
    (Call :"agg.max"
      (Tuple
        (InputRef [:income])
        (Const 1.0)
      )
    )
  )
  )
  (VALUE ss_wage_base
    (Const 168600.0)
  )
  (VALUE ss_rate
    (Const 0.062)
  )
  (VALUE ss_tax
    (Call :"core.mul"
    (Call :"agg.min"
      (Tuple
        (InputRef [:income])
        (Ref ss_wage_base)
      )
    )
    (Ref ss_rate)
  )
  )
  (VALUE med_base_rate
    (Const 0.0145)
  )
  (VALUE med_tax
    (Call :"core.mul"
    (InputRef [:income])
    (Ref med_base_rate)
  )
  )
  (VALUE addl_med_rate
    (Const 0.009)
  )
  (VALUE addl_med_tax
    (Call :"core.mul"
    (Call :"agg.max"
      (Tuple
        (Call :"core.sub"
          (InputRef [:income])
          (InputRef [:statuses, :status, :addl_threshold])
        )
        (Const 0)
      )
    )
    (Ref addl_med_rate)
  )
  )
  (VALUE fica_tax
    (Call :"core.add"
    (Call :"core.add"
      (Ref ss_tax)
      (Ref med_tax)
    )
    (Ref addl_med_tax)
  )
  )
  (VALUE fica_eff
    (Call :"core.div"
    (Ref fica_tax)
    (Call :"agg.max"
      (Tuple
        (InputRef [:income])
        (Const 1.0)
      )
    )
  )
  )
  (VALUE total_tax
    (Call :"core.add"
    (Call :"core.add"
      (Call :"core.add"
        (Ref fed_tax)
        (Ref fica_tax)
      )
      (Ref state_tax)
    )
    (Ref local_tax)
  )
  )
  (VALUE total_eff
    (Call :"core.div"
    (Ref total_tax)
    (Call :"agg.max"
      (Tuple
        (InputRef [:income])
        (Const 1.0)
      )
    )
  )
  )
  (VALUE after_tax
    (Call :"core.sub"
    (InputRef [:income])
    (Ref total_tax)
  )
  )
  (VALUE take_home
    (Call :"core.sub"
    (Ref after_tax)
    (InputRef [:retirement_contrib])
  )
  )
  (VALUE summary
    (Hash
    (Pair filing_status 
      (InputRef [:statuses, :status, :name])
    )
    (Pair federal 
      (Hash
        (Pair marginal 
          (Ref fed_marg)
        )
        (Pair effective 
          (Ref fed_eff)
        )
        (Pair tax 
          (Ref fed_tax)
        )
      )
    )
    (Pair fica 
      (Hash
        (Pair effective 
          (Ref fica_eff)
        )
        (Pair tax 
          (Ref fica_tax)
        )
      )
    )
    (Pair state 
      (Hash
        (Pair marginal 
          (InputRef [:state_rate])
        )
        (Pair effective 
          (InputRef [:state_rate])
        )
        (Pair tax 
          (Ref state_tax)
        )
      )
    )
    (Pair local 
      (Hash
        (Pair marginal 
          (InputRef [:local_rate])
        )
        (Pair effective 
          (InputRef [:local_rate])
        )
        (Pair tax 
          (Ref local_tax)
        )
      )
    )
    (Pair total 
      (Hash
        (Pair effective 
          (Ref total_eff)
        )
        (Pair tax 
          (Ref total_tax)
        )
      )
    )
    (Pair after_tax 
      (Ref after_tax)
    )
    (Pair retirement_contrib 
      (InputRef [:retirement_contrib])
    )
    (Pair take_home 
      (Ref take_home)
    )
  )
  )
)