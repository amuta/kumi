(LIR
  (Declaration state_tax
    %t1 = load_input "income" :: float
    %t2 = load_input "state_rate" :: float
    %t3 = call core.mul(%t1, %t2) :: float
    yield %t3
  )
  (Declaration local_tax
    %t4 = load_input "income" :: float
    %t5 = load_input "local_rate" :: float
    %t6 = call core.mul(%t4, %t5) :: float
    yield %t6
  )
  (Declaration taxable
    %t7 = load_input "statuses" :: array
    loop statuses id=L1 in %t7 as el=%statuses_el_8, idx=%statuses_i_9
      %t10 = load_input "income" :: float
      %t11 = load_field statuses_el_8["std"] :: float
      %t12 = call core.sub(%t10, %t11) :: float
      %t13 = const 0 :: integer
      %t14 = make_tuple(%t12, %t13) :: tuple<float, integer>
      %t15 = fold %t14 fn="agg.max" :: float
      yield %t15
    end_loop
  )
  (Declaration lo
    %t16 = load_input "statuses" :: array
    loop statuses id=L2 in %t16 as el=%statuses_el_17, idx=%statuses_i_18
      %t19 = load_field statuses_el_17["rates"] :: any
      loop rates id=L3 in %t19 as el=%rates_el_20, idx=%rates_i_21
        %t22 = load_field rates_el_20["lo"] :: float
        yield %t22
      end_loop
    end_loop
  )
  (Declaration hi
    %t23 = load_input "statuses" :: array
    loop statuses id=L4 in %t23 as el=%statuses_el_24, idx=%statuses_i_25
      %t26 = load_field statuses_el_24["rates"] :: any
      loop rates id=L5 in %t26 as el=%rates_el_27, idx=%rates_i_28
        %t29 = load_field rates_el_27["hi"] :: float
        yield %t29
      end_loop
    end_loop
  )
  (Declaration rate
    %t30 = load_input "statuses" :: array
    loop statuses id=L6 in %t30 as el=%statuses_el_31, idx=%statuses_i_32
      %t33 = load_field statuses_el_31["rates"] :: any
      loop rates id=L7 in %t33 as el=%rates_el_34, idx=%rates_i_35
        %t36 = load_field rates_el_34["rate"] :: float
        yield %t36
      end_loop
    end_loop
  )
  (Declaration big_hi
    %t37 = const 100000000000.0 :: float
    yield %t37
  )
  (Declaration hi_eff
    %t38 = load_input "statuses" :: array
    loop statuses id=L8 in %t38 as el=%statuses_el_39, idx=%statuses_i_40
      %t41 = load_field statuses_el_39["rates"] :: any
      loop rates id=L9 in %t41 as el=%rates_el_42, idx=%rates_i_43
        %t207 = load_input "statuses" :: array
        %t208 = load_field statuses_el_39["rates"] :: any
        %t209 = load_field rates_el_42["hi"] :: float
        %t45 = const -1 :: integer
        %t46 = call core.eq(%t209, %t45) :: boolean
        %t47 = const 100000000000.0 :: float
        %t210 = load_input "statuses" :: array
        %t211 = load_field statuses_el_39["rates"] :: any
        %t212 = load_field rates_el_42["hi"] :: float
        %t49 = select %t46, %t47, %t212 :: float
        yield %t49
      end_loop
    end_loop
  )
  (Declaration amt
    %t50 = load_input "statuses" :: array
    loop statuses id=L10 in %t50 as el=%statuses_el_51, idx=%statuses_i_52
      %t213 = load_input "statuses" :: array
      %t214 = load_input "income" :: float
      %t215 = load_field statuses_el_51["std"] :: float
      %t216 = call core.sub(%t214, %t215) :: float
      %t217 = const 0 :: integer
      %t218 = make_tuple(%t216, %t217) :: tuple<float, integer>
      %t219 = fold %t218 fn="agg.max" :: float
      %t53 = load_field statuses_el_51["rates"] :: any
      loop rates id=L11 in %t53 as el=%rates_el_54, idx=%rates_i_55
        %t220 = load_input "statuses" :: array
        %t221 = load_field statuses_el_51["rates"] :: any
        %t222 = load_field rates_el_54["lo"] :: float
        %t58 = call core.sub(%t219, %t222) :: float
        %t59 = const 0 :: integer
        %t223 = load_input "statuses" :: array
        %t224 = load_field statuses_el_51["rates"] :: any
        %t231 = load_input "statuses" :: array
        %t232 = load_field statuses_el_51["rates"] :: any
        %t233 = load_field rates_el_54["hi"] :: float
        %t226 = const -1 :: integer
        %t227 = call core.eq(%t233, %t226) :: boolean
        %t228 = const 100000000000.0 :: float
        %t234 = load_input "statuses" :: array
        %t235 = load_field statuses_el_51["rates"] :: any
        %t236 = load_field rates_el_54["hi"] :: float
        %t230 = select %t227, %t228, %t236 :: float
        %t237 = load_input "statuses" :: array
        %t238 = load_field statuses_el_51["rates"] :: any
        %t239 = load_field rates_el_54["lo"] :: float
        %t62 = call core.sub(%t230, %t239) :: float
        %t63 = call core.clamp(%t58, %t59, %t62) :: float
        yield %t63
      end_loop
    end_loop
  )
  (Declaration fed_tax
    %t64 = load_input "statuses" :: array
    loop statuses id=L12 in %t64 as el=%statuses_el_65, idx=%statuses_i_66
      %t250 = load_input "statuses" :: array
      %t251 = load_input "income" :: float
      %t252 = load_field statuses_el_65["std"] :: float
      %t253 = call core.sub(%t251, %t252) :: float
      %t254 = const 0 :: integer
      %t255 = make_tuple(%t253, %t254) :: tuple<float, integer>
      %t256 = fold %t255 fn="agg.max" :: float
      %acc_67 = decl_acc :: float
      %t68 = load_field statuses_el_65["rates"] :: any
      loop rates id=L13 in %t68 as el=%rates_el_69, idx=%rates_i_70
        %t240 = load_input "statuses" :: array
        %t241 = load_field statuses_el_65["rates"] :: any
        %t257 = load_input "statuses" :: array
        %t258 = load_field statuses_el_65["rates"] :: any
        %t259 = load_field rates_el_69["lo"] :: float
        %t244 = call core.sub(%t256, %t259) :: float
        %t245 = const 0 :: integer
        %t260 = load_input "statuses" :: array
        %t261 = load_field statuses_el_65["rates"] :: any
        %t268 = load_input "statuses" :: array
        %t269 = load_field statuses_el_65["rates"] :: any
        %t270 = load_field rates_el_69["hi"] :: float
        %t263 = const -1 :: integer
        %t264 = call core.eq(%t270, %t263) :: boolean
        %t265 = const 100000000000.0 :: float
        %t271 = load_input "statuses" :: array
        %t272 = load_field statuses_el_65["rates"] :: any
        %t273 = load_field rates_el_69["hi"] :: float
        %t267 = select %t264, %t265, %t273 :: float
        %t274 = load_input "statuses" :: array
        %t275 = load_field statuses_el_65["rates"] :: any
        %t276 = load_field rates_el_69["lo"] :: float
        %t248 = call core.sub(%t267, %t276) :: float
        %t249 = call core.clamp(%t244, %t245, %t248) :: float
        %t277 = load_input "statuses" :: array
        %t278 = load_field statuses_el_65["rates"] :: any
        %t279 = load_field rates_el_69["rate"] :: float
        %t73 = call core.mul(%t249, %t279) :: float
        %acc_67 = acc_add agg.sum(%acc_67, %t73) :: float
      end_loop
      %t74 = acc_load %acc_67 :: float
      yield %t74
    end_loop
  )
  (Declaration in_br
    %t75 = load_input "statuses" :: array
    loop statuses id=L14 in %t75 as el=%statuses_el_76, idx=%statuses_i_77
      %t280 = load_input "statuses" :: array
      %t281 = load_input "income" :: float
      %t282 = load_field statuses_el_76["std"] :: float
      %t283 = call core.sub(%t281, %t282) :: float
      %t284 = const 0 :: integer
      %t285 = make_tuple(%t283, %t284) :: tuple<float, integer>
      %t286 = fold %t285 fn="agg.max" :: float
      %t290 = load_input "statuses" :: array
      %t291 = load_input "income" :: float
      %t292 = load_field statuses_el_76["std"] :: float
      %t293 = call core.sub(%t291, %t292) :: float
      %t294 = const 0 :: integer
      %t295 = make_tuple(%t293, %t294) :: tuple<float, integer>
      %t296 = fold %t295 fn="agg.max" :: float
      %t78 = load_field statuses_el_76["rates"] :: any
      loop rates id=L15 in %t78 as el=%rates_el_79, idx=%rates_i_80
        %t287 = load_input "statuses" :: array
        %t288 = load_field statuses_el_76["rates"] :: any
        %t289 = load_field rates_el_79["lo"] :: float
        %t83 = call core.gte(%t286, %t289) :: boolean
        %t297 = load_input "statuses" :: array
        %t298 = load_field statuses_el_76["rates"] :: any
        %t305 = load_input "statuses" :: array
        %t306 = load_field statuses_el_76["rates"] :: any
        %t307 = load_field rates_el_79["hi"] :: float
        %t300 = const -1 :: integer
        %t301 = call core.eq(%t307, %t300) :: boolean
        %t302 = const 100000000000.0 :: float
        %t308 = load_input "statuses" :: array
        %t309 = load_field statuses_el_76["rates"] :: any
        %t310 = load_field rates_el_79["hi"] :: float
        %t304 = select %t301, %t302, %t310 :: float
        %t86 = call core.lt(%t296, %t304) :: boolean
        %t87 = call core.and(%t83, %t86) :: boolean
        yield %t87
      end_loop
    end_loop
  )
  (Declaration fed_marg
    %t88 = load_input "statuses" :: array
    loop statuses id=L16 in %t88 as el=%statuses_el_89, idx=%statuses_i_90
      %t320 = load_input "statuses" :: array
      %t321 = load_input "income" :: float
      %t322 = load_field statuses_el_89["std"] :: float
      %t323 = call core.sub(%t321, %t322) :: float
      %t324 = const 0 :: integer
      %t325 = make_tuple(%t323, %t324) :: tuple<float, integer>
      %t326 = fold %t325 fn="agg.max" :: float
      %t330 = load_input "statuses" :: array
      %t331 = load_input "income" :: float
      %t332 = load_field statuses_el_89["std"] :: float
      %t333 = call core.sub(%t331, %t332) :: float
      %t334 = const 0 :: integer
      %t335 = make_tuple(%t333, %t334) :: tuple<float, integer>
      %t336 = fold %t335 fn="agg.max" :: float
      %acc_91 = decl_acc :: float
      %t92 = load_field statuses_el_89["rates"] :: any
      loop rates id=L17 in %t92 as el=%rates_el_93, idx=%rates_i_94
        %t311 = load_input "statuses" :: array
        %t312 = load_field statuses_el_89["rates"] :: any
        %t327 = load_input "statuses" :: array
        %t328 = load_field statuses_el_89["rates"] :: any
        %t329 = load_field rates_el_93["lo"] :: float
        %t315 = call core.gte(%t326, %t329) :: boolean
        %t337 = load_input "statuses" :: array
        %t338 = load_field statuses_el_89["rates"] :: any
        %t345 = load_input "statuses" :: array
        %t346 = load_field statuses_el_89["rates"] :: any
        %t347 = load_field rates_el_93["hi"] :: float
        %t340 = const -1 :: integer
        %t341 = call core.eq(%t347, %t340) :: boolean
        %t342 = const 100000000000.0 :: float
        %t348 = load_input "statuses" :: array
        %t349 = load_field statuses_el_89["rates"] :: any
        %t350 = load_field rates_el_93["hi"] :: float
        %t344 = select %t341, %t342, %t350 :: float
        %t318 = call core.lt(%t336, %t344) :: boolean
        %t319 = call core.and(%t315, %t318) :: boolean
        %t351 = load_input "statuses" :: array
        %t352 = load_field statuses_el_89["rates"] :: any
        %t353 = load_field rates_el_93["rate"] :: float
        %t97 = const 0 :: integer
        %t98 = select %t319, %t353, %t97 :: float
        %acc_91 = acc_add agg.sum(%acc_91, %t98) :: float
      end_loop
      %t99 = acc_load %acc_91 :: float
      yield %t99
    end_loop
  )
  (Declaration fed_eff
    %t100 = load_input "statuses" :: array
    loop statuses id=L18 in %t100 as el=%statuses_el_101, idx=%statuses_i_102
      %t374 = load_input "statuses" :: array
      %t375 = load_input "income" :: float
      %t376 = load_field statuses_el_101["std"] :: float
      %t377 = call core.sub(%t375, %t376) :: float
      %t378 = const 0 :: integer
      %t379 = make_tuple(%t377, %t378) :: tuple<float, integer>
      %t380 = fold %t379 fn="agg.max" :: float
      %t354 = load_input "statuses" :: array
      %acc356 = decl_acc :: float
      %t357 = load_field statuses_el_101["rates"] :: any
      loop rates id=L27 in %t357 as el=%t358, idx=%t359
        %t364 = load_input "statuses" :: array
        %t365 = load_field statuses_el_101["rates"] :: any
        %t381 = load_input "statuses" :: array
        %t382 = load_field statuses_el_101["rates"] :: any
        %t383 = load_field t358["lo"] :: float
        %t368 = call core.sub(%t380, %t383) :: float
        %t369 = const 0 :: integer
        %t384 = load_input "statuses" :: array
        %t385 = load_field statuses_el_101["rates"] :: any
        %t392 = load_input "statuses" :: array
        %t393 = load_field statuses_el_101["rates"] :: any
        %t394 = load_field t358["hi"] :: float
        %t387 = const -1 :: integer
        %t388 = call core.eq(%t394, %t387) :: boolean
        %t389 = const 100000000000.0 :: float
        %t395 = load_input "statuses" :: array
        %t396 = load_field statuses_el_101["rates"] :: any
        %t397 = load_field t358["hi"] :: float
        %t391 = select %t388, %t389, %t397 :: float
        %t398 = load_input "statuses" :: array
        %t399 = load_field statuses_el_101["rates"] :: any
        %t400 = load_field t358["lo"] :: float
        %t372 = call core.sub(%t391, %t400) :: float
        %t373 = call core.clamp(%t368, %t369, %t372) :: float
        %t401 = load_input "statuses" :: array
        %t402 = load_field statuses_el_101["rates"] :: any
        %t403 = load_field t358["rate"] :: float
        %t362 = call core.mul(%t373, %t403) :: float
        %acc356 = acc_add agg.sum(%acc356, %t362) :: float
      end_loop
      %t363 = acc_load %acc356 :: float
      %t104 = load_input "income" :: float
      %t105 = const 1.0 :: float
      %t106 = make_tuple(%t104, %t105) :: tuple<float>
      %t107 = fold %t106 fn="agg.max" :: float
      %t108 = call core.div(%t363, %t107) :: float
      yield %t108
    end_loop
  )
  (Declaration ss_wage_base
    %t109 = const 168600.0 :: float
    yield %t109
  )
  (Declaration ss_rate
    %t110 = const 0.062 :: float
    yield %t110
  )
  (Declaration ss_tax
    %t111 = load_input "income" :: float
    %t112 = const 168600.0 :: float
    %t113 = make_tuple(%t111, %t112) :: tuple<float>
    %t114 = fold %t113 fn="agg.min" :: float
    %t115 = const 0.062 :: float
    %t116 = call core.mul(%t114, %t115) :: float
    yield %t116
  )
  (Declaration med_base_rate
    %t117 = const 0.0145 :: float
    yield %t117
  )
  (Declaration med_tax
    %t118 = load_input "income" :: float
    %t119 = const 0.0145 :: float
    %t120 = call core.mul(%t118, %t119) :: float
    yield %t120
  )
  (Declaration addl_med_rate
    %t121 = const 0.009 :: float
    yield %t121
  )
  (Declaration addl_med_tax
    %t122 = load_input "statuses" :: array
    loop statuses id=L19 in %t122 as el=%statuses_el_123, idx=%statuses_i_124
      %t125 = load_input "income" :: float
      %t126 = load_field statuses_el_123["addl_threshold"] :: float
      %t127 = call core.sub(%t125, %t126) :: float
      %t128 = const 0 :: integer
      %t129 = make_tuple(%t127, %t128) :: tuple<float, integer>
      %t130 = fold %t129 fn="agg.max" :: float
      %t131 = const 0.009 :: float
      %t132 = call core.mul(%t130, %t131) :: float
      yield %t132
    end_loop
  )
  (Declaration fica_tax
    %t133 = load_input "statuses" :: array
    %t404 = load_input "income" :: float
    %t405 = const 168600.0 :: float
    %t406 = make_tuple(%t404, %t405) :: tuple<float>
    %t407 = fold %t406 fn="agg.min" :: float
    %t408 = const 0.062 :: float
    %t409 = call core.mul(%t407, %t408) :: float
    %t410 = load_input "income" :: float
    %t411 = const 0.0145 :: float
    %t412 = call core.mul(%t410, %t411) :: float
    loop statuses id=L20 in %t133 as el=%statuses_el_134, idx=%statuses_i_135
      %t138 = call core.add(%t409, %t412) :: float
      %t413 = load_input "statuses" :: array
      %t414 = load_input "income" :: float
      %t415 = load_field statuses_el_134["addl_threshold"] :: float
      %t416 = call core.sub(%t414, %t415) :: float
      %t417 = const 0 :: integer
      %t418 = make_tuple(%t416, %t417) :: tuple<float, integer>
      %t419 = fold %t418 fn="agg.max" :: float
      %t420 = const 0.009 :: float
      %t421 = call core.mul(%t419, %t420) :: float
      %t140 = call core.add(%t138, %t421) :: float
      yield %t140
    end_loop
  )
  (Declaration fica_eff
    %t428 = load_input "income" :: float
    %t429 = const 168600.0 :: float
    %t430 = make_tuple(%t428, %t429) :: tuple<float>
    %t431 = fold %t430 fn="agg.min" :: float
    %t432 = const 0.062 :: float
    %t433 = call core.mul(%t431, %t432) :: float
    %t434 = load_input "income" :: float
    %t435 = const 0.0145 :: float
    %t436 = call core.mul(%t434, %t435) :: float
    %t141 = load_input "statuses" :: array
    loop statuses id=L21 in %t141 as el=%statuses_el_142, idx=%statuses_i_143
      %t422 = load_input "statuses" :: array
      %t425 = call core.add(%t433, %t436) :: float
      %t437 = load_input "statuses" :: array
      %t438 = load_input "income" :: float
      %t439 = load_field statuses_el_142["addl_threshold"] :: float
      %t440 = call core.sub(%t438, %t439) :: float
      %t441 = const 0 :: integer
      %t442 = make_tuple(%t440, %t441) :: tuple<float, integer>
      %t443 = fold %t442 fn="agg.max" :: float
      %t444 = const 0.009 :: float
      %t445 = call core.mul(%t443, %t444) :: float
      %t427 = call core.add(%t425, %t445) :: float
      %t145 = load_input "income" :: float
      %t146 = const 1.0 :: float
      %t147 = make_tuple(%t145, %t146) :: tuple<float>
      %t148 = fold %t147 fn="agg.max" :: float
      %t149 = call core.div(%t427, %t148) :: float
      yield %t149
    end_loop
  )
  (Declaration total_tax
    %t508 = load_input "income" :: float
    %t509 = const 168600.0 :: float
    %t510 = make_tuple(%t508, %t509) :: tuple<float>
    %t511 = fold %t510 fn="agg.min" :: float
    %t512 = const 0.062 :: float
    %t513 = call core.mul(%t511, %t512) :: float
    %t514 = load_input "income" :: float
    %t515 = const 0.0145 :: float
    %t516 = call core.mul(%t514, %t515) :: float
    %t150 = load_input "statuses" :: array
    %t446 = load_input "income" :: float
    %t447 = load_input "state_rate" :: float
    %t448 = call core.mul(%t446, %t447) :: float
    %t449 = load_input "income" :: float
    %t450 = load_input "local_rate" :: float
    %t451 = call core.mul(%t449, %t450) :: float
    loop statuses id=L22 in %t150 as el=%statuses_el_151, idx=%statuses_i_152
      %t472 = load_input "statuses" :: array
      %t473 = load_input "income" :: float
      %t474 = load_field statuses_el_151["std"] :: float
      %t475 = call core.sub(%t473, %t474) :: float
      %t476 = const 0 :: integer
      %t477 = make_tuple(%t475, %t476) :: tuple<float, integer>
      %t478 = fold %t477 fn="agg.max" :: float
      %t452 = load_input "statuses" :: array
      %acc454 = decl_acc :: float
      %t455 = load_field statuses_el_151["rates"] :: any
      loop rates id=L28 in %t455 as el=%t456, idx=%t457
        %t462 = load_input "statuses" :: array
        %t463 = load_field statuses_el_151["rates"] :: any
        %t479 = load_input "statuses" :: array
        %t480 = load_field statuses_el_151["rates"] :: any
        %t481 = load_field t456["lo"] :: float
        %t466 = call core.sub(%t478, %t481) :: float
        %t467 = const 0 :: integer
        %t482 = load_input "statuses" :: array
        %t483 = load_field statuses_el_151["rates"] :: any
        %t490 = load_input "statuses" :: array
        %t491 = load_field statuses_el_151["rates"] :: any
        %t492 = load_field t456["hi"] :: float
        %t485 = const -1 :: integer
        %t486 = call core.eq(%t492, %t485) :: boolean
        %t487 = const 100000000000.0 :: float
        %t493 = load_input "statuses" :: array
        %t494 = load_field statuses_el_151["rates"] :: any
        %t495 = load_field t456["hi"] :: float
        %t489 = select %t486, %t487, %t495 :: float
        %t496 = load_input "statuses" :: array
        %t497 = load_field statuses_el_151["rates"] :: any
        %t498 = load_field t456["lo"] :: float
        %t470 = call core.sub(%t489, %t498) :: float
        %t471 = call core.clamp(%t466, %t467, %t470) :: float
        %t499 = load_input "statuses" :: array
        %t500 = load_field statuses_el_151["rates"] :: any
        %t501 = load_field t456["rate"] :: float
        %t460 = call core.mul(%t471, %t501) :: float
        %acc454 = acc_add agg.sum(%acc454, %t460) :: float
      end_loop
      %t461 = acc_load %acc454 :: float
      %t502 = load_input "statuses" :: array
      %t505 = call core.add(%t513, %t516) :: float
      %t517 = load_input "statuses" :: array
      %t518 = load_input "income" :: float
      %t519 = load_field statuses_el_151["addl_threshold"] :: float
      %t520 = call core.sub(%t518, %t519) :: float
      %t521 = const 0 :: integer
      %t522 = make_tuple(%t520, %t521) :: tuple<float, integer>
      %t523 = fold %t522 fn="agg.max" :: float
      %t524 = const 0.009 :: float
      %t525 = call core.mul(%t523, %t524) :: float
      %t507 = call core.add(%t505, %t525) :: float
      %t155 = call core.add(%t461, %t507) :: float
      %t157 = call core.add(%t155, %t448) :: float
      %t159 = call core.add(%t157, %t451) :: float
      yield %t159
    end_loop
  )
  (Declaration total_eff
    %t534 = load_input "income" :: float
    %t535 = load_input "state_rate" :: float
    %t536 = call core.mul(%t534, %t535) :: float
    %t537 = load_input "income" :: float
    %t538 = load_input "local_rate" :: float
    %t539 = call core.mul(%t537, %t538) :: float
    %t596 = load_input "income" :: float
    %t597 = const 168600.0 :: float
    %t598 = make_tuple(%t596, %t597) :: tuple<float>
    %t599 = fold %t598 fn="agg.min" :: float
    %t600 = const 0.062 :: float
    %t601 = call core.mul(%t599, %t600) :: float
    %t602 = load_input "income" :: float
    %t603 = const 0.0145 :: float
    %t604 = call core.mul(%t602, %t603) :: float
    %t160 = load_input "statuses" :: array
    loop statuses id=L23 in %t160 as el=%statuses_el_161, idx=%statuses_i_162
      %t526 = load_input "statuses" :: array
      %t560 = load_input "statuses" :: array
      %t561 = load_input "income" :: float
      %t562 = load_field statuses_el_161["std"] :: float
      %t563 = call core.sub(%t561, %t562) :: float
      %t564 = const 0 :: integer
      %t565 = make_tuple(%t563, %t564) :: tuple<float, integer>
      %t566 = fold %t565 fn="agg.max" :: float
      %t540 = load_input "statuses" :: array
      %acc542 = decl_acc :: float
      %t543 = load_field statuses_el_161["rates"] :: any
      loop rates id=L29 in %t543 as el=%t544, idx=%t545
        %t550 = load_input "statuses" :: array
        %t551 = load_field statuses_el_161["rates"] :: any
        %t567 = load_input "statuses" :: array
        %t568 = load_field statuses_el_161["rates"] :: any
        %t569 = load_field t544["lo"] :: float
        %t554 = call core.sub(%t566, %t569) :: float
        %t555 = const 0 :: integer
        %t570 = load_input "statuses" :: array
        %t571 = load_field statuses_el_161["rates"] :: any
        %t578 = load_input "statuses" :: array
        %t579 = load_field statuses_el_161["rates"] :: any
        %t580 = load_field t544["hi"] :: float
        %t573 = const -1 :: integer
        %t574 = call core.eq(%t580, %t573) :: boolean
        %t575 = const 100000000000.0 :: float
        %t581 = load_input "statuses" :: array
        %t582 = load_field statuses_el_161["rates"] :: any
        %t583 = load_field t544["hi"] :: float
        %t577 = select %t574, %t575, %t583 :: float
        %t584 = load_input "statuses" :: array
        %t585 = load_field statuses_el_161["rates"] :: any
        %t586 = load_field t544["lo"] :: float
        %t558 = call core.sub(%t577, %t586) :: float
        %t559 = call core.clamp(%t554, %t555, %t558) :: float
        %t587 = load_input "statuses" :: array
        %t588 = load_field statuses_el_161["rates"] :: any
        %t589 = load_field t544["rate"] :: float
        %t548 = call core.mul(%t559, %t589) :: float
        %acc542 = acc_add agg.sum(%acc542, %t548) :: float
      end_loop
      %t549 = acc_load %acc542 :: float
      %t590 = load_input "statuses" :: array
      %t593 = call core.add(%t601, %t604) :: float
      %t605 = load_input "statuses" :: array
      %t606 = load_input "income" :: float
      %t607 = load_field statuses_el_161["addl_threshold"] :: float
      %t608 = call core.sub(%t606, %t607) :: float
      %t609 = const 0 :: integer
      %t610 = make_tuple(%t608, %t609) :: tuple<float, integer>
      %t611 = fold %t610 fn="agg.max" :: float
      %t612 = const 0.009 :: float
      %t613 = call core.mul(%t611, %t612) :: float
      %t595 = call core.add(%t593, %t613) :: float
      %t531 = call core.add(%t549, %t595) :: float
      %t532 = call core.add(%t531, %t536) :: float
      %t533 = call core.add(%t532, %t539) :: float
      %t164 = load_input "income" :: float
      %t165 = const 1.0 :: float
      %t166 = make_tuple(%t164, %t165) :: tuple<float>
      %t167 = fold %t166 fn="agg.max" :: float
      %t168 = call core.div(%t533, %t167) :: float
      yield %t168
    end_loop
  )
  (Declaration after_tax
    %t622 = load_input "income" :: float
    %t623 = load_input "state_rate" :: float
    %t624 = call core.mul(%t622, %t623) :: float
    %t625 = load_input "income" :: float
    %t626 = load_input "local_rate" :: float
    %t627 = call core.mul(%t625, %t626) :: float
    %t684 = load_input "income" :: float
    %t685 = const 168600.0 :: float
    %t686 = make_tuple(%t684, %t685) :: tuple<float>
    %t687 = fold %t686 fn="agg.min" :: float
    %t688 = const 0.062 :: float
    %t689 = call core.mul(%t687, %t688) :: float
    %t690 = load_input "income" :: float
    %t691 = const 0.0145 :: float
    %t692 = call core.mul(%t690, %t691) :: float
    %t169 = load_input "statuses" :: array
    loop statuses id=L24 in %t169 as el=%statuses_el_170, idx=%statuses_i_171
      %t172 = load_input "income" :: float
      %t614 = load_input "statuses" :: array
      %t648 = load_input "statuses" :: array
      %t649 = load_input "income" :: float
      %t650 = load_field statuses_el_170["std"] :: float
      %t651 = call core.sub(%t649, %t650) :: float
      %t652 = const 0 :: integer
      %t653 = make_tuple(%t651, %t652) :: tuple<float, integer>
      %t654 = fold %t653 fn="agg.max" :: float
      %t628 = load_input "statuses" :: array
      %acc630 = decl_acc :: float
      %t631 = load_field statuses_el_170["rates"] :: any
      loop rates id=L30 in %t631 as el=%t632, idx=%t633
        %t638 = load_input "statuses" :: array
        %t639 = load_field statuses_el_170["rates"] :: any
        %t655 = load_input "statuses" :: array
        %t656 = load_field statuses_el_170["rates"] :: any
        %t657 = load_field t632["lo"] :: float
        %t642 = call core.sub(%t654, %t657) :: float
        %t643 = const 0 :: integer
        %t658 = load_input "statuses" :: array
        %t659 = load_field statuses_el_170["rates"] :: any
        %t666 = load_input "statuses" :: array
        %t667 = load_field statuses_el_170["rates"] :: any
        %t668 = load_field t632["hi"] :: float
        %t661 = const -1 :: integer
        %t662 = call core.eq(%t668, %t661) :: boolean
        %t663 = const 100000000000.0 :: float
        %t669 = load_input "statuses" :: array
        %t670 = load_field statuses_el_170["rates"] :: any
        %t671 = load_field t632["hi"] :: float
        %t665 = select %t662, %t663, %t671 :: float
        %t672 = load_input "statuses" :: array
        %t673 = load_field statuses_el_170["rates"] :: any
        %t674 = load_field t632["lo"] :: float
        %t646 = call core.sub(%t665, %t674) :: float
        %t647 = call core.clamp(%t642, %t643, %t646) :: float
        %t675 = load_input "statuses" :: array
        %t676 = load_field statuses_el_170["rates"] :: any
        %t677 = load_field t632["rate"] :: float
        %t636 = call core.mul(%t647, %t677) :: float
        %acc630 = acc_add agg.sum(%acc630, %t636) :: float
      end_loop
      %t637 = acc_load %acc630 :: float
      %t678 = load_input "statuses" :: array
      %t681 = call core.add(%t689, %t692) :: float
      %t693 = load_input "statuses" :: array
      %t694 = load_input "income" :: float
      %t695 = load_field statuses_el_170["addl_threshold"] :: float
      %t696 = call core.sub(%t694, %t695) :: float
      %t697 = const 0 :: integer
      %t698 = make_tuple(%t696, %t697) :: tuple<float, integer>
      %t699 = fold %t698 fn="agg.max" :: float
      %t700 = const 0.009 :: float
      %t701 = call core.mul(%t699, %t700) :: float
      %t683 = call core.add(%t681, %t701) :: float
      %t619 = call core.add(%t637, %t683) :: float
      %t620 = call core.add(%t619, %t624) :: float
      %t621 = call core.add(%t620, %t627) :: float
      %t174 = call core.sub(%t172, %t621) :: float
      yield %t174
    end_loop
  )
  (Declaration take_home
    %t714 = load_input "income" :: float
    %t715 = load_input "state_rate" :: float
    %t716 = call core.mul(%t714, %t715) :: float
    %t717 = load_input "income" :: float
    %t718 = load_input "local_rate" :: float
    %t719 = call core.mul(%t717, %t718) :: float
    %t776 = load_input "income" :: float
    %t777 = const 168600.0 :: float
    %t778 = make_tuple(%t776, %t777) :: tuple<float>
    %t779 = fold %t778 fn="agg.min" :: float
    %t780 = const 0.062 :: float
    %t781 = call core.mul(%t779, %t780) :: float
    %t782 = load_input "income" :: float
    %t783 = const 0.0145 :: float
    %t784 = call core.mul(%t782, %t783) :: float
    %t175 = load_input "statuses" :: array
    loop statuses id=L25 in %t175 as el=%statuses_el_176, idx=%statuses_i_177
      %t702 = load_input "statuses" :: array
      %t703 = load_input "income" :: float
      %t706 = load_input "statuses" :: array
      %t740 = load_input "statuses" :: array
      %t741 = load_input "income" :: float
      %t742 = load_field statuses_el_176["std"] :: float
      %t743 = call core.sub(%t741, %t742) :: float
      %t744 = const 0 :: integer
      %t745 = make_tuple(%t743, %t744) :: tuple<float, integer>
      %t746 = fold %t745 fn="agg.max" :: float
      %t720 = load_input "statuses" :: array
      %acc722 = decl_acc :: float
      %t723 = load_field statuses_el_176["rates"] :: any
      loop rates id=L31 in %t723 as el=%t724, idx=%t725
        %t730 = load_input "statuses" :: array
        %t731 = load_field statuses_el_176["rates"] :: any
        %t747 = load_input "statuses" :: array
        %t748 = load_field statuses_el_176["rates"] :: any
        %t749 = load_field t724["lo"] :: float
        %t734 = call core.sub(%t746, %t749) :: float
        %t735 = const 0 :: integer
        %t750 = load_input "statuses" :: array
        %t751 = load_field statuses_el_176["rates"] :: any
        %t758 = load_input "statuses" :: array
        %t759 = load_field statuses_el_176["rates"] :: any
        %t760 = load_field t724["hi"] :: float
        %t753 = const -1 :: integer
        %t754 = call core.eq(%t760, %t753) :: boolean
        %t755 = const 100000000000.0 :: float
        %t761 = load_input "statuses" :: array
        %t762 = load_field statuses_el_176["rates"] :: any
        %t763 = load_field t724["hi"] :: float
        %t757 = select %t754, %t755, %t763 :: float
        %t764 = load_input "statuses" :: array
        %t765 = load_field statuses_el_176["rates"] :: any
        %t766 = load_field t724["lo"] :: float
        %t738 = call core.sub(%t757, %t766) :: float
        %t739 = call core.clamp(%t734, %t735, %t738) :: float
        %t767 = load_input "statuses" :: array
        %t768 = load_field statuses_el_176["rates"] :: any
        %t769 = load_field t724["rate"] :: float
        %t728 = call core.mul(%t739, %t769) :: float
        %acc722 = acc_add agg.sum(%acc722, %t728) :: float
      end_loop
      %t729 = acc_load %acc722 :: float
      %t770 = load_input "statuses" :: array
      %t773 = call core.add(%t781, %t784) :: float
      %t785 = load_input "statuses" :: array
      %t786 = load_input "income" :: float
      %t787 = load_field statuses_el_176["addl_threshold"] :: float
      %t788 = call core.sub(%t786, %t787) :: float
      %t789 = const 0 :: integer
      %t790 = make_tuple(%t788, %t789) :: tuple<float, integer>
      %t791 = fold %t790 fn="agg.max" :: float
      %t792 = const 0.009 :: float
      %t793 = call core.mul(%t791, %t792) :: float
      %t775 = call core.add(%t773, %t793) :: float
      %t711 = call core.add(%t729, %t775) :: float
      %t712 = call core.add(%t711, %t716) :: float
      %t713 = call core.add(%t712, %t719) :: float
      %t705 = call core.sub(%t703, %t713) :: float
      %t179 = load_input "retirement_contrib" :: float
      %t180 = call core.sub(%t705, %t179) :: float
      yield %t180
    end_loop
  )
  (Declaration summary
    %t974 = load_input "income" :: float
    %t975 = const 168600.0 :: float
    %t976 = make_tuple(%t974, %t975) :: tuple<float>
    %t977 = fold %t976 fn="agg.min" :: float
    %t978 = const 0.062 :: float
    %t979 = call core.mul(%t977, %t978) :: float
    %t980 = load_input "income" :: float
    %t981 = const 0.0145 :: float
    %t982 = call core.mul(%t980, %t981) :: float
    %t998 = load_input "income" :: float
    %t999 = const 168600.0 :: float
    %t1000 = make_tuple(%t998, %t999) :: tuple<float>
    %t1001 = fold %t1000 fn="agg.min" :: float
    %t1002 = const 0.062 :: float
    %t1003 = call core.mul(%t1001, %t1002) :: float
    %t1004 = load_input "income" :: float
    %t1005 = const 0.0145 :: float
    %t1006 = call core.mul(%t1004, %t1005) :: float
    %t1031 = load_input "income" :: float
    %t1032 = load_input "state_rate" :: float
    %t1033 = call core.mul(%t1031, %t1032) :: float
    %t1034 = load_input "income" :: float
    %t1035 = load_input "local_rate" :: float
    %t1036 = call core.mul(%t1034, %t1035) :: float
    %t1093 = load_input "income" :: float
    %t1094 = const 168600.0 :: float
    %t1095 = make_tuple(%t1093, %t1094) :: tuple<float>
    %t1096 = fold %t1095 fn="agg.min" :: float
    %t1097 = const 0.062 :: float
    %t1098 = call core.mul(%t1096, %t1097) :: float
    %t1099 = load_input "income" :: float
    %t1100 = const 0.0145 :: float
    %t1101 = call core.mul(%t1099, %t1100) :: float
    %t1119 = load_input "income" :: float
    %t1120 = load_input "state_rate" :: float
    %t1121 = call core.mul(%t1119, %t1120) :: float
    %t1122 = load_input "income" :: float
    %t1123 = load_input "local_rate" :: float
    %t1124 = call core.mul(%t1122, %t1123) :: float
    %t1181 = load_input "income" :: float
    %t1182 = const 168600.0 :: float
    %t1183 = make_tuple(%t1181, %t1182) :: tuple<float>
    %t1184 = fold %t1183 fn="agg.min" :: float
    %t1185 = const 0.062 :: float
    %t1186 = call core.mul(%t1184, %t1185) :: float
    %t1187 = load_input "income" :: float
    %t1188 = const 0.0145 :: float
    %t1189 = call core.mul(%t1187, %t1188) :: float
    %t1211 = load_input "income" :: float
    %t1212 = load_input "state_rate" :: float
    %t1213 = call core.mul(%t1211, %t1212) :: float
    %t1214 = load_input "income" :: float
    %t1215 = load_input "local_rate" :: float
    %t1216 = call core.mul(%t1214, %t1215) :: float
    %t1273 = load_input "income" :: float
    %t1274 = const 168600.0 :: float
    %t1275 = make_tuple(%t1273, %t1274) :: tuple<float>
    %t1276 = fold %t1275 fn="agg.min" :: float
    %t1277 = const 0.062 :: float
    %t1278 = call core.mul(%t1276, %t1277) :: float
    %t1279 = load_input "income" :: float
    %t1280 = const 0.0145 :: float
    %t1281 = call core.mul(%t1279, %t1280) :: float
    %t1307 = load_input "income" :: float
    %t1308 = load_input "state_rate" :: float
    %t1309 = call core.mul(%t1307, %t1308) :: float
    %t1310 = load_input "income" :: float
    %t1311 = load_input "local_rate" :: float
    %t1312 = call core.mul(%t1310, %t1311) :: float
    %t1369 = load_input "income" :: float
    %t1370 = const 168600.0 :: float
    %t1371 = make_tuple(%t1369, %t1370) :: tuple<float>
    %t1372 = fold %t1371 fn="agg.min" :: float
    %t1373 = const 0.062 :: float
    %t1374 = call core.mul(%t1372, %t1373) :: float
    %t1375 = load_input "income" :: float
    %t1376 = const 0.0145 :: float
    %t1377 = call core.mul(%t1375, %t1376) :: float
    %t181 = load_input "statuses" :: array
    %t794 = load_input "income" :: float
    %t795 = load_input "state_rate" :: float
    %t796 = call core.mul(%t794, %t795) :: float
    %t797 = load_input "income" :: float
    %t798 = load_input "local_rate" :: float
    %t799 = call core.mul(%t797, %t798) :: float
    loop statuses id=L26 in %t181 as el=%statuses_el_182, idx=%statuses_i_183
      %t184 = load_field statuses_el_182["name"] :: string
      %t820 = load_input "statuses" :: array
      %t821 = load_input "income" :: float
      %t822 = load_field statuses_el_182["std"] :: float
      %t823 = call core.sub(%t821, %t822) :: float
      %t824 = const 0 :: integer
      %t825 = make_tuple(%t823, %t824) :: tuple<float, integer>
      %t826 = fold %t825 fn="agg.max" :: float
      %t830 = load_input "statuses" :: array
      %t831 = load_input "income" :: float
      %t832 = load_field statuses_el_182["std"] :: float
      %t833 = call core.sub(%t831, %t832) :: float
      %t834 = const 0 :: integer
      %t835 = make_tuple(%t833, %t834) :: tuple<float, integer>
      %t836 = fold %t835 fn="agg.max" :: float
      %t800 = load_input "statuses" :: array
      %acc802 = decl_acc :: float
      %t803 = load_field statuses_el_182["rates"] :: any
      loop rates id=L32 in %t803 as el=%t804, idx=%t805
        %t811 = load_input "statuses" :: array
        %t812 = load_field statuses_el_182["rates"] :: any
        %t827 = load_input "statuses" :: array
        %t828 = load_field statuses_el_182["rates"] :: any
        %t829 = load_field t804["lo"] :: float
        %t815 = call core.gte(%t826, %t829) :: boolean
        %t837 = load_input "statuses" :: array
        %t838 = load_field statuses_el_182["rates"] :: any
        %t845 = load_input "statuses" :: array
        %t846 = load_field statuses_el_182["rates"] :: any
        %t847 = load_field t804["hi"] :: float
        %t840 = const -1 :: integer
        %t841 = call core.eq(%t847, %t840) :: boolean
        %t842 = const 100000000000.0 :: float
        %t848 = load_input "statuses" :: array
        %t849 = load_field statuses_el_182["rates"] :: any
        %t850 = load_field t804["hi"] :: float
        %t844 = select %t841, %t842, %t850 :: float
        %t818 = call core.lt(%t836, %t844) :: boolean
        %t819 = call core.and(%t815, %t818) :: boolean
        %t851 = load_input "statuses" :: array
        %t852 = load_field statuses_el_182["rates"] :: any
        %t853 = load_field t804["rate"] :: float
        %t808 = const 0 :: integer
        %t809 = select %t819, %t853, %t808 :: float
        %acc802 = acc_add agg.sum(%acc802, %t809) :: float
      end_loop
      %t810 = acc_load %acc802 :: float
      %t854 = load_input "statuses" :: array
      %t881 = load_input "statuses" :: array
      %t882 = load_input "income" :: float
      %t883 = load_field statuses_el_182["std"] :: float
      %t884 = call core.sub(%t882, %t883) :: float
      %t885 = const 0 :: integer
      %t886 = make_tuple(%t884, %t885) :: tuple<float, integer>
      %t887 = fold %t886 fn="agg.max" :: float
      %t861 = load_input "statuses" :: array
      %acc863 = decl_acc :: float
      %t864 = load_field statuses_el_182["rates"] :: any
      loop rates id=L33 in %t864 as el=%t865, idx=%t866
        %t871 = load_input "statuses" :: array
        %t872 = load_field statuses_el_182["rates"] :: any
        %t888 = load_input "statuses" :: array
        %t889 = load_field statuses_el_182["rates"] :: any
        %t890 = load_field t865["lo"] :: float
        %t875 = call core.sub(%t887, %t890) :: float
        %t876 = const 0 :: integer
        %t891 = load_input "statuses" :: array
        %t892 = load_field statuses_el_182["rates"] :: any
        %t899 = load_input "statuses" :: array
        %t900 = load_field statuses_el_182["rates"] :: any
        %t901 = load_field t865["hi"] :: float
        %t894 = const -1 :: integer
        %t895 = call core.eq(%t901, %t894) :: boolean
        %t896 = const 100000000000.0 :: float
        %t902 = load_input "statuses" :: array
        %t903 = load_field statuses_el_182["rates"] :: any
        %t904 = load_field t865["hi"] :: float
        %t898 = select %t895, %t896, %t904 :: float
        %t905 = load_input "statuses" :: array
        %t906 = load_field statuses_el_182["rates"] :: any
        %t907 = load_field t865["lo"] :: float
        %t879 = call core.sub(%t898, %t907) :: float
        %t880 = call core.clamp(%t875, %t876, %t879) :: float
        %t908 = load_input "statuses" :: array
        %t909 = load_field statuses_el_182["rates"] :: any
        %t910 = load_field t865["rate"] :: float
        %t869 = call core.mul(%t880, %t910) :: float
        %acc863 = acc_add agg.sum(%acc863, %t869) :: float
      end_loop
      %t870 = acc_load %acc863 :: float
      %t856 = load_input "income" :: float
      %t857 = const 1.0 :: float
      %t858 = make_tuple(%t856, %t857) :: tuple<float>
      %t859 = fold %t858 fn="agg.max" :: float
      %t860 = call core.div(%t870, %t859) :: float
      %t931 = load_input "statuses" :: array
      %t932 = load_input "income" :: float
      %t933 = load_field statuses_el_182["std"] :: float
      %t934 = call core.sub(%t932, %t933) :: float
      %t935 = const 0 :: integer
      %t936 = make_tuple(%t934, %t935) :: tuple<float, integer>
      %t937 = fold %t936 fn="agg.max" :: float
      %t911 = load_input "statuses" :: array
      %acc913 = decl_acc :: float
      %t914 = load_field statuses_el_182["rates"] :: any
      loop rates id=L34 in %t914 as el=%t915, idx=%t916
        %t921 = load_input "statuses" :: array
        %t922 = load_field statuses_el_182["rates"] :: any
        %t938 = load_input "statuses" :: array
        %t939 = load_field statuses_el_182["rates"] :: any
        %t940 = load_field t915["lo"] :: float
        %t925 = call core.sub(%t937, %t940) :: float
        %t926 = const 0 :: integer
        %t941 = load_input "statuses" :: array
        %t942 = load_field statuses_el_182["rates"] :: any
        %t949 = load_input "statuses" :: array
        %t950 = load_field statuses_el_182["rates"] :: any
        %t951 = load_field t915["hi"] :: float
        %t944 = const -1 :: integer
        %t945 = call core.eq(%t951, %t944) :: boolean
        %t946 = const 100000000000.0 :: float
        %t952 = load_input "statuses" :: array
        %t953 = load_field statuses_el_182["rates"] :: any
        %t954 = load_field t915["hi"] :: float
        %t948 = select %t945, %t946, %t954 :: float
        %t955 = load_input "statuses" :: array
        %t956 = load_field statuses_el_182["rates"] :: any
        %t957 = load_field t915["lo"] :: float
        %t929 = call core.sub(%t948, %t957) :: float
        %t930 = call core.clamp(%t925, %t926, %t929) :: float
        %t958 = load_input "statuses" :: array
        %t959 = load_field statuses_el_182["rates"] :: any
        %t960 = load_field t915["rate"] :: float
        %t919 = call core.mul(%t930, %t960) :: float
        %acc913 = acc_add agg.sum(%acc913, %t919) :: float
      end_loop
      %t920 = acc_load %acc913 :: float
      %t188 = make_object{marginal: %t810, effective: %t860, tax: %t920} :: object
      %t961 = load_input "statuses" :: array
      %t968 = load_input "statuses" :: array
      %t971 = call core.add(%t979, %t982) :: float
      %t983 = load_input "statuses" :: array
      %t984 = load_input "income" :: float
      %t985 = load_field statuses_el_182["addl_threshold"] :: float
      %t986 = call core.sub(%t984, %t985) :: float
      %t987 = const 0 :: integer
      %t988 = make_tuple(%t986, %t987) :: tuple<float, integer>
      %t989 = fold %t988 fn="agg.max" :: float
      %t990 = const 0.009 :: float
      %t991 = call core.mul(%t989, %t990) :: float
      %t973 = call core.add(%t971, %t991) :: float
      %t963 = load_input "income" :: float
      %t964 = const 1.0 :: float
      %t965 = make_tuple(%t963, %t964) :: tuple<float>
      %t966 = fold %t965 fn="agg.max" :: float
      %t967 = call core.div(%t973, %t966) :: float
      %t992 = load_input "statuses" :: array
      %t995 = call core.add(%t1003, %t1006) :: float
      %t1007 = load_input "statuses" :: array
      %t1008 = load_input "income" :: float
      %t1009 = load_field statuses_el_182["addl_threshold"] :: float
      %t1010 = call core.sub(%t1008, %t1009) :: float
      %t1011 = const 0 :: integer
      %t1012 = make_tuple(%t1010, %t1011) :: tuple<float, integer>
      %t1013 = fold %t1012 fn="agg.max" :: float
      %t1014 = const 0.009 :: float
      %t1015 = call core.mul(%t1013, %t1014) :: float
      %t997 = call core.add(%t995, %t1015) :: float
      %t191 = make_object{effective: %t967, tax: %t997} :: object
      %t192 = load_input "state_rate" :: float
      %t193 = load_input "state_rate" :: float
      %t195 = make_object{marginal: %t192, effective: %t193, tax: %t796} :: object
      %t196 = load_input "local_rate" :: float
      %t197 = load_input "local_rate" :: float
      %t199 = make_object{marginal: %t196, effective: %t197, tax: %t799} :: object
      %t1016 = load_input "statuses" :: array
      %t1023 = load_input "statuses" :: array
      %t1057 = load_input "statuses" :: array
      %t1058 = load_input "income" :: float
      %t1059 = load_field statuses_el_182["std"] :: float
      %t1060 = call core.sub(%t1058, %t1059) :: float
      %t1061 = const 0 :: integer
      %t1062 = make_tuple(%t1060, %t1061) :: tuple<float, integer>
      %t1063 = fold %t1062 fn="agg.max" :: float
      %t1037 = load_input "statuses" :: array
      %acc1039 = decl_acc :: float
      %t1040 = load_field statuses_el_182["rates"] :: any
      loop rates id=L35 in %t1040 as el=%t1041, idx=%t1042
        %t1047 = load_input "statuses" :: array
        %t1048 = load_field statuses_el_182["rates"] :: any
        %t1064 = load_input "statuses" :: array
        %t1065 = load_field statuses_el_182["rates"] :: any
        %t1066 = load_field t1041["lo"] :: float
        %t1051 = call core.sub(%t1063, %t1066) :: float
        %t1052 = const 0 :: integer
        %t1067 = load_input "statuses" :: array
        %t1068 = load_field statuses_el_182["rates"] :: any
        %t1075 = load_input "statuses" :: array
        %t1076 = load_field statuses_el_182["rates"] :: any
        %t1077 = load_field t1041["hi"] :: float
        %t1070 = const -1 :: integer
        %t1071 = call core.eq(%t1077, %t1070) :: boolean
        %t1072 = const 100000000000.0 :: float
        %t1078 = load_input "statuses" :: array
        %t1079 = load_field statuses_el_182["rates"] :: any
        %t1080 = load_field t1041["hi"] :: float
        %t1074 = select %t1071, %t1072, %t1080 :: float
        %t1081 = load_input "statuses" :: array
        %t1082 = load_field statuses_el_182["rates"] :: any
        %t1083 = load_field t1041["lo"] :: float
        %t1055 = call core.sub(%t1074, %t1083) :: float
        %t1056 = call core.clamp(%t1051, %t1052, %t1055) :: float
        %t1084 = load_input "statuses" :: array
        %t1085 = load_field statuses_el_182["rates"] :: any
        %t1086 = load_field t1041["rate"] :: float
        %t1045 = call core.mul(%t1056, %t1086) :: float
        %acc1039 = acc_add agg.sum(%acc1039, %t1045) :: float
      end_loop
      %t1046 = acc_load %acc1039 :: float
      %t1087 = load_input "statuses" :: array
      %t1090 = call core.add(%t1098, %t1101) :: float
      %t1102 = load_input "statuses" :: array
      %t1103 = load_input "income" :: float
      %t1104 = load_field statuses_el_182["addl_threshold"] :: float
      %t1105 = call core.sub(%t1103, %t1104) :: float
      %t1106 = const 0 :: integer
      %t1107 = make_tuple(%t1105, %t1106) :: tuple<float, integer>
      %t1108 = fold %t1107 fn="agg.max" :: float
      %t1109 = const 0.009 :: float
      %t1110 = call core.mul(%t1108, %t1109) :: float
      %t1092 = call core.add(%t1090, %t1110) :: float
      %t1028 = call core.add(%t1046, %t1092) :: float
      %t1029 = call core.add(%t1028, %t1033) :: float
      %t1030 = call core.add(%t1029, %t1036) :: float
      %t1018 = load_input "income" :: float
      %t1019 = const 1.0 :: float
      %t1020 = make_tuple(%t1018, %t1019) :: tuple<float>
      %t1021 = fold %t1020 fn="agg.max" :: float
      %t1022 = call core.div(%t1030, %t1021) :: float
      %t1111 = load_input "statuses" :: array
      %t1145 = load_input "statuses" :: array
      %t1146 = load_input "income" :: float
      %t1147 = load_field statuses_el_182["std"] :: float
      %t1148 = call core.sub(%t1146, %t1147) :: float
      %t1149 = const 0 :: integer
      %t1150 = make_tuple(%t1148, %t1149) :: tuple<float, integer>
      %t1151 = fold %t1150 fn="agg.max" :: float
      %t1125 = load_input "statuses" :: array
      %acc1127 = decl_acc :: float
      %t1128 = load_field statuses_el_182["rates"] :: any
      loop rates id=L36 in %t1128 as el=%t1129, idx=%t1130
        %t1135 = load_input "statuses" :: array
        %t1136 = load_field statuses_el_182["rates"] :: any
        %t1152 = load_input "statuses" :: array
        %t1153 = load_field statuses_el_182["rates"] :: any
        %t1154 = load_field t1129["lo"] :: float
        %t1139 = call core.sub(%t1151, %t1154) :: float
        %t1140 = const 0 :: integer
        %t1155 = load_input "statuses" :: array
        %t1156 = load_field statuses_el_182["rates"] :: any
        %t1163 = load_input "statuses" :: array
        %t1164 = load_field statuses_el_182["rates"] :: any
        %t1165 = load_field t1129["hi"] :: float
        %t1158 = const -1 :: integer
        %t1159 = call core.eq(%t1165, %t1158) :: boolean
        %t1160 = const 100000000000.0 :: float
        %t1166 = load_input "statuses" :: array
        %t1167 = load_field statuses_el_182["rates"] :: any
        %t1168 = load_field t1129["hi"] :: float
        %t1162 = select %t1159, %t1160, %t1168 :: float
        %t1169 = load_input "statuses" :: array
        %t1170 = load_field statuses_el_182["rates"] :: any
        %t1171 = load_field t1129["lo"] :: float
        %t1143 = call core.sub(%t1162, %t1171) :: float
        %t1144 = call core.clamp(%t1139, %t1140, %t1143) :: float
        %t1172 = load_input "statuses" :: array
        %t1173 = load_field statuses_el_182["rates"] :: any
        %t1174 = load_field t1129["rate"] :: float
        %t1133 = call core.mul(%t1144, %t1174) :: float
        %acc1127 = acc_add agg.sum(%acc1127, %t1133) :: float
      end_loop
      %t1134 = acc_load %acc1127 :: float
      %t1175 = load_input "statuses" :: array
      %t1178 = call core.add(%t1186, %t1189) :: float
      %t1190 = load_input "statuses" :: array
      %t1191 = load_input "income" :: float
      %t1192 = load_field statuses_el_182["addl_threshold"] :: float
      %t1193 = call core.sub(%t1191, %t1192) :: float
      %t1194 = const 0 :: integer
      %t1195 = make_tuple(%t1193, %t1194) :: tuple<float, integer>
      %t1196 = fold %t1195 fn="agg.max" :: float
      %t1197 = const 0.009 :: float
      %t1198 = call core.mul(%t1196, %t1197) :: float
      %t1180 = call core.add(%t1178, %t1198) :: float
      %t1116 = call core.add(%t1134, %t1180) :: float
      %t1117 = call core.add(%t1116, %t1121) :: float
      %t1118 = call core.add(%t1117, %t1124) :: float
      %t202 = make_object{effective: %t1022, tax: %t1118} :: object
      %t1199 = load_input "statuses" :: array
      %t1200 = load_input "income" :: float
      %t1203 = load_input "statuses" :: array
      %t1237 = load_input "statuses" :: array
      %t1238 = load_input "income" :: float
      %t1239 = load_field statuses_el_182["std"] :: float
      %t1240 = call core.sub(%t1238, %t1239) :: float
      %t1241 = const 0 :: integer
      %t1242 = make_tuple(%t1240, %t1241) :: tuple<float, integer>
      %t1243 = fold %t1242 fn="agg.max" :: float
      %t1217 = load_input "statuses" :: array
      %acc1219 = decl_acc :: float
      %t1220 = load_field statuses_el_182["rates"] :: any
      loop rates id=L37 in %t1220 as el=%t1221, idx=%t1222
        %t1227 = load_input "statuses" :: array
        %t1228 = load_field statuses_el_182["rates"] :: any
        %t1244 = load_input "statuses" :: array
        %t1245 = load_field statuses_el_182["rates"] :: any
        %t1246 = load_field t1221["lo"] :: float
        %t1231 = call core.sub(%t1243, %t1246) :: float
        %t1232 = const 0 :: integer
        %t1247 = load_input "statuses" :: array
        %t1248 = load_field statuses_el_182["rates"] :: any
        %t1255 = load_input "statuses" :: array
        %t1256 = load_field statuses_el_182["rates"] :: any
        %t1257 = load_field t1221["hi"] :: float
        %t1250 = const -1 :: integer
        %t1251 = call core.eq(%t1257, %t1250) :: boolean
        %t1252 = const 100000000000.0 :: float
        %t1258 = load_input "statuses" :: array
        %t1259 = load_field statuses_el_182["rates"] :: any
        %t1260 = load_field t1221["hi"] :: float
        %t1254 = select %t1251, %t1252, %t1260 :: float
        %t1261 = load_input "statuses" :: array
        %t1262 = load_field statuses_el_182["rates"] :: any
        %t1263 = load_field t1221["lo"] :: float
        %t1235 = call core.sub(%t1254, %t1263) :: float
        %t1236 = call core.clamp(%t1231, %t1232, %t1235) :: float
        %t1264 = load_input "statuses" :: array
        %t1265 = load_field statuses_el_182["rates"] :: any
        %t1266 = load_field t1221["rate"] :: float
        %t1225 = call core.mul(%t1236, %t1266) :: float
        %acc1219 = acc_add agg.sum(%acc1219, %t1225) :: float
      end_loop
      %t1226 = acc_load %acc1219 :: float
      %t1267 = load_input "statuses" :: array
      %t1270 = call core.add(%t1278, %t1281) :: float
      %t1282 = load_input "statuses" :: array
      %t1283 = load_input "income" :: float
      %t1284 = load_field statuses_el_182["addl_threshold"] :: float
      %t1285 = call core.sub(%t1283, %t1284) :: float
      %t1286 = const 0 :: integer
      %t1287 = make_tuple(%t1285, %t1286) :: tuple<float, integer>
      %t1288 = fold %t1287 fn="agg.max" :: float
      %t1289 = const 0.009 :: float
      %t1290 = call core.mul(%t1288, %t1289) :: float
      %t1272 = call core.add(%t1270, %t1290) :: float
      %t1208 = call core.add(%t1226, %t1272) :: float
      %t1209 = call core.add(%t1208, %t1213) :: float
      %t1210 = call core.add(%t1209, %t1216) :: float
      %t1202 = call core.sub(%t1200, %t1210) :: float
      %t204 = load_input "retirement_contrib" :: float
      %t1291 = load_input "statuses" :: array
      %t1295 = load_input "statuses" :: array
      %t1296 = load_input "income" :: float
      %t1299 = load_input "statuses" :: array
      %t1333 = load_input "statuses" :: array
      %t1334 = load_input "income" :: float
      %t1335 = load_field statuses_el_182["std"] :: float
      %t1336 = call core.sub(%t1334, %t1335) :: float
      %t1337 = const 0 :: integer
      %t1338 = make_tuple(%t1336, %t1337) :: tuple<float, integer>
      %t1339 = fold %t1338 fn="agg.max" :: float
      %t1313 = load_input "statuses" :: array
      %acc1315 = decl_acc :: float
      %t1316 = load_field statuses_el_182["rates"] :: any
      loop rates id=L38 in %t1316 as el=%t1317, idx=%t1318
        %t1323 = load_input "statuses" :: array
        %t1324 = load_field statuses_el_182["rates"] :: any
        %t1340 = load_input "statuses" :: array
        %t1341 = load_field statuses_el_182["rates"] :: any
        %t1342 = load_field t1317["lo"] :: float
        %t1327 = call core.sub(%t1339, %t1342) :: float
        %t1328 = const 0 :: integer
        %t1343 = load_input "statuses" :: array
        %t1344 = load_field statuses_el_182["rates"] :: any
        %t1351 = load_input "statuses" :: array
        %t1352 = load_field statuses_el_182["rates"] :: any
        %t1353 = load_field t1317["hi"] :: float
        %t1346 = const -1 :: integer
        %t1347 = call core.eq(%t1353, %t1346) :: boolean
        %t1348 = const 100000000000.0 :: float
        %t1354 = load_input "statuses" :: array
        %t1355 = load_field statuses_el_182["rates"] :: any
        %t1356 = load_field t1317["hi"] :: float
        %t1350 = select %t1347, %t1348, %t1356 :: float
        %t1357 = load_input "statuses" :: array
        %t1358 = load_field statuses_el_182["rates"] :: any
        %t1359 = load_field t1317["lo"] :: float
        %t1331 = call core.sub(%t1350, %t1359) :: float
        %t1332 = call core.clamp(%t1327, %t1328, %t1331) :: float
        %t1360 = load_input "statuses" :: array
        %t1361 = load_field statuses_el_182["rates"] :: any
        %t1362 = load_field t1317["rate"] :: float
        %t1321 = call core.mul(%t1332, %t1362) :: float
        %acc1315 = acc_add agg.sum(%acc1315, %t1321) :: float
      end_loop
      %t1322 = acc_load %acc1315 :: float
      %t1363 = load_input "statuses" :: array
      %t1366 = call core.add(%t1374, %t1377) :: float
      %t1378 = load_input "statuses" :: array
      %t1379 = load_input "income" :: float
      %t1380 = load_field statuses_el_182["addl_threshold"] :: float
      %t1381 = call core.sub(%t1379, %t1380) :: float
      %t1382 = const 0 :: integer
      %t1383 = make_tuple(%t1381, %t1382) :: tuple<float, integer>
      %t1384 = fold %t1383 fn="agg.max" :: float
      %t1385 = const 0.009 :: float
      %t1386 = call core.mul(%t1384, %t1385) :: float
      %t1368 = call core.add(%t1366, %t1386) :: float
      %t1304 = call core.add(%t1322, %t1368) :: float
      %t1305 = call core.add(%t1304, %t1309) :: float
      %t1306 = call core.add(%t1305, %t1312) :: float
      %t1298 = call core.sub(%t1296, %t1306) :: float
      %t1293 = load_input "retirement_contrib" :: float
      %t1294 = call core.sub(%t1298, %t1293) :: float
      %t206 = make_object{filing_status: %t184, federal: %t188, fica: %t191, state: %t195, local: %t199, total: %t202, after_tax: %t1202, retirement_contrib: %t204, take_home: %t1294} :: object
      yield %t206
    end_loop
  )
)
