(LIR
  (Declaration state_tax
    %t1 = load_input "income" :: float
    %t2 = load_input "state_rate" :: float
    %t3 = call core.mul(%t1, %t2) :: float
    yield %t3
  )
  (Declaration local_tax
    %t4 = load_input "income" :: float
    %t5 = load_input "local_rate" :: float
    %t6 = call core.mul(%t4, %t5) :: float
    yield %t6
  )
  (Declaration taxable_single
    %t7 = load_input "income" :: float
    %t8 = load_input "fed" :: any
    %t9 = load_field t8["single"] :: any
    %t10 = load_field t9["std"] :: float
    %t11 = call core.sub(%t7, %t10) :: float
    %t12 = const 0 :: integer
    %t13 = make_tuple(%t11, %t12) :: tuple<float, integer>
    %t14 = fold %t13 fn="agg.max" :: float
    yield %t14
  )
  (Declaration lo_s
    %t15 = load_input "fed" :: array
    %t16 = load_field t15["single"] :: any
    %t17 = load_field t16["rates"] :: any
    loop rates id=L1 in %t17 as el=%rates_el_18, idx=%rates_i_19
      %t20 = load_field rates_el_18["lo"] :: float
      yield %t20
    end_loop
  )
  (Declaration hi_s
    %t21 = load_input "fed" :: array
    %t22 = load_field t21["single"] :: any
    %t23 = load_field t22["rates"] :: any
    loop rates id=L2 in %t23 as el=%rates_el_24, idx=%rates_i_25
      %t26 = load_field rates_el_24["hi"] :: float
      yield %t26
    end_loop
  )
  (Declaration rate_s
    %t27 = load_input "fed" :: array
    %t28 = load_field t27["single"] :: any
    %t29 = load_field t28["rates"] :: any
    loop rates id=L3 in %t29 as el=%rates_el_30, idx=%rates_i_31
      %t32 = load_field rates_el_30["rate"] :: float
      yield %t32
    end_loop
  )
  (Declaration big_hi
    %t33 = const 100000000000.0 :: float
    yield %t33
  )
  (Declaration hi_s_eff
    %t34 = load_input "fed" :: array
    %t35 = load_field t34["single"] :: any
    %t36 = load_field t35["rates"] :: any
    loop rates id=L4 in %t36 as el=%rates_el_37, idx=%rates_i_38
      %t628 = load_input "fed" :: array
      %t629 = load_field t628["single"] :: any
      %t630 = load_field t629["rates"] :: any
      %t631 = load_field rates_el_37["hi"] :: float
      %t40 = const -1 :: integer
      %t41 = call core.eq(%t631, %t40) :: boolean
      %t42 = const 100000000000.0 :: float
      %t632 = load_input "fed" :: array
      %t633 = load_field t632["single"] :: any
      %t634 = load_field t633["rates"] :: any
      %t635 = load_field rates_el_37["hi"] :: float
      %t44 = select %t41, %t42, %t635 :: float
      yield %t44
    end_loop
  )
  (Declaration amt_s
    %t45 = load_input "fed" :: array
    %t46 = load_field t45["single"] :: any
    %t47 = load_field t46["rates"] :: any
    %t636 = load_input "income" :: float
    %t637 = load_input "fed" :: any
    %t638 = load_field t637["single"] :: any
    %t639 = load_field t638["std"] :: float
    %t640 = call core.sub(%t636, %t639) :: float
    %t641 = const 0 :: integer
    %t642 = make_tuple(%t640, %t641) :: tuple<float, integer>
    %t643 = fold %t642 fn="agg.max" :: float
    loop rates id=L5 in %t47 as el=%rates_el_48, idx=%rates_i_49
      %t644 = load_input "fed" :: array
      %t645 = load_field t644["single"] :: any
      %t646 = load_field t645["rates"] :: any
      %t647 = load_field rates_el_48["lo"] :: float
      %t52 = call core.sub(%t50, %t647) :: float
      %t53 = const 0 :: integer
      %t648 = load_input "fed" :: array
      %t649 = load_field t648["single"] :: any
      %t650 = load_field t649["rates"] :: any
      %t657 = load_input "fed" :: array
      %t658 = load_field t657["single"] :: any
      %t659 = load_field t658["rates"] :: any
      %t660 = load_field rates_el_48["hi"] :: float
      %t652 = const -1 :: integer
      %t653 = call core.eq(%t660, %t652) :: boolean
      %t654 = const 100000000000.0 :: float
      %t661 = load_input "fed" :: array
      %t662 = load_field t661["single"] :: any
      %t663 = load_field t662["rates"] :: any
      %t664 = load_field rates_el_48["hi"] :: float
      %t656 = select %t653, %t654, %t664 :: float
      %t665 = load_input "fed" :: array
      %t666 = load_field t665["single"] :: any
      %t667 = load_field t666["rates"] :: any
      %t668 = load_field rates_el_48["lo"] :: float
      %t56 = call core.sub(%t656, %t668) :: float
      %t57 = call core.clamp(%t52, %t53, %t56) :: float
      yield %t57
    end_loop
  )
  (Declaration fed_tax_single
    %acc_58 = decl_acc :: float
    %t59 = load_input "fed" :: array
    %t60 = load_field t59["single"] :: any
    %t61 = load_field t60["rates"] :: any
    loop rates id=L6 in %t61 as el=%rates_el_62, idx=%rates_i_63
      %t680 = load_input "income" :: float
      %t681 = load_input "fed" :: any
      %t682 = load_field t681["single"] :: any
      %t683 = load_field t682["std"] :: float
      %t684 = call core.sub(%t680, %t683) :: float
      %t685 = const 0 :: integer
      %t686 = make_tuple(%t684, %t685) :: tuple<float, integer>
      %t687 = fold %t686 fn="agg.max" :: float
      %t669 = load_input "fed" :: array
      %t670 = load_field t669["single"] :: any
      %t671 = load_field t670["rates"] :: any
      %t688 = load_input "fed" :: array
      %t689 = load_field t688["single"] :: any
      %t690 = load_field t689["rates"] :: any
      %t691 = load_field rates_el_62["lo"] :: float
      %t674 = call core.sub(%t687, %t691) :: float
      %t675 = const 0 :: integer
      %t692 = load_input "fed" :: array
      %t693 = load_field t692["single"] :: any
      %t694 = load_field t693["rates"] :: any
      %t701 = load_input "fed" :: array
      %t702 = load_field t701["single"] :: any
      %t703 = load_field t702["rates"] :: any
      %t704 = load_field rates_el_62["hi"] :: float
      %t696 = const -1 :: integer
      %t697 = call core.eq(%t704, %t696) :: boolean
      %t698 = const 100000000000.0 :: float
      %t705 = load_input "fed" :: array
      %t706 = load_field t705["single"] :: any
      %t707 = load_field t706["rates"] :: any
      %t708 = load_field rates_el_62["hi"] :: float
      %t700 = select %t697, %t698, %t708 :: float
      %t709 = load_input "fed" :: array
      %t710 = load_field t709["single"] :: any
      %t711 = load_field t710["rates"] :: any
      %t712 = load_field rates_el_62["lo"] :: float
      %t678 = call core.sub(%t700, %t712) :: float
      %t679 = call core.clamp(%t674, %t675, %t678) :: float
      %t713 = load_input "fed" :: array
      %t714 = load_field t713["single"] :: any
      %t715 = load_field t714["rates"] :: any
      %t716 = load_field rates_el_62["rate"] :: float
      %t66 = call core.mul(%t679, %t716) :: float
      %acc_58 = acc_add agg.sum(%acc_58, %t66) :: float
    end_loop
    %t67 = acc_load %acc_58 :: float
    yield %t67
  )
  (Declaration in_br_s
    %t68 = load_input "fed" :: array
    %t69 = load_field t68["single"] :: any
    %t70 = load_field t69["rates"] :: any
    %t717 = load_input "income" :: float
    %t718 = load_input "fed" :: any
    %t719 = load_field t718["single"] :: any
    %t720 = load_field t719["std"] :: float
    %t721 = call core.sub(%t717, %t720) :: float
    %t722 = const 0 :: integer
    %t723 = make_tuple(%t721, %t722) :: tuple<float, integer>
    %t724 = fold %t723 fn="agg.max" :: float
    %t725 = load_input "income" :: float
    %t726 = load_input "fed" :: any
    %t727 = load_field t726["single"] :: any
    %t728 = load_field t727["std"] :: float
    %t729 = call core.sub(%t725, %t728) :: float
    %t730 = const 0 :: integer
    %t731 = make_tuple(%t729, %t730) :: tuple<float, integer>
    %t732 = fold %t731 fn="agg.max" :: float
    loop rates id=L7 in %t70 as el=%rates_el_71, idx=%rates_i_72
      %t733 = load_input "fed" :: array
      %t734 = load_field t733["single"] :: any
      %t735 = load_field t734["rates"] :: any
      %t736 = load_field rates_el_71["lo"] :: float
      %t75 = call core.gte(%t73, %t736) :: boolean
      %t737 = load_input "fed" :: array
      %t738 = load_field t737["single"] :: any
      %t739 = load_field t738["rates"] :: any
      %t746 = load_input "fed" :: array
      %t747 = load_field t746["single"] :: any
      %t748 = load_field t747["rates"] :: any
      %t749 = load_field rates_el_71["hi"] :: float
      %t741 = const -1 :: integer
      %t742 = call core.eq(%t749, %t741) :: boolean
      %t743 = const 100000000000.0 :: float
      %t750 = load_input "fed" :: array
      %t751 = load_field t750["single"] :: any
      %t752 = load_field t751["rates"] :: any
      %t753 = load_field rates_el_71["hi"] :: float
      %t745 = select %t742, %t743, %t753 :: float
      %t78 = call core.lt(%t76, %t745) :: boolean
      %t79 = call core.and(%t75, %t78) :: boolean
      yield %t79
    end_loop
  )
  (Declaration fed_marginal_single
    %acc_80 = decl_acc :: float
    %t81 = load_input "fed" :: array
    %t82 = load_field t81["single"] :: any
    %t83 = load_field t82["rates"] :: any
    loop rates id=L8 in %t83 as el=%rates_el_84, idx=%rates_i_85
      %t764 = load_input "income" :: float
      %t765 = load_input "fed" :: any
      %t766 = load_field t765["single"] :: any
      %t767 = load_field t766["std"] :: float
      %t768 = call core.sub(%t764, %t767) :: float
      %t769 = const 0 :: integer
      %t770 = make_tuple(%t768, %t769) :: tuple<float, integer>
      %t771 = fold %t770 fn="agg.max" :: float
      %t772 = load_input "income" :: float
      %t773 = load_input "fed" :: any
      %t774 = load_field t773["single"] :: any
      %t775 = load_field t774["std"] :: float
      %t776 = call core.sub(%t772, %t775) :: float
      %t777 = const 0 :: integer
      %t778 = make_tuple(%t776, %t777) :: tuple<float, integer>
      %t779 = fold %t778 fn="agg.max" :: float
      %t754 = load_input "fed" :: array
      %t755 = load_field t754["single"] :: any
      %t756 = load_field t755["rates"] :: any
      %t780 = load_input "fed" :: array
      %t781 = load_field t780["single"] :: any
      %t782 = load_field t781["rates"] :: any
      %t783 = load_field rates_el_84["lo"] :: float
      %t760 = call core.gte(%t771, %t783) :: boolean
      %t784 = load_input "fed" :: array
      %t785 = load_field t784["single"] :: any
      %t786 = load_field t785["rates"] :: any
      %t793 = load_input "fed" :: array
      %t794 = load_field t793["single"] :: any
      %t795 = load_field t794["rates"] :: any
      %t796 = load_field rates_el_84["hi"] :: float
      %t788 = const -1 :: integer
      %t789 = call core.eq(%t796, %t788) :: boolean
      %t790 = const 100000000000.0 :: float
      %t797 = load_input "fed" :: array
      %t798 = load_field t797["single"] :: any
      %t799 = load_field t798["rates"] :: any
      %t800 = load_field rates_el_84["hi"] :: float
      %t792 = select %t789, %t790, %t800 :: float
      %t762 = call core.lt(%t779, %t792) :: boolean
      %t763 = call core.and(%t760, %t762) :: boolean
      %t801 = load_input "fed" :: array
      %t802 = load_field t801["single"] :: any
      %t803 = load_field t802["rates"] :: any
      %t804 = load_field rates_el_84["rate"] :: float
      %t88 = const 0 :: integer
      %t89 = select %t763, %t804, %t88 :: float
      %acc_80 = acc_add agg.sum(%acc_80, %t89) :: float
    end_loop
    %t90 = acc_load %acc_80 :: float
    yield %t90
  )
  (Declaration fed_eff_single
    %acc806 = decl_acc :: float
    %t807 = load_input "fed" :: array
    %t808 = load_field t807["single"] :: any
    %t809 = load_field t808["rates"] :: any
    loop rates id=L33 in %t809 as el=%t810, idx=%t811
      %t827 = load_input "income" :: float
      %t828 = load_input "fed" :: any
      %t829 = load_field t828["single"] :: any
      %t830 = load_field t829["std"] :: float
      %t831 = call core.sub(%t827, %t830) :: float
      %t832 = const 0 :: integer
      %t833 = make_tuple(%t831, %t832) :: tuple<float, integer>
      %t834 = fold %t833 fn="agg.max" :: float
      %t816 = load_input "fed" :: array
      %t817 = load_field t816["single"] :: any
      %t818 = load_field t817["rates"] :: any
      %t835 = load_input "fed" :: array
      %t836 = load_field t835["single"] :: any
      %t837 = load_field t836["rates"] :: any
      %t838 = load_field t810["lo"] :: float
      %t821 = call core.sub(%t834, %t838) :: float
      %t822 = const 0 :: integer
      %t839 = load_input "fed" :: array
      %t840 = load_field t839["single"] :: any
      %t841 = load_field t840["rates"] :: any
      %t848 = load_input "fed" :: array
      %t849 = load_field t848["single"] :: any
      %t850 = load_field t849["rates"] :: any
      %t851 = load_field t810["hi"] :: float
      %t843 = const -1 :: integer
      %t844 = call core.eq(%t851, %t843) :: boolean
      %t845 = const 100000000000.0 :: float
      %t852 = load_input "fed" :: array
      %t853 = load_field t852["single"] :: any
      %t854 = load_field t853["rates"] :: any
      %t855 = load_field t810["hi"] :: float
      %t847 = select %t844, %t845, %t855 :: float
      %t856 = load_input "fed" :: array
      %t857 = load_field t856["single"] :: any
      %t858 = load_field t857["rates"] :: any
      %t859 = load_field t810["lo"] :: float
      %t825 = call core.sub(%t847, %t859) :: float
      %t826 = call core.clamp(%t821, %t822, %t825) :: float
      %t860 = load_input "fed" :: array
      %t861 = load_field t860["single"] :: any
      %t862 = load_field t861["rates"] :: any
      %t863 = load_field t810["rate"] :: float
      %t814 = call core.mul(%t826, %t863) :: float
      %acc806 = acc_add agg.sum(%acc806, %t814) :: float
    end_loop
    %t815 = acc_load %acc806 :: float
    %t92 = load_input "income" :: float
    %t93 = const 1.0 :: float
    %t94 = make_tuple(%t92, %t93) :: tuple<float>
    %t95 = fold %t94 fn="agg.max" :: float
    %t96 = call core.div(%t815, %t95) :: float
    yield %t96
  )
  (Declaration ss_wage_base
    %t97 = const 168600.0 :: float
    yield %t97
  )
  (Declaration ss_rate
    %t98 = const 0.062 :: float
    yield %t98
  )
  (Declaration ss_tax_s
    %t99 = load_input "income" :: float
    %t100 = const 168600.0 :: float
    %t101 = make_tuple(%t99, %t100) :: tuple<float>
    %t102 = fold %t101 fn="agg.min" :: float
    %t103 = const 0.062 :: float
    %t104 = call core.mul(%t102, %t103) :: float
    yield %t104
  )
  (Declaration med_base_rate
    %t105 = const 0.0145 :: float
    yield %t105
  )
  (Declaration med_tax_s
    %t106 = load_input "income" :: float
    %t107 = const 0.0145 :: float
    %t108 = call core.mul(%t106, %t107) :: float
    yield %t108
  )
  (Declaration addl_threshold_single
    %t109 = const 200000.0 :: float
    yield %t109
  )
  (Declaration addl_med_rate
    %t110 = const 0.009 :: float
    yield %t110
  )
  (Declaration addl_med_tax_s
    %t111 = load_input "income" :: float
    %t112 = const 200000.0 :: float
    %t113 = call core.sub(%t111, %t112) :: float
    %t114 = const 0 :: integer
    %t115 = make_tuple(%t113, %t114) :: tuple<float, integer>
    %t116 = fold %t115 fn="agg.max" :: float
    %t117 = const 0.009 :: float
    %t118 = call core.mul(%t116, %t117) :: float
    yield %t118
  )
  (Declaration fica_tax_single
    %t864 = load_input "income" :: float
    %t865 = const 168600.0 :: float
    %t866 = make_tuple(%t864, %t865) :: tuple<float>
    %t867 = fold %t866 fn="agg.min" :: float
    %t868 = const 0.062 :: float
    %t869 = call core.mul(%t867, %t868) :: float
    %t870 = load_input "income" :: float
    %t871 = const 0.0145 :: float
    %t872 = call core.mul(%t870, %t871) :: float
    %t121 = call core.add(%t869, %t872) :: float
    %t873 = load_input "income" :: float
    %t874 = const 200000.0 :: float
    %t875 = call core.sub(%t873, %t874) :: float
    %t876 = const 0 :: integer
    %t877 = make_tuple(%t875, %t876) :: tuple<float, integer>
    %t878 = fold %t877 fn="agg.max" :: float
    %t879 = const 0.009 :: float
    %t880 = call core.mul(%t878, %t879) :: float
    %t123 = call core.add(%t121, %t880) :: float
    yield %t123
  )
  (Declaration fica_eff_single
    %t886 = load_input "income" :: float
    %t887 = const 168600.0 :: float
    %t888 = make_tuple(%t886, %t887) :: tuple<float>
    %t889 = fold %t888 fn="agg.min" :: float
    %t890 = const 0.062 :: float
    %t891 = call core.mul(%t889, %t890) :: float
    %t892 = load_input "income" :: float
    %t893 = const 0.0145 :: float
    %t894 = call core.mul(%t892, %t893) :: float
    %t883 = call core.add(%t891, %t894) :: float
    %t895 = load_input "income" :: float
    %t896 = const 200000.0 :: float
    %t897 = call core.sub(%t895, %t896) :: float
    %t898 = const 0 :: integer
    %t899 = make_tuple(%t897, %t898) :: tuple<float, integer>
    %t900 = fold %t899 fn="agg.max" :: float
    %t901 = const 0.009 :: float
    %t902 = call core.mul(%t900, %t901) :: float
    %t885 = call core.add(%t883, %t902) :: float
    %t125 = load_input "income" :: float
    %t126 = const 1.0 :: float
    %t127 = make_tuple(%t125, %t126) :: tuple<float>
    %t128 = fold %t127 fn="agg.max" :: float
    %t129 = call core.div(%t885, %t128) :: float
    yield %t129
  )
  (Declaration total_tax_single
    %acc904 = decl_acc :: float
    %t905 = load_input "fed" :: array
    %t906 = load_field t905["single"] :: any
    %t907 = load_field t906["rates"] :: any
    loop rates id=L34 in %t907 as el=%t908, idx=%t909
      %t925 = load_input "income" :: float
      %t926 = load_input "fed" :: any
      %t927 = load_field t926["single"] :: any
      %t928 = load_field t927["std"] :: float
      %t929 = call core.sub(%t925, %t928) :: float
      %t930 = const 0 :: integer
      %t931 = make_tuple(%t929, %t930) :: tuple<float, integer>
      %t932 = fold %t931 fn="agg.max" :: float
      %t914 = load_input "fed" :: array
      %t915 = load_field t914["single"] :: any
      %t916 = load_field t915["rates"] :: any
      %t933 = load_input "fed" :: array
      %t934 = load_field t933["single"] :: any
      %t935 = load_field t934["rates"] :: any
      %t936 = load_field t908["lo"] :: float
      %t919 = call core.sub(%t932, %t936) :: float
      %t920 = const 0 :: integer
      %t937 = load_input "fed" :: array
      %t938 = load_field t937["single"] :: any
      %t939 = load_field t938["rates"] :: any
      %t946 = load_input "fed" :: array
      %t947 = load_field t946["single"] :: any
      %t948 = load_field t947["rates"] :: any
      %t949 = load_field t908["hi"] :: float
      %t941 = const -1 :: integer
      %t942 = call core.eq(%t949, %t941) :: boolean
      %t943 = const 100000000000.0 :: float
      %t950 = load_input "fed" :: array
      %t951 = load_field t950["single"] :: any
      %t952 = load_field t951["rates"] :: any
      %t953 = load_field t908["hi"] :: float
      %t945 = select %t942, %t943, %t953 :: float
      %t954 = load_input "fed" :: array
      %t955 = load_field t954["single"] :: any
      %t956 = load_field t955["rates"] :: any
      %t957 = load_field t908["lo"] :: float
      %t923 = call core.sub(%t945, %t957) :: float
      %t924 = call core.clamp(%t919, %t920, %t923) :: float
      %t958 = load_input "fed" :: array
      %t959 = load_field t958["single"] :: any
      %t960 = load_field t959["rates"] :: any
      %t961 = load_field t908["rate"] :: float
      %t912 = call core.mul(%t924, %t961) :: float
      %acc904 = acc_add agg.sum(%acc904, %t912) :: float
    end_loop
    %t913 = acc_load %acc904 :: float
    %t967 = load_input "income" :: float
    %t968 = const 168600.0 :: float
    %t969 = make_tuple(%t967, %t968) :: tuple<float>
    %t970 = fold %t969 fn="agg.min" :: float
    %t971 = const 0.062 :: float
    %t972 = call core.mul(%t970, %t971) :: float
    %t973 = load_input "income" :: float
    %t974 = const 0.0145 :: float
    %t975 = call core.mul(%t973, %t974) :: float
    %t964 = call core.add(%t972, %t975) :: float
    %t976 = load_input "income" :: float
    %t977 = const 200000.0 :: float
    %t978 = call core.sub(%t976, %t977) :: float
    %t979 = const 0 :: integer
    %t980 = make_tuple(%t978, %t979) :: tuple<float, integer>
    %t981 = fold %t980 fn="agg.max" :: float
    %t982 = const 0.009 :: float
    %t983 = call core.mul(%t981, %t982) :: float
    %t966 = call core.add(%t964, %t983) :: float
    %t132 = call core.add(%t913, %t966) :: float
    %t984 = load_input "income" :: float
    %t985 = load_input "state_rate" :: float
    %t986 = call core.mul(%t984, %t985) :: float
    %t134 = call core.add(%t132, %t986) :: float
    %t987 = load_input "income" :: float
    %t988 = load_input "local_rate" :: float
    %t989 = call core.mul(%t987, %t988) :: float
    %t136 = call core.add(%t134, %t989) :: float
    yield %t136
  )
  (Declaration total_eff_single
    %acc998 = decl_acc :: float
    %t999 = load_input "fed" :: array
    %t1000 = load_field t999["single"] :: any
    %t1001 = load_field t1000["rates"] :: any
    loop rates id=L35 in %t1001 as el=%t1002, idx=%t1003
      %t1019 = load_input "income" :: float
      %t1020 = load_input "fed" :: any
      %t1021 = load_field t1020["single"] :: any
      %t1022 = load_field t1021["std"] :: float
      %t1023 = call core.sub(%t1019, %t1022) :: float
      %t1024 = const 0 :: integer
      %t1025 = make_tuple(%t1023, %t1024) :: tuple<float, integer>
      %t1026 = fold %t1025 fn="agg.max" :: float
      %t1008 = load_input "fed" :: array
      %t1009 = load_field t1008["single"] :: any
      %t1010 = load_field t1009["rates"] :: any
      %t1027 = load_input "fed" :: array
      %t1028 = load_field t1027["single"] :: any
      %t1029 = load_field t1028["rates"] :: any
      %t1030 = load_field t1002["lo"] :: float
      %t1013 = call core.sub(%t1026, %t1030) :: float
      %t1014 = const 0 :: integer
      %t1031 = load_input "fed" :: array
      %t1032 = load_field t1031["single"] :: any
      %t1033 = load_field t1032["rates"] :: any
      %t1040 = load_input "fed" :: array
      %t1041 = load_field t1040["single"] :: any
      %t1042 = load_field t1041["rates"] :: any
      %t1043 = load_field t1002["hi"] :: float
      %t1035 = const -1 :: integer
      %t1036 = call core.eq(%t1043, %t1035) :: boolean
      %t1037 = const 100000000000.0 :: float
      %t1044 = load_input "fed" :: array
      %t1045 = load_field t1044["single"] :: any
      %t1046 = load_field t1045["rates"] :: any
      %t1047 = load_field t1002["hi"] :: float
      %t1039 = select %t1036, %t1037, %t1047 :: float
      %t1048 = load_input "fed" :: array
      %t1049 = load_field t1048["single"] :: any
      %t1050 = load_field t1049["rates"] :: any
      %t1051 = load_field t1002["lo"] :: float
      %t1017 = call core.sub(%t1039, %t1051) :: float
      %t1018 = call core.clamp(%t1013, %t1014, %t1017) :: float
      %t1052 = load_input "fed" :: array
      %t1053 = load_field t1052["single"] :: any
      %t1054 = load_field t1053["rates"] :: any
      %t1055 = load_field t1002["rate"] :: float
      %t1006 = call core.mul(%t1018, %t1055) :: float
      %acc998 = acc_add agg.sum(%acc998, %t1006) :: float
    end_loop
    %t1007 = acc_load %acc998 :: float
    %t1061 = load_input "income" :: float
    %t1062 = const 168600.0 :: float
    %t1063 = make_tuple(%t1061, %t1062) :: tuple<float>
    %t1064 = fold %t1063 fn="agg.min" :: float
    %t1065 = const 0.062 :: float
    %t1066 = call core.mul(%t1064, %t1065) :: float
    %t1067 = load_input "income" :: float
    %t1068 = const 0.0145 :: float
    %t1069 = call core.mul(%t1067, %t1068) :: float
    %t1058 = call core.add(%t1066, %t1069) :: float
    %t1070 = load_input "income" :: float
    %t1071 = const 200000.0 :: float
    %t1072 = call core.sub(%t1070, %t1071) :: float
    %t1073 = const 0 :: integer
    %t1074 = make_tuple(%t1072, %t1073) :: tuple<float, integer>
    %t1075 = fold %t1074 fn="agg.max" :: float
    %t1076 = const 0.009 :: float
    %t1077 = call core.mul(%t1075, %t1076) :: float
    %t1060 = call core.add(%t1058, %t1077) :: float
    %t992 = call core.add(%t1007, %t1060) :: float
    %t1078 = load_input "income" :: float
    %t1079 = load_input "state_rate" :: float
    %t1080 = call core.mul(%t1078, %t1079) :: float
    %t994 = call core.add(%t992, %t1080) :: float
    %t1081 = load_input "income" :: float
    %t1082 = load_input "local_rate" :: float
    %t1083 = call core.mul(%t1081, %t1082) :: float
    %t996 = call core.add(%t994, %t1083) :: float
    %t138 = load_input "income" :: float
    %t139 = const 1.0 :: float
    %t140 = make_tuple(%t138, %t139) :: tuple<float>
    %t141 = fold %t140 fn="agg.max" :: float
    %t142 = call core.div(%t996, %t141) :: float
    yield %t142
  )
  (Declaration after_tax_single
    %t143 = load_input "income" :: float
    %acc1092 = decl_acc :: float
    %t1093 = load_input "fed" :: array
    %t1094 = load_field t1093["single"] :: any
    %t1095 = load_field t1094["rates"] :: any
    loop rates id=L36 in %t1095 as el=%t1096, idx=%t1097
      %t1113 = load_input "income" :: float
      %t1114 = load_input "fed" :: any
      %t1115 = load_field t1114["single"] :: any
      %t1116 = load_field t1115["std"] :: float
      %t1117 = call core.sub(%t1113, %t1116) :: float
      %t1118 = const 0 :: integer
      %t1119 = make_tuple(%t1117, %t1118) :: tuple<float, integer>
      %t1120 = fold %t1119 fn="agg.max" :: float
      %t1102 = load_input "fed" :: array
      %t1103 = load_field t1102["single"] :: any
      %t1104 = load_field t1103["rates"] :: any
      %t1121 = load_input "fed" :: array
      %t1122 = load_field t1121["single"] :: any
      %t1123 = load_field t1122["rates"] :: any
      %t1124 = load_field t1096["lo"] :: float
      %t1107 = call core.sub(%t1120, %t1124) :: float
      %t1108 = const 0 :: integer
      %t1125 = load_input "fed" :: array
      %t1126 = load_field t1125["single"] :: any
      %t1127 = load_field t1126["rates"] :: any
      %t1134 = load_input "fed" :: array
      %t1135 = load_field t1134["single"] :: any
      %t1136 = load_field t1135["rates"] :: any
      %t1137 = load_field t1096["hi"] :: float
      %t1129 = const -1 :: integer
      %t1130 = call core.eq(%t1137, %t1129) :: boolean
      %t1131 = const 100000000000.0 :: float
      %t1138 = load_input "fed" :: array
      %t1139 = load_field t1138["single"] :: any
      %t1140 = load_field t1139["rates"] :: any
      %t1141 = load_field t1096["hi"] :: float
      %t1133 = select %t1130, %t1131, %t1141 :: float
      %t1142 = load_input "fed" :: array
      %t1143 = load_field t1142["single"] :: any
      %t1144 = load_field t1143["rates"] :: any
      %t1145 = load_field t1096["lo"] :: float
      %t1111 = call core.sub(%t1133, %t1145) :: float
      %t1112 = call core.clamp(%t1107, %t1108, %t1111) :: float
      %t1146 = load_input "fed" :: array
      %t1147 = load_field t1146["single"] :: any
      %t1148 = load_field t1147["rates"] :: any
      %t1149 = load_field t1096["rate"] :: float
      %t1100 = call core.mul(%t1112, %t1149) :: float
      %acc1092 = acc_add agg.sum(%acc1092, %t1100) :: float
    end_loop
    %t1101 = acc_load %acc1092 :: float
    %t1155 = load_input "income" :: float
    %t1156 = const 168600.0 :: float
    %t1157 = make_tuple(%t1155, %t1156) :: tuple<float>
    %t1158 = fold %t1157 fn="agg.min" :: float
    %t1159 = const 0.062 :: float
    %t1160 = call core.mul(%t1158, %t1159) :: float
    %t1161 = load_input "income" :: float
    %t1162 = const 0.0145 :: float
    %t1163 = call core.mul(%t1161, %t1162) :: float
    %t1152 = call core.add(%t1160, %t1163) :: float
    %t1164 = load_input "income" :: float
    %t1165 = const 200000.0 :: float
    %t1166 = call core.sub(%t1164, %t1165) :: float
    %t1167 = const 0 :: integer
    %t1168 = make_tuple(%t1166, %t1167) :: tuple<float, integer>
    %t1169 = fold %t1168 fn="agg.max" :: float
    %t1170 = const 0.009 :: float
    %t1171 = call core.mul(%t1169, %t1170) :: float
    %t1154 = call core.add(%t1152, %t1171) :: float
    %t1086 = call core.add(%t1101, %t1154) :: float
    %t1172 = load_input "income" :: float
    %t1173 = load_input "state_rate" :: float
    %t1174 = call core.mul(%t1172, %t1173) :: float
    %t1088 = call core.add(%t1086, %t1174) :: float
    %t1175 = load_input "income" :: float
    %t1176 = load_input "local_rate" :: float
    %t1177 = call core.mul(%t1175, %t1176) :: float
    %t1090 = call core.add(%t1088, %t1177) :: float
    %t145 = call core.sub(%t143, %t1090) :: float
    yield %t145
  )
  (Declaration take_home_single
    %t1178 = load_input "income" :: float
    %acc1189 = decl_acc :: float
    %t1190 = load_input "fed" :: array
    %t1191 = load_field t1190["single"] :: any
    %t1192 = load_field t1191["rates"] :: any
    loop rates id=L37 in %t1192 as el=%t1193, idx=%t1194
      %t1210 = load_input "income" :: float
      %t1211 = load_input "fed" :: any
      %t1212 = load_field t1211["single"] :: any
      %t1213 = load_field t1212["std"] :: float
      %t1214 = call core.sub(%t1210, %t1213) :: float
      %t1215 = const 0 :: integer
      %t1216 = make_tuple(%t1214, %t1215) :: tuple<float, integer>
      %t1217 = fold %t1216 fn="agg.max" :: float
      %t1199 = load_input "fed" :: array
      %t1200 = load_field t1199["single"] :: any
      %t1201 = load_field t1200["rates"] :: any
      %t1218 = load_input "fed" :: array
      %t1219 = load_field t1218["single"] :: any
      %t1220 = load_field t1219["rates"] :: any
      %t1221 = load_field t1193["lo"] :: float
      %t1204 = call core.sub(%t1217, %t1221) :: float
      %t1205 = const 0 :: integer
      %t1222 = load_input "fed" :: array
      %t1223 = load_field t1222["single"] :: any
      %t1224 = load_field t1223["rates"] :: any
      %t1231 = load_input "fed" :: array
      %t1232 = load_field t1231["single"] :: any
      %t1233 = load_field t1232["rates"] :: any
      %t1234 = load_field t1193["hi"] :: float
      %t1226 = const -1 :: integer
      %t1227 = call core.eq(%t1234, %t1226) :: boolean
      %t1228 = const 100000000000.0 :: float
      %t1235 = load_input "fed" :: array
      %t1236 = load_field t1235["single"] :: any
      %t1237 = load_field t1236["rates"] :: any
      %t1238 = load_field t1193["hi"] :: float
      %t1230 = select %t1227, %t1228, %t1238 :: float
      %t1239 = load_input "fed" :: array
      %t1240 = load_field t1239["single"] :: any
      %t1241 = load_field t1240["rates"] :: any
      %t1242 = load_field t1193["lo"] :: float
      %t1208 = call core.sub(%t1230, %t1242) :: float
      %t1209 = call core.clamp(%t1204, %t1205, %t1208) :: float
      %t1243 = load_input "fed" :: array
      %t1244 = load_field t1243["single"] :: any
      %t1245 = load_field t1244["rates"] :: any
      %t1246 = load_field t1193["rate"] :: float
      %t1197 = call core.mul(%t1209, %t1246) :: float
      %acc1189 = acc_add agg.sum(%acc1189, %t1197) :: float
    end_loop
    %t1198 = acc_load %acc1189 :: float
    %t1252 = load_input "income" :: float
    %t1253 = const 168600.0 :: float
    %t1254 = make_tuple(%t1252, %t1253) :: tuple<float>
    %t1255 = fold %t1254 fn="agg.min" :: float
    %t1256 = const 0.062 :: float
    %t1257 = call core.mul(%t1255, %t1256) :: float
    %t1258 = load_input "income" :: float
    %t1259 = const 0.0145 :: float
    %t1260 = call core.mul(%t1258, %t1259) :: float
    %t1249 = call core.add(%t1257, %t1260) :: float
    %t1261 = load_input "income" :: float
    %t1262 = const 200000.0 :: float
    %t1263 = call core.sub(%t1261, %t1262) :: float
    %t1264 = const 0 :: integer
    %t1265 = make_tuple(%t1263, %t1264) :: tuple<float, integer>
    %t1266 = fold %t1265 fn="agg.max" :: float
    %t1267 = const 0.009 :: float
    %t1268 = call core.mul(%t1266, %t1267) :: float
    %t1251 = call core.add(%t1249, %t1268) :: float
    %t1183 = call core.add(%t1198, %t1251) :: float
    %t1269 = load_input "income" :: float
    %t1270 = load_input "state_rate" :: float
    %t1271 = call core.mul(%t1269, %t1270) :: float
    %t1185 = call core.add(%t1183, %t1271) :: float
    %t1272 = load_input "income" :: float
    %t1273 = load_input "local_rate" :: float
    %t1274 = call core.mul(%t1272, %t1273) :: float
    %t1187 = call core.add(%t1185, %t1274) :: float
    %t1180 = call core.sub(%t1178, %t1187) :: float
    %t147 = load_input "retirement_contrib" :: float
    %t148 = call core.sub(%t1180, %t147) :: float
    yield %t148
  )
  (Declaration taxable_mj
    %t149 = load_input "income" :: float
    %t150 = load_input "fed" :: any
    %t151 = load_field t150["married_joint"] :: any
    %t152 = load_field t151["std"] :: float
    %t153 = call core.sub(%t149, %t152) :: float
    %t154 = const 0 :: integer
    %t155 = make_tuple(%t153, %t154) :: tuple<float, integer>
    %t156 = fold %t155 fn="agg.max" :: float
    yield %t156
  )
  (Declaration lo_mj
    %t157 = load_input "fed" :: array
    %t158 = load_field t157["married_joint"] :: any
    %t159 = load_field t158["rates"] :: any
    loop rates id=L9 in %t159 as el=%rates_el_160, idx=%rates_i_161
      %t162 = load_field rates_el_160["lo"] :: float
      yield %t162
    end_loop
  )
  (Declaration hi_mj
    %t163 = load_input "fed" :: array
    %t164 = load_field t163["married_joint"] :: any
    %t165 = load_field t164["rates"] :: any
    loop rates id=L10 in %t165 as el=%rates_el_166, idx=%rates_i_167
      %t168 = load_field rates_el_166["hi"] :: float
      yield %t168
    end_loop
  )
  (Declaration rate_mj
    %t169 = load_input "fed" :: array
    %t170 = load_field t169["married_joint"] :: any
    %t171 = load_field t170["rates"] :: any
    loop rates id=L11 in %t171 as el=%rates_el_172, idx=%rates_i_173
      %t174 = load_field rates_el_172["rate"] :: float
      yield %t174
    end_loop
  )
  (Declaration hi_mj_eff
    %t175 = load_input "fed" :: array
    %t176 = load_field t175["married_joint"] :: any
    %t177 = load_field t176["rates"] :: any
    loop rates id=L12 in %t177 as el=%rates_el_178, idx=%rates_i_179
      %t1275 = load_input "fed" :: array
      %t1276 = load_field t1275["married_joint"] :: any
      %t1277 = load_field t1276["rates"] :: any
      %t1278 = load_field rates_el_178["hi"] :: float
      %t181 = const -1 :: integer
      %t182 = call core.eq(%t1278, %t181) :: boolean
      %t183 = const 100000000000.0 :: float
      %t1279 = load_input "fed" :: array
      %t1280 = load_field t1279["married_joint"] :: any
      %t1281 = load_field t1280["rates"] :: any
      %t1282 = load_field rates_el_178["hi"] :: float
      %t185 = select %t182, %t183, %t1282 :: float
      yield %t185
    end_loop
  )
  (Declaration amt_mj
    %t186 = load_input "fed" :: array
    %t187 = load_field t186["married_joint"] :: any
    %t188 = load_field t187["rates"] :: any
    %t1283 = load_input "income" :: float
    %t1284 = load_input "fed" :: any
    %t1285 = load_field t1284["married_joint"] :: any
    %t1286 = load_field t1285["std"] :: float
    %t1287 = call core.sub(%t1283, %t1286) :: float
    %t1288 = const 0 :: integer
    %t1289 = make_tuple(%t1287, %t1288) :: tuple<float, integer>
    %t1290 = fold %t1289 fn="agg.max" :: float
    loop rates id=L13 in %t188 as el=%rates_el_189, idx=%rates_i_190
      %t1291 = load_input "fed" :: array
      %t1292 = load_field t1291["married_joint"] :: any
      %t1293 = load_field t1292["rates"] :: any
      %t1294 = load_field rates_el_189["lo"] :: float
      %t193 = call core.sub(%t191, %t1294) :: float
      %t194 = const 0 :: integer
      %t1295 = load_input "fed" :: array
      %t1296 = load_field t1295["married_joint"] :: any
      %t1297 = load_field t1296["rates"] :: any
      %t1304 = load_input "fed" :: array
      %t1305 = load_field t1304["married_joint"] :: any
      %t1306 = load_field t1305["rates"] :: any
      %t1307 = load_field rates_el_189["hi"] :: float
      %t1299 = const -1 :: integer
      %t1300 = call core.eq(%t1307, %t1299) :: boolean
      %t1301 = const 100000000000.0 :: float
      %t1308 = load_input "fed" :: array
      %t1309 = load_field t1308["married_joint"] :: any
      %t1310 = load_field t1309["rates"] :: any
      %t1311 = load_field rates_el_189["hi"] :: float
      %t1303 = select %t1300, %t1301, %t1311 :: float
      %t1312 = load_input "fed" :: array
      %t1313 = load_field t1312["married_joint"] :: any
      %t1314 = load_field t1313["rates"] :: any
      %t1315 = load_field rates_el_189["lo"] :: float
      %t197 = call core.sub(%t1303, %t1315) :: float
      %t198 = call core.clamp(%t193, %t194, %t197) :: float
      yield %t198
    end_loop
  )
  (Declaration fed_tax_mj
    %acc_199 = decl_acc :: float
    %t200 = load_input "fed" :: array
    %t201 = load_field t200["married_joint"] :: any
    %t202 = load_field t201["rates"] :: any
    loop rates id=L14 in %t202 as el=%rates_el_203, idx=%rates_i_204
      %t1327 = load_input "income" :: float
      %t1328 = load_input "fed" :: any
      %t1329 = load_field t1328["married_joint"] :: any
      %t1330 = load_field t1329["std"] :: float
      %t1331 = call core.sub(%t1327, %t1330) :: float
      %t1332 = const 0 :: integer
      %t1333 = make_tuple(%t1331, %t1332) :: tuple<float, integer>
      %t1334 = fold %t1333 fn="agg.max" :: float
      %t1316 = load_input "fed" :: array
      %t1317 = load_field t1316["married_joint"] :: any
      %t1318 = load_field t1317["rates"] :: any
      %t1335 = load_input "fed" :: array
      %t1336 = load_field t1335["married_joint"] :: any
      %t1337 = load_field t1336["rates"] :: any
      %t1338 = load_field rates_el_203["lo"] :: float
      %t1321 = call core.sub(%t1334, %t1338) :: float
      %t1322 = const 0 :: integer
      %t1339 = load_input "fed" :: array
      %t1340 = load_field t1339["married_joint"] :: any
      %t1341 = load_field t1340["rates"] :: any
      %t1348 = load_input "fed" :: array
      %t1349 = load_field t1348["married_joint"] :: any
      %t1350 = load_field t1349["rates"] :: any
      %t1351 = load_field rates_el_203["hi"] :: float
      %t1343 = const -1 :: integer
      %t1344 = call core.eq(%t1351, %t1343) :: boolean
      %t1345 = const 100000000000.0 :: float
      %t1352 = load_input "fed" :: array
      %t1353 = load_field t1352["married_joint"] :: any
      %t1354 = load_field t1353["rates"] :: any
      %t1355 = load_field rates_el_203["hi"] :: float
      %t1347 = select %t1344, %t1345, %t1355 :: float
      %t1356 = load_input "fed" :: array
      %t1357 = load_field t1356["married_joint"] :: any
      %t1358 = load_field t1357["rates"] :: any
      %t1359 = load_field rates_el_203["lo"] :: float
      %t1325 = call core.sub(%t1347, %t1359) :: float
      %t1326 = call core.clamp(%t1321, %t1322, %t1325) :: float
      %t1360 = load_input "fed" :: array
      %t1361 = load_field t1360["married_joint"] :: any
      %t1362 = load_field t1361["rates"] :: any
      %t1363 = load_field rates_el_203["rate"] :: float
      %t207 = call core.mul(%t1326, %t1363) :: float
      %acc_199 = acc_add agg.sum(%acc_199, %t207) :: float
    end_loop
    %t208 = acc_load %acc_199 :: float
    yield %t208
  )
  (Declaration in_br_mj
    %t209 = load_input "fed" :: array
    %t210 = load_field t209["married_joint"] :: any
    %t211 = load_field t210["rates"] :: any
    %t1364 = load_input "income" :: float
    %t1365 = load_input "fed" :: any
    %t1366 = load_field t1365["married_joint"] :: any
    %t1367 = load_field t1366["std"] :: float
    %t1368 = call core.sub(%t1364, %t1367) :: float
    %t1369 = const 0 :: integer
    %t1370 = make_tuple(%t1368, %t1369) :: tuple<float, integer>
    %t1371 = fold %t1370 fn="agg.max" :: float
    %t1372 = load_input "income" :: float
    %t1373 = load_input "fed" :: any
    %t1374 = load_field t1373["married_joint"] :: any
    %t1375 = load_field t1374["std"] :: float
    %t1376 = call core.sub(%t1372, %t1375) :: float
    %t1377 = const 0 :: integer
    %t1378 = make_tuple(%t1376, %t1377) :: tuple<float, integer>
    %t1379 = fold %t1378 fn="agg.max" :: float
    loop rates id=L15 in %t211 as el=%rates_el_212, idx=%rates_i_213
      %t1380 = load_input "fed" :: array
      %t1381 = load_field t1380["married_joint"] :: any
      %t1382 = load_field t1381["rates"] :: any
      %t1383 = load_field rates_el_212["lo"] :: float
      %t216 = call core.gte(%t214, %t1383) :: boolean
      %t1384 = load_input "fed" :: array
      %t1385 = load_field t1384["married_joint"] :: any
      %t1386 = load_field t1385["rates"] :: any
      %t1393 = load_input "fed" :: array
      %t1394 = load_field t1393["married_joint"] :: any
      %t1395 = load_field t1394["rates"] :: any
      %t1396 = load_field rates_el_212["hi"] :: float
      %t1388 = const -1 :: integer
      %t1389 = call core.eq(%t1396, %t1388) :: boolean
      %t1390 = const 100000000000.0 :: float
      %t1397 = load_input "fed" :: array
      %t1398 = load_field t1397["married_joint"] :: any
      %t1399 = load_field t1398["rates"] :: any
      %t1400 = load_field rates_el_212["hi"] :: float
      %t1392 = select %t1389, %t1390, %t1400 :: float
      %t219 = call core.lt(%t217, %t1392) :: boolean
      %t220 = call core.and(%t216, %t219) :: boolean
      yield %t220
    end_loop
  )
  (Declaration fed_marginal_mj
    %acc_221 = decl_acc :: float
    %t222 = load_input "fed" :: array
    %t223 = load_field t222["married_joint"] :: any
    %t224 = load_field t223["rates"] :: any
    loop rates id=L16 in %t224 as el=%rates_el_225, idx=%rates_i_226
      %t1411 = load_input "income" :: float
      %t1412 = load_input "fed" :: any
      %t1413 = load_field t1412["married_joint"] :: any
      %t1414 = load_field t1413["std"] :: float
      %t1415 = call core.sub(%t1411, %t1414) :: float
      %t1416 = const 0 :: integer
      %t1417 = make_tuple(%t1415, %t1416) :: tuple<float, integer>
      %t1418 = fold %t1417 fn="agg.max" :: float
      %t1419 = load_input "income" :: float
      %t1420 = load_input "fed" :: any
      %t1421 = load_field t1420["married_joint"] :: any
      %t1422 = load_field t1421["std"] :: float
      %t1423 = call core.sub(%t1419, %t1422) :: float
      %t1424 = const 0 :: integer
      %t1425 = make_tuple(%t1423, %t1424) :: tuple<float, integer>
      %t1426 = fold %t1425 fn="agg.max" :: float
      %t1401 = load_input "fed" :: array
      %t1402 = load_field t1401["married_joint"] :: any
      %t1403 = load_field t1402["rates"] :: any
      %t1427 = load_input "fed" :: array
      %t1428 = load_field t1427["married_joint"] :: any
      %t1429 = load_field t1428["rates"] :: any
      %t1430 = load_field rates_el_225["lo"] :: float
      %t1407 = call core.gte(%t1418, %t1430) :: boolean
      %t1431 = load_input "fed" :: array
      %t1432 = load_field t1431["married_joint"] :: any
      %t1433 = load_field t1432["rates"] :: any
      %t1440 = load_input "fed" :: array
      %t1441 = load_field t1440["married_joint"] :: any
      %t1442 = load_field t1441["rates"] :: any
      %t1443 = load_field rates_el_225["hi"] :: float
      %t1435 = const -1 :: integer
      %t1436 = call core.eq(%t1443, %t1435) :: boolean
      %t1437 = const 100000000000.0 :: float
      %t1444 = load_input "fed" :: array
      %t1445 = load_field t1444["married_joint"] :: any
      %t1446 = load_field t1445["rates"] :: any
      %t1447 = load_field rates_el_225["hi"] :: float
      %t1439 = select %t1436, %t1437, %t1447 :: float
      %t1409 = call core.lt(%t1426, %t1439) :: boolean
      %t1410 = call core.and(%t1407, %t1409) :: boolean
      %t1448 = load_input "fed" :: array
      %t1449 = load_field t1448["married_joint"] :: any
      %t1450 = load_field t1449["rates"] :: any
      %t1451 = load_field rates_el_225["rate"] :: float
      %t229 = const 0 :: integer
      %t230 = select %t1410, %t1451, %t229 :: float
      %acc_221 = acc_add agg.sum(%acc_221, %t230) :: float
    end_loop
    %t231 = acc_load %acc_221 :: float
    yield %t231
  )
  (Declaration fed_eff_mj
    %acc1453 = decl_acc :: float
    %t1454 = load_input "fed" :: array
    %t1455 = load_field t1454["married_joint"] :: any
    %t1456 = load_field t1455["rates"] :: any
    loop rates id=L38 in %t1456 as el=%t1457, idx=%t1458
      %t1474 = load_input "income" :: float
      %t1475 = load_input "fed" :: any
      %t1476 = load_field t1475["married_joint"] :: any
      %t1477 = load_field t1476["std"] :: float
      %t1478 = call core.sub(%t1474, %t1477) :: float
      %t1479 = const 0 :: integer
      %t1480 = make_tuple(%t1478, %t1479) :: tuple<float, integer>
      %t1481 = fold %t1480 fn="agg.max" :: float
      %t1463 = load_input "fed" :: array
      %t1464 = load_field t1463["married_joint"] :: any
      %t1465 = load_field t1464["rates"] :: any
      %t1482 = load_input "fed" :: array
      %t1483 = load_field t1482["married_joint"] :: any
      %t1484 = load_field t1483["rates"] :: any
      %t1485 = load_field t1457["lo"] :: float
      %t1468 = call core.sub(%t1481, %t1485) :: float
      %t1469 = const 0 :: integer
      %t1486 = load_input "fed" :: array
      %t1487 = load_field t1486["married_joint"] :: any
      %t1488 = load_field t1487["rates"] :: any
      %t1495 = load_input "fed" :: array
      %t1496 = load_field t1495["married_joint"] :: any
      %t1497 = load_field t1496["rates"] :: any
      %t1498 = load_field t1457["hi"] :: float
      %t1490 = const -1 :: integer
      %t1491 = call core.eq(%t1498, %t1490) :: boolean
      %t1492 = const 100000000000.0 :: float
      %t1499 = load_input "fed" :: array
      %t1500 = load_field t1499["married_joint"] :: any
      %t1501 = load_field t1500["rates"] :: any
      %t1502 = load_field t1457["hi"] :: float
      %t1494 = select %t1491, %t1492, %t1502 :: float
      %t1503 = load_input "fed" :: array
      %t1504 = load_field t1503["married_joint"] :: any
      %t1505 = load_field t1504["rates"] :: any
      %t1506 = load_field t1457["lo"] :: float
      %t1472 = call core.sub(%t1494, %t1506) :: float
      %t1473 = call core.clamp(%t1468, %t1469, %t1472) :: float
      %t1507 = load_input "fed" :: array
      %t1508 = load_field t1507["married_joint"] :: any
      %t1509 = load_field t1508["rates"] :: any
      %t1510 = load_field t1457["rate"] :: float
      %t1461 = call core.mul(%t1473, %t1510) :: float
      %acc1453 = acc_add agg.sum(%acc1453, %t1461) :: float
    end_loop
    %t1462 = acc_load %acc1453 :: float
    %t233 = load_input "income" :: float
    %t234 = const 1.0 :: float
    %t235 = make_tuple(%t233, %t234) :: tuple<float>
    %t236 = fold %t235 fn="agg.max" :: float
    %t237 = call core.div(%t1462, %t236) :: float
    yield %t237
  )
  (Declaration ss_tax_mj
    %t1511 = load_input "income" :: float
    %t1512 = const 168600.0 :: float
    %t1513 = make_tuple(%t1511, %t1512) :: tuple<float>
    %t1514 = fold %t1513 fn="agg.min" :: float
    %t1515 = const 0.062 :: float
    %t1516 = call core.mul(%t1514, %t1515) :: float
    yield %t1516
  )
  (Declaration med_tax_mj
    %t1517 = load_input "income" :: float
    %t1518 = const 0.0145 :: float
    %t1519 = call core.mul(%t1517, %t1518) :: float
    yield %t1519
  )
  (Declaration addl_threshold_mj
    %t240 = const 250000.0 :: float
    yield %t240
  )
  (Declaration addl_med_tax_mj
    %t241 = load_input "income" :: float
    %t242 = const 250000.0 :: float
    %t243 = call core.sub(%t241, %t242) :: float
    %t244 = const 0 :: integer
    %t245 = make_tuple(%t243, %t244) :: tuple<float, integer>
    %t246 = fold %t245 fn="agg.max" :: float
    %t247 = const 0.009 :: float
    %t248 = call core.mul(%t246, %t247) :: float
    yield %t248
  )
  (Declaration fica_tax_mj
    %t1521 = load_input "income" :: float
    %t1522 = const 168600.0 :: float
    %t1523 = make_tuple(%t1521, %t1522) :: tuple<float>
    %t1524 = fold %t1523 fn="agg.min" :: float
    %t1525 = const 0.062 :: float
    %t1526 = call core.mul(%t1524, %t1525) :: float
    %t1528 = load_input "income" :: float
    %t1529 = const 0.0145 :: float
    %t1530 = call core.mul(%t1528, %t1529) :: float
    %t251 = call core.add(%t1526, %t1530) :: float
    %t1531 = load_input "income" :: float
    %t1532 = const 250000.0 :: float
    %t1533 = call core.sub(%t1531, %t1532) :: float
    %t1534 = const 0 :: integer
    %t1535 = make_tuple(%t1533, %t1534) :: tuple<float, integer>
    %t1536 = fold %t1535 fn="agg.max" :: float
    %t1537 = const 0.009 :: float
    %t1538 = call core.mul(%t1536, %t1537) :: float
    %t253 = call core.add(%t251, %t1538) :: float
    yield %t253
  )
  (Declaration fica_eff_mj
    %t1545 = load_input "income" :: float
    %t1546 = const 168600.0 :: float
    %t1547 = make_tuple(%t1545, %t1546) :: tuple<float>
    %t1548 = fold %t1547 fn="agg.min" :: float
    %t1549 = const 0.062 :: float
    %t1550 = call core.mul(%t1548, %t1549) :: float
    %t1552 = load_input "income" :: float
    %t1553 = const 0.0145 :: float
    %t1554 = call core.mul(%t1552, %t1553) :: float
    %t1541 = call core.add(%t1550, %t1554) :: float
    %t1555 = load_input "income" :: float
    %t1556 = const 250000.0 :: float
    %t1557 = call core.sub(%t1555, %t1556) :: float
    %t1558 = const 0 :: integer
    %t1559 = make_tuple(%t1557, %t1558) :: tuple<float, integer>
    %t1560 = fold %t1559 fn="agg.max" :: float
    %t1561 = const 0.009 :: float
    %t1562 = call core.mul(%t1560, %t1561) :: float
    %t1543 = call core.add(%t1541, %t1562) :: float
    %t255 = load_input "income" :: float
    %t256 = const 1.0 :: float
    %t257 = make_tuple(%t255, %t256) :: tuple<float>
    %t258 = fold %t257 fn="agg.max" :: float
    %t259 = call core.div(%t1543, %t258) :: float
    yield %t259
  )
  (Declaration total_tax_mj
    %acc1564 = decl_acc :: float
    %t1565 = load_input "fed" :: array
    %t1566 = load_field t1565["married_joint"] :: any
    %t1567 = load_field t1566["rates"] :: any
    loop rates id=L39 in %t1567 as el=%t1568, idx=%t1569
      %t1585 = load_input "income" :: float
      %t1586 = load_input "fed" :: any
      %t1587 = load_field t1586["married_joint"] :: any
      %t1588 = load_field t1587["std"] :: float
      %t1589 = call core.sub(%t1585, %t1588) :: float
      %t1590 = const 0 :: integer
      %t1591 = make_tuple(%t1589, %t1590) :: tuple<float, integer>
      %t1592 = fold %t1591 fn="agg.max" :: float
      %t1574 = load_input "fed" :: array
      %t1575 = load_field t1574["married_joint"] :: any
      %t1576 = load_field t1575["rates"] :: any
      %t1593 = load_input "fed" :: array
      %t1594 = load_field t1593["married_joint"] :: any
      %t1595 = load_field t1594["rates"] :: any
      %t1596 = load_field t1568["lo"] :: float
      %t1579 = call core.sub(%t1592, %t1596) :: float
      %t1580 = const 0 :: integer
      %t1597 = load_input "fed" :: array
      %t1598 = load_field t1597["married_joint"] :: any
      %t1599 = load_field t1598["rates"] :: any
      %t1606 = load_input "fed" :: array
      %t1607 = load_field t1606["married_joint"] :: any
      %t1608 = load_field t1607["rates"] :: any
      %t1609 = load_field t1568["hi"] :: float
      %t1601 = const -1 :: integer
      %t1602 = call core.eq(%t1609, %t1601) :: boolean
      %t1603 = const 100000000000.0 :: float
      %t1610 = load_input "fed" :: array
      %t1611 = load_field t1610["married_joint"] :: any
      %t1612 = load_field t1611["rates"] :: any
      %t1613 = load_field t1568["hi"] :: float
      %t1605 = select %t1602, %t1603, %t1613 :: float
      %t1614 = load_input "fed" :: array
      %t1615 = load_field t1614["married_joint"] :: any
      %t1616 = load_field t1615["rates"] :: any
      %t1617 = load_field t1568["lo"] :: float
      %t1583 = call core.sub(%t1605, %t1617) :: float
      %t1584 = call core.clamp(%t1579, %t1580, %t1583) :: float
      %t1618 = load_input "fed" :: array
      %t1619 = load_field t1618["married_joint"] :: any
      %t1620 = load_field t1619["rates"] :: any
      %t1621 = load_field t1568["rate"] :: float
      %t1572 = call core.mul(%t1584, %t1621) :: float
      %acc1564 = acc_add agg.sum(%acc1564, %t1572) :: float
    end_loop
    %t1573 = acc_load %acc1564 :: float
    %t1628 = load_input "income" :: float
    %t1629 = const 168600.0 :: float
    %t1630 = make_tuple(%t1628, %t1629) :: tuple<float>
    %t1631 = fold %t1630 fn="agg.min" :: float
    %t1632 = const 0.062 :: float
    %t1633 = call core.mul(%t1631, %t1632) :: float
    %t1635 = load_input "income" :: float
    %t1636 = const 0.0145 :: float
    %t1637 = call core.mul(%t1635, %t1636) :: float
    %t1624 = call core.add(%t1633, %t1637) :: float
    %t1638 = load_input "income" :: float
    %t1639 = const 250000.0 :: float
    %t1640 = call core.sub(%t1638, %t1639) :: float
    %t1641 = const 0 :: integer
    %t1642 = make_tuple(%t1640, %t1641) :: tuple<float, integer>
    %t1643 = fold %t1642 fn="agg.max" :: float
    %t1644 = const 0.009 :: float
    %t1645 = call core.mul(%t1643, %t1644) :: float
    %t1626 = call core.add(%t1624, %t1645) :: float
    %t262 = call core.add(%t1573, %t1626) :: float
    %t1646 = load_input "income" :: float
    %t1647 = load_input "state_rate" :: float
    %t1648 = call core.mul(%t1646, %t1647) :: float
    %t264 = call core.add(%t262, %t1648) :: float
    %t1649 = load_input "income" :: float
    %t1650 = load_input "local_rate" :: float
    %t1651 = call core.mul(%t1649, %t1650) :: float
    %t266 = call core.add(%t264, %t1651) :: float
    yield %t266
  )
  (Declaration total_eff_mj
    %acc1660 = decl_acc :: float
    %t1661 = load_input "fed" :: array
    %t1662 = load_field t1661["married_joint"] :: any
    %t1663 = load_field t1662["rates"] :: any
    loop rates id=L40 in %t1663 as el=%t1664, idx=%t1665
      %t1681 = load_input "income" :: float
      %t1682 = load_input "fed" :: any
      %t1683 = load_field t1682["married_joint"] :: any
      %t1684 = load_field t1683["std"] :: float
      %t1685 = call core.sub(%t1681, %t1684) :: float
      %t1686 = const 0 :: integer
      %t1687 = make_tuple(%t1685, %t1686) :: tuple<float, integer>
      %t1688 = fold %t1687 fn="agg.max" :: float
      %t1670 = load_input "fed" :: array
      %t1671 = load_field t1670["married_joint"] :: any
      %t1672 = load_field t1671["rates"] :: any
      %t1689 = load_input "fed" :: array
      %t1690 = load_field t1689["married_joint"] :: any
      %t1691 = load_field t1690["rates"] :: any
      %t1692 = load_field t1664["lo"] :: float
      %t1675 = call core.sub(%t1688, %t1692) :: float
      %t1676 = const 0 :: integer
      %t1693 = load_input "fed" :: array
      %t1694 = load_field t1693["married_joint"] :: any
      %t1695 = load_field t1694["rates"] :: any
      %t1702 = load_input "fed" :: array
      %t1703 = load_field t1702["married_joint"] :: any
      %t1704 = load_field t1703["rates"] :: any
      %t1705 = load_field t1664["hi"] :: float
      %t1697 = const -1 :: integer
      %t1698 = call core.eq(%t1705, %t1697) :: boolean
      %t1699 = const 100000000000.0 :: float
      %t1706 = load_input "fed" :: array
      %t1707 = load_field t1706["married_joint"] :: any
      %t1708 = load_field t1707["rates"] :: any
      %t1709 = load_field t1664["hi"] :: float
      %t1701 = select %t1698, %t1699, %t1709 :: float
      %t1710 = load_input "fed" :: array
      %t1711 = load_field t1710["married_joint"] :: any
      %t1712 = load_field t1711["rates"] :: any
      %t1713 = load_field t1664["lo"] :: float
      %t1679 = call core.sub(%t1701, %t1713) :: float
      %t1680 = call core.clamp(%t1675, %t1676, %t1679) :: float
      %t1714 = load_input "fed" :: array
      %t1715 = load_field t1714["married_joint"] :: any
      %t1716 = load_field t1715["rates"] :: any
      %t1717 = load_field t1664["rate"] :: float
      %t1668 = call core.mul(%t1680, %t1717) :: float
      %acc1660 = acc_add agg.sum(%acc1660, %t1668) :: float
    end_loop
    %t1669 = acc_load %acc1660 :: float
    %t1724 = load_input "income" :: float
    %t1725 = const 168600.0 :: float
    %t1726 = make_tuple(%t1724, %t1725) :: tuple<float>
    %t1727 = fold %t1726 fn="agg.min" :: float
    %t1728 = const 0.062 :: float
    %t1729 = call core.mul(%t1727, %t1728) :: float
    %t1731 = load_input "income" :: float
    %t1732 = const 0.0145 :: float
    %t1733 = call core.mul(%t1731, %t1732) :: float
    %t1720 = call core.add(%t1729, %t1733) :: float
    %t1734 = load_input "income" :: float
    %t1735 = const 250000.0 :: float
    %t1736 = call core.sub(%t1734, %t1735) :: float
    %t1737 = const 0 :: integer
    %t1738 = make_tuple(%t1736, %t1737) :: tuple<float, integer>
    %t1739 = fold %t1738 fn="agg.max" :: float
    %t1740 = const 0.009 :: float
    %t1741 = call core.mul(%t1739, %t1740) :: float
    %t1722 = call core.add(%t1720, %t1741) :: float
    %t1654 = call core.add(%t1669, %t1722) :: float
    %t1742 = load_input "income" :: float
    %t1743 = load_input "state_rate" :: float
    %t1744 = call core.mul(%t1742, %t1743) :: float
    %t1656 = call core.add(%t1654, %t1744) :: float
    %t1745 = load_input "income" :: float
    %t1746 = load_input "local_rate" :: float
    %t1747 = call core.mul(%t1745, %t1746) :: float
    %t1658 = call core.add(%t1656, %t1747) :: float
    %t268 = load_input "income" :: float
    %t269 = const 1.0 :: float
    %t270 = make_tuple(%t268, %t269) :: tuple<float>
    %t271 = fold %t270 fn="agg.max" :: float
    %t272 = call core.div(%t1658, %t271) :: float
    yield %t272
  )
  (Declaration after_tax_mj
    %t273 = load_input "income" :: float
    %acc1756 = decl_acc :: float
    %t1757 = load_input "fed" :: array
    %t1758 = load_field t1757["married_joint"] :: any
    %t1759 = load_field t1758["rates"] :: any
    loop rates id=L41 in %t1759 as el=%t1760, idx=%t1761
      %t1777 = load_input "income" :: float
      %t1778 = load_input "fed" :: any
      %t1779 = load_field t1778["married_joint"] :: any
      %t1780 = load_field t1779["std"] :: float
      %t1781 = call core.sub(%t1777, %t1780) :: float
      %t1782 = const 0 :: integer
      %t1783 = make_tuple(%t1781, %t1782) :: tuple<float, integer>
      %t1784 = fold %t1783 fn="agg.max" :: float
      %t1766 = load_input "fed" :: array
      %t1767 = load_field t1766["married_joint"] :: any
      %t1768 = load_field t1767["rates"] :: any
      %t1785 = load_input "fed" :: array
      %t1786 = load_field t1785["married_joint"] :: any
      %t1787 = load_field t1786["rates"] :: any
      %t1788 = load_field t1760["lo"] :: float
      %t1771 = call core.sub(%t1784, %t1788) :: float
      %t1772 = const 0 :: integer
      %t1789 = load_input "fed" :: array
      %t1790 = load_field t1789["married_joint"] :: any
      %t1791 = load_field t1790["rates"] :: any
      %t1798 = load_input "fed" :: array
      %t1799 = load_field t1798["married_joint"] :: any
      %t1800 = load_field t1799["rates"] :: any
      %t1801 = load_field t1760["hi"] :: float
      %t1793 = const -1 :: integer
      %t1794 = call core.eq(%t1801, %t1793) :: boolean
      %t1795 = const 100000000000.0 :: float
      %t1802 = load_input "fed" :: array
      %t1803 = load_field t1802["married_joint"] :: any
      %t1804 = load_field t1803["rates"] :: any
      %t1805 = load_field t1760["hi"] :: float
      %t1797 = select %t1794, %t1795, %t1805 :: float
      %t1806 = load_input "fed" :: array
      %t1807 = load_field t1806["married_joint"] :: any
      %t1808 = load_field t1807["rates"] :: any
      %t1809 = load_field t1760["lo"] :: float
      %t1775 = call core.sub(%t1797, %t1809) :: float
      %t1776 = call core.clamp(%t1771, %t1772, %t1775) :: float
      %t1810 = load_input "fed" :: array
      %t1811 = load_field t1810["married_joint"] :: any
      %t1812 = load_field t1811["rates"] :: any
      %t1813 = load_field t1760["rate"] :: float
      %t1764 = call core.mul(%t1776, %t1813) :: float
      %acc1756 = acc_add agg.sum(%acc1756, %t1764) :: float
    end_loop
    %t1765 = acc_load %acc1756 :: float
    %t1820 = load_input "income" :: float
    %t1821 = const 168600.0 :: float
    %t1822 = make_tuple(%t1820, %t1821) :: tuple<float>
    %t1823 = fold %t1822 fn="agg.min" :: float
    %t1824 = const 0.062 :: float
    %t1825 = call core.mul(%t1823, %t1824) :: float
    %t1827 = load_input "income" :: float
    %t1828 = const 0.0145 :: float
    %t1829 = call core.mul(%t1827, %t1828) :: float
    %t1816 = call core.add(%t1825, %t1829) :: float
    %t1830 = load_input "income" :: float
    %t1831 = const 250000.0 :: float
    %t1832 = call core.sub(%t1830, %t1831) :: float
    %t1833 = const 0 :: integer
    %t1834 = make_tuple(%t1832, %t1833) :: tuple<float, integer>
    %t1835 = fold %t1834 fn="agg.max" :: float
    %t1836 = const 0.009 :: float
    %t1837 = call core.mul(%t1835, %t1836) :: float
    %t1818 = call core.add(%t1816, %t1837) :: float
    %t1750 = call core.add(%t1765, %t1818) :: float
    %t1838 = load_input "income" :: float
    %t1839 = load_input "state_rate" :: float
    %t1840 = call core.mul(%t1838, %t1839) :: float
    %t1752 = call core.add(%t1750, %t1840) :: float
    %t1841 = load_input "income" :: float
    %t1842 = load_input "local_rate" :: float
    %t1843 = call core.mul(%t1841, %t1842) :: float
    %t1754 = call core.add(%t1752, %t1843) :: float
    %t275 = call core.sub(%t273, %t1754) :: float
    yield %t275
  )
  (Declaration take_home_mj
    %t1844 = load_input "income" :: float
    %acc1855 = decl_acc :: float
    %t1856 = load_input "fed" :: array
    %t1857 = load_field t1856["married_joint"] :: any
    %t1858 = load_field t1857["rates"] :: any
    loop rates id=L42 in %t1858 as el=%t1859, idx=%t1860
      %t1876 = load_input "income" :: float
      %t1877 = load_input "fed" :: any
      %t1878 = load_field t1877["married_joint"] :: any
      %t1879 = load_field t1878["std"] :: float
      %t1880 = call core.sub(%t1876, %t1879) :: float
      %t1881 = const 0 :: integer
      %t1882 = make_tuple(%t1880, %t1881) :: tuple<float, integer>
      %t1883 = fold %t1882 fn="agg.max" :: float
      %t1865 = load_input "fed" :: array
      %t1866 = load_field t1865["married_joint"] :: any
      %t1867 = load_field t1866["rates"] :: any
      %t1884 = load_input "fed" :: array
      %t1885 = load_field t1884["married_joint"] :: any
      %t1886 = load_field t1885["rates"] :: any
      %t1887 = load_field t1859["lo"] :: float
      %t1870 = call core.sub(%t1883, %t1887) :: float
      %t1871 = const 0 :: integer
      %t1888 = load_input "fed" :: array
      %t1889 = load_field t1888["married_joint"] :: any
      %t1890 = load_field t1889["rates"] :: any
      %t1897 = load_input "fed" :: array
      %t1898 = load_field t1897["married_joint"] :: any
      %t1899 = load_field t1898["rates"] :: any
      %t1900 = load_field t1859["hi"] :: float
      %t1892 = const -1 :: integer
      %t1893 = call core.eq(%t1900, %t1892) :: boolean
      %t1894 = const 100000000000.0 :: float
      %t1901 = load_input "fed" :: array
      %t1902 = load_field t1901["married_joint"] :: any
      %t1903 = load_field t1902["rates"] :: any
      %t1904 = load_field t1859["hi"] :: float
      %t1896 = select %t1893, %t1894, %t1904 :: float
      %t1905 = load_input "fed" :: array
      %t1906 = load_field t1905["married_joint"] :: any
      %t1907 = load_field t1906["rates"] :: any
      %t1908 = load_field t1859["lo"] :: float
      %t1874 = call core.sub(%t1896, %t1908) :: float
      %t1875 = call core.clamp(%t1870, %t1871, %t1874) :: float
      %t1909 = load_input "fed" :: array
      %t1910 = load_field t1909["married_joint"] :: any
      %t1911 = load_field t1910["rates"] :: any
      %t1912 = load_field t1859["rate"] :: float
      %t1863 = call core.mul(%t1875, %t1912) :: float
      %acc1855 = acc_add agg.sum(%acc1855, %t1863) :: float
    end_loop
    %t1864 = acc_load %acc1855 :: float
    %t1919 = load_input "income" :: float
    %t1920 = const 168600.0 :: float
    %t1921 = make_tuple(%t1919, %t1920) :: tuple<float>
    %t1922 = fold %t1921 fn="agg.min" :: float
    %t1923 = const 0.062 :: float
    %t1924 = call core.mul(%t1922, %t1923) :: float
    %t1926 = load_input "income" :: float
    %t1927 = const 0.0145 :: float
    %t1928 = call core.mul(%t1926, %t1927) :: float
    %t1915 = call core.add(%t1924, %t1928) :: float
    %t1929 = load_input "income" :: float
    %t1930 = const 250000.0 :: float
    %t1931 = call core.sub(%t1929, %t1930) :: float
    %t1932 = const 0 :: integer
    %t1933 = make_tuple(%t1931, %t1932) :: tuple<float, integer>
    %t1934 = fold %t1933 fn="agg.max" :: float
    %t1935 = const 0.009 :: float
    %t1936 = call core.mul(%t1934, %t1935) :: float
    %t1917 = call core.add(%t1915, %t1936) :: float
    %t1849 = call core.add(%t1864, %t1917) :: float
    %t1937 = load_input "income" :: float
    %t1938 = load_input "state_rate" :: float
    %t1939 = call core.mul(%t1937, %t1938) :: float
    %t1851 = call core.add(%t1849, %t1939) :: float
    %t1940 = load_input "income" :: float
    %t1941 = load_input "local_rate" :: float
    %t1942 = call core.mul(%t1940, %t1941) :: float
    %t1853 = call core.add(%t1851, %t1942) :: float
    %t1846 = call core.sub(%t1844, %t1853) :: float
    %t277 = load_input "retirement_contrib" :: float
    %t278 = call core.sub(%t1846, %t277) :: float
    yield %t278
  )
  (Declaration taxable_ms
    %t279 = load_input "income" :: float
    %t280 = load_input "fed" :: any
    %t281 = load_field t280["married_separate"] :: any
    %t282 = load_field t281["std"] :: float
    %t283 = call core.sub(%t279, %t282) :: float
    %t284 = const 0 :: integer
    %t285 = make_tuple(%t283, %t284) :: tuple<float, integer>
    %t286 = fold %t285 fn="agg.max" :: float
    yield %t286
  )
  (Declaration lo_ms
    %t287 = load_input "fed" :: array
    %t288 = load_field t287["married_separate"] :: any
    %t289 = load_field t288["rates"] :: any
    loop rates id=L17 in %t289 as el=%rates_el_290, idx=%rates_i_291
      %t292 = load_field rates_el_290["lo"] :: float
      yield %t292
    end_loop
  )
  (Declaration hi_ms
    %t293 = load_input "fed" :: array
    %t294 = load_field t293["married_separate"] :: any
    %t295 = load_field t294["rates"] :: any
    loop rates id=L18 in %t295 as el=%rates_el_296, idx=%rates_i_297
      %t298 = load_field rates_el_296["hi"] :: float
      yield %t298
    end_loop
  )
  (Declaration rate_ms
    %t299 = load_input "fed" :: array
    %t300 = load_field t299["married_separate"] :: any
    %t301 = load_field t300["rates"] :: any
    loop rates id=L19 in %t301 as el=%rates_el_302, idx=%rates_i_303
      %t304 = load_field rates_el_302["rate"] :: float
      yield %t304
    end_loop
  )
  (Declaration hi_ms_eff
    %t305 = load_input "fed" :: array
    %t306 = load_field t305["married_separate"] :: any
    %t307 = load_field t306["rates"] :: any
    loop rates id=L20 in %t307 as el=%rates_el_308, idx=%rates_i_309
      %t1943 = load_input "fed" :: array
      %t1944 = load_field t1943["married_separate"] :: any
      %t1945 = load_field t1944["rates"] :: any
      %t1946 = load_field rates_el_308["hi"] :: float
      %t311 = const -1 :: integer
      %t312 = call core.eq(%t1946, %t311) :: boolean
      %t313 = const 100000000000.0 :: float
      %t1947 = load_input "fed" :: array
      %t1948 = load_field t1947["married_separate"] :: any
      %t1949 = load_field t1948["rates"] :: any
      %t1950 = load_field rates_el_308["hi"] :: float
      %t315 = select %t312, %t313, %t1950 :: float
      yield %t315
    end_loop
  )
  (Declaration amt_ms
    %t316 = load_input "fed" :: array
    %t317 = load_field t316["married_separate"] :: any
    %t318 = load_field t317["rates"] :: any
    %t1951 = load_input "income" :: float
    %t1952 = load_input "fed" :: any
    %t1953 = load_field t1952["married_separate"] :: any
    %t1954 = load_field t1953["std"] :: float
    %t1955 = call core.sub(%t1951, %t1954) :: float
    %t1956 = const 0 :: integer
    %t1957 = make_tuple(%t1955, %t1956) :: tuple<float, integer>
    %t1958 = fold %t1957 fn="agg.max" :: float
    loop rates id=L21 in %t318 as el=%rates_el_319, idx=%rates_i_320
      %t1959 = load_input "fed" :: array
      %t1960 = load_field t1959["married_separate"] :: any
      %t1961 = load_field t1960["rates"] :: any
      %t1962 = load_field rates_el_319["lo"] :: float
      %t323 = call core.sub(%t321, %t1962) :: float
      %t324 = const 0 :: integer
      %t1963 = load_input "fed" :: array
      %t1964 = load_field t1963["married_separate"] :: any
      %t1965 = load_field t1964["rates"] :: any
      %t1972 = load_input "fed" :: array
      %t1973 = load_field t1972["married_separate"] :: any
      %t1974 = load_field t1973["rates"] :: any
      %t1975 = load_field rates_el_319["hi"] :: float
      %t1967 = const -1 :: integer
      %t1968 = call core.eq(%t1975, %t1967) :: boolean
      %t1969 = const 100000000000.0 :: float
      %t1976 = load_input "fed" :: array
      %t1977 = load_field t1976["married_separate"] :: any
      %t1978 = load_field t1977["rates"] :: any
      %t1979 = load_field rates_el_319["hi"] :: float
      %t1971 = select %t1968, %t1969, %t1979 :: float
      %t1980 = load_input "fed" :: array
      %t1981 = load_field t1980["married_separate"] :: any
      %t1982 = load_field t1981["rates"] :: any
      %t1983 = load_field rates_el_319["lo"] :: float
      %t327 = call core.sub(%t1971, %t1983) :: float
      %t328 = call core.clamp(%t323, %t324, %t327) :: float
      yield %t328
    end_loop
  )
  (Declaration fed_tax_ms
    %acc_329 = decl_acc :: float
    %t330 = load_input "fed" :: array
    %t331 = load_field t330["married_separate"] :: any
    %t332 = load_field t331["rates"] :: any
    loop rates id=L22 in %t332 as el=%rates_el_333, idx=%rates_i_334
      %t1995 = load_input "income" :: float
      %t1996 = load_input "fed" :: any
      %t1997 = load_field t1996["married_separate"] :: any
      %t1998 = load_field t1997["std"] :: float
      %t1999 = call core.sub(%t1995, %t1998) :: float
      %t2000 = const 0 :: integer
      %t2001 = make_tuple(%t1999, %t2000) :: tuple<float, integer>
      %t2002 = fold %t2001 fn="agg.max" :: float
      %t1984 = load_input "fed" :: array
      %t1985 = load_field t1984["married_separate"] :: any
      %t1986 = load_field t1985["rates"] :: any
      %t2003 = load_input "fed" :: array
      %t2004 = load_field t2003["married_separate"] :: any
      %t2005 = load_field t2004["rates"] :: any
      %t2006 = load_field rates_el_333["lo"] :: float
      %t1989 = call core.sub(%t2002, %t2006) :: float
      %t1990 = const 0 :: integer
      %t2007 = load_input "fed" :: array
      %t2008 = load_field t2007["married_separate"] :: any
      %t2009 = load_field t2008["rates"] :: any
      %t2016 = load_input "fed" :: array
      %t2017 = load_field t2016["married_separate"] :: any
      %t2018 = load_field t2017["rates"] :: any
      %t2019 = load_field rates_el_333["hi"] :: float
      %t2011 = const -1 :: integer
      %t2012 = call core.eq(%t2019, %t2011) :: boolean
      %t2013 = const 100000000000.0 :: float
      %t2020 = load_input "fed" :: array
      %t2021 = load_field t2020["married_separate"] :: any
      %t2022 = load_field t2021["rates"] :: any
      %t2023 = load_field rates_el_333["hi"] :: float
      %t2015 = select %t2012, %t2013, %t2023 :: float
      %t2024 = load_input "fed" :: array
      %t2025 = load_field t2024["married_separate"] :: any
      %t2026 = load_field t2025["rates"] :: any
      %t2027 = load_field rates_el_333["lo"] :: float
      %t1993 = call core.sub(%t2015, %t2027) :: float
      %t1994 = call core.clamp(%t1989, %t1990, %t1993) :: float
      %t2028 = load_input "fed" :: array
      %t2029 = load_field t2028["married_separate"] :: any
      %t2030 = load_field t2029["rates"] :: any
      %t2031 = load_field rates_el_333["rate"] :: float
      %t337 = call core.mul(%t1994, %t2031) :: float
      %acc_329 = acc_add agg.sum(%acc_329, %t337) :: float
    end_loop
    %t338 = acc_load %acc_329 :: float
    yield %t338
  )
  (Declaration in_br_ms
    %t339 = load_input "fed" :: array
    %t340 = load_field t339["married_separate"] :: any
    %t341 = load_field t340["rates"] :: any
    %t2032 = load_input "income" :: float
    %t2033 = load_input "fed" :: any
    %t2034 = load_field t2033["married_separate"] :: any
    %t2035 = load_field t2034["std"] :: float
    %t2036 = call core.sub(%t2032, %t2035) :: float
    %t2037 = const 0 :: integer
    %t2038 = make_tuple(%t2036, %t2037) :: tuple<float, integer>
    %t2039 = fold %t2038 fn="agg.max" :: float
    %t2040 = load_input "income" :: float
    %t2041 = load_input "fed" :: any
    %t2042 = load_field t2041["married_separate"] :: any
    %t2043 = load_field t2042["std"] :: float
    %t2044 = call core.sub(%t2040, %t2043) :: float
    %t2045 = const 0 :: integer
    %t2046 = make_tuple(%t2044, %t2045) :: tuple<float, integer>
    %t2047 = fold %t2046 fn="agg.max" :: float
    loop rates id=L23 in %t341 as el=%rates_el_342, idx=%rates_i_343
      %t2048 = load_input "fed" :: array
      %t2049 = load_field t2048["married_separate"] :: any
      %t2050 = load_field t2049["rates"] :: any
      %t2051 = load_field rates_el_342["lo"] :: float
      %t346 = call core.gte(%t344, %t2051) :: boolean
      %t2052 = load_input "fed" :: array
      %t2053 = load_field t2052["married_separate"] :: any
      %t2054 = load_field t2053["rates"] :: any
      %t2061 = load_input "fed" :: array
      %t2062 = load_field t2061["married_separate"] :: any
      %t2063 = load_field t2062["rates"] :: any
      %t2064 = load_field rates_el_342["hi"] :: float
      %t2056 = const -1 :: integer
      %t2057 = call core.eq(%t2064, %t2056) :: boolean
      %t2058 = const 100000000000.0 :: float
      %t2065 = load_input "fed" :: array
      %t2066 = load_field t2065["married_separate"] :: any
      %t2067 = load_field t2066["rates"] :: any
      %t2068 = load_field rates_el_342["hi"] :: float
      %t2060 = select %t2057, %t2058, %t2068 :: float
      %t349 = call core.lt(%t347, %t2060) :: boolean
      %t350 = call core.and(%t346, %t349) :: boolean
      yield %t350
    end_loop
  )
  (Declaration fed_marginal_ms
    %acc_351 = decl_acc :: float
    %t352 = load_input "fed" :: array
    %t353 = load_field t352["married_separate"] :: any
    %t354 = load_field t353["rates"] :: any
    loop rates id=L24 in %t354 as el=%rates_el_355, idx=%rates_i_356
      %t2079 = load_input "income" :: float
      %t2080 = load_input "fed" :: any
      %t2081 = load_field t2080["married_separate"] :: any
      %t2082 = load_field t2081["std"] :: float
      %t2083 = call core.sub(%t2079, %t2082) :: float
      %t2084 = const 0 :: integer
      %t2085 = make_tuple(%t2083, %t2084) :: tuple<float, integer>
      %t2086 = fold %t2085 fn="agg.max" :: float
      %t2087 = load_input "income" :: float
      %t2088 = load_input "fed" :: any
      %t2089 = load_field t2088["married_separate"] :: any
      %t2090 = load_field t2089["std"] :: float
      %t2091 = call core.sub(%t2087, %t2090) :: float
      %t2092 = const 0 :: integer
      %t2093 = make_tuple(%t2091, %t2092) :: tuple<float, integer>
      %t2094 = fold %t2093 fn="agg.max" :: float
      %t2069 = load_input "fed" :: array
      %t2070 = load_field t2069["married_separate"] :: any
      %t2071 = load_field t2070["rates"] :: any
      %t2095 = load_input "fed" :: array
      %t2096 = load_field t2095["married_separate"] :: any
      %t2097 = load_field t2096["rates"] :: any
      %t2098 = load_field rates_el_355["lo"] :: float
      %t2075 = call core.gte(%t2086, %t2098) :: boolean
      %t2099 = load_input "fed" :: array
      %t2100 = load_field t2099["married_separate"] :: any
      %t2101 = load_field t2100["rates"] :: any
      %t2108 = load_input "fed" :: array
      %t2109 = load_field t2108["married_separate"] :: any
      %t2110 = load_field t2109["rates"] :: any
      %t2111 = load_field rates_el_355["hi"] :: float
      %t2103 = const -1 :: integer
      %t2104 = call core.eq(%t2111, %t2103) :: boolean
      %t2105 = const 100000000000.0 :: float
      %t2112 = load_input "fed" :: array
      %t2113 = load_field t2112["married_separate"] :: any
      %t2114 = load_field t2113["rates"] :: any
      %t2115 = load_field rates_el_355["hi"] :: float
      %t2107 = select %t2104, %t2105, %t2115 :: float
      %t2077 = call core.lt(%t2094, %t2107) :: boolean
      %t2078 = call core.and(%t2075, %t2077) :: boolean
      %t2116 = load_input "fed" :: array
      %t2117 = load_field t2116["married_separate"] :: any
      %t2118 = load_field t2117["rates"] :: any
      %t2119 = load_field rates_el_355["rate"] :: float
      %t359 = const 0 :: integer
      %t360 = select %t2078, %t2119, %t359 :: float
      %acc_351 = acc_add agg.sum(%acc_351, %t360) :: float
    end_loop
    %t361 = acc_load %acc_351 :: float
    yield %t361
  )
  (Declaration fed_eff_ms
    %acc2121 = decl_acc :: float
    %t2122 = load_input "fed" :: array
    %t2123 = load_field t2122["married_separate"] :: any
    %t2124 = load_field t2123["rates"] :: any
    loop rates id=L43 in %t2124 as el=%t2125, idx=%t2126
      %t2142 = load_input "income" :: float
      %t2143 = load_input "fed" :: any
      %t2144 = load_field t2143["married_separate"] :: any
      %t2145 = load_field t2144["std"] :: float
      %t2146 = call core.sub(%t2142, %t2145) :: float
      %t2147 = const 0 :: integer
      %t2148 = make_tuple(%t2146, %t2147) :: tuple<float, integer>
      %t2149 = fold %t2148 fn="agg.max" :: float
      %t2131 = load_input "fed" :: array
      %t2132 = load_field t2131["married_separate"] :: any
      %t2133 = load_field t2132["rates"] :: any
      %t2150 = load_input "fed" :: array
      %t2151 = load_field t2150["married_separate"] :: any
      %t2152 = load_field t2151["rates"] :: any
      %t2153 = load_field t2125["lo"] :: float
      %t2136 = call core.sub(%t2149, %t2153) :: float
      %t2137 = const 0 :: integer
      %t2154 = load_input "fed" :: array
      %t2155 = load_field t2154["married_separate"] :: any
      %t2156 = load_field t2155["rates"] :: any
      %t2163 = load_input "fed" :: array
      %t2164 = load_field t2163["married_separate"] :: any
      %t2165 = load_field t2164["rates"] :: any
      %t2166 = load_field t2125["hi"] :: float
      %t2158 = const -1 :: integer
      %t2159 = call core.eq(%t2166, %t2158) :: boolean
      %t2160 = const 100000000000.0 :: float
      %t2167 = load_input "fed" :: array
      %t2168 = load_field t2167["married_separate"] :: any
      %t2169 = load_field t2168["rates"] :: any
      %t2170 = load_field t2125["hi"] :: float
      %t2162 = select %t2159, %t2160, %t2170 :: float
      %t2171 = load_input "fed" :: array
      %t2172 = load_field t2171["married_separate"] :: any
      %t2173 = load_field t2172["rates"] :: any
      %t2174 = load_field t2125["lo"] :: float
      %t2140 = call core.sub(%t2162, %t2174) :: float
      %t2141 = call core.clamp(%t2136, %t2137, %t2140) :: float
      %t2175 = load_input "fed" :: array
      %t2176 = load_field t2175["married_separate"] :: any
      %t2177 = load_field t2176["rates"] :: any
      %t2178 = load_field t2125["rate"] :: float
      %t2129 = call core.mul(%t2141, %t2178) :: float
      %acc2121 = acc_add agg.sum(%acc2121, %t2129) :: float
    end_loop
    %t2130 = acc_load %acc2121 :: float
    %t363 = load_input "income" :: float
    %t364 = const 1.0 :: float
    %t365 = make_tuple(%t363, %t364) :: tuple<float>
    %t366 = fold %t365 fn="agg.max" :: float
    %t367 = call core.div(%t2130, %t366) :: float
    yield %t367
  )
  (Declaration ss_tax_ms
    %t2179 = load_input "income" :: float
    %t2180 = const 168600.0 :: float
    %t2181 = make_tuple(%t2179, %t2180) :: tuple<float>
    %t2182 = fold %t2181 fn="agg.min" :: float
    %t2183 = const 0.062 :: float
    %t2184 = call core.mul(%t2182, %t2183) :: float
    yield %t2184
  )
  (Declaration med_tax_ms
    %t2185 = load_input "income" :: float
    %t2186 = const 0.0145 :: float
    %t2187 = call core.mul(%t2185, %t2186) :: float
    yield %t2187
  )
  (Declaration addl_threshold_ms
    %t370 = const 125000.0 :: float
    yield %t370
  )
  (Declaration addl_med_tax_ms
    %t371 = load_input "income" :: float
    %t372 = const 125000.0 :: float
    %t373 = call core.sub(%t371, %t372) :: float
    %t374 = const 0 :: integer
    %t375 = make_tuple(%t373, %t374) :: tuple<float, integer>
    %t376 = fold %t375 fn="agg.max" :: float
    %t377 = const 0.009 :: float
    %t378 = call core.mul(%t376, %t377) :: float
    yield %t378
  )
  (Declaration fica_tax_ms
    %t2189 = load_input "income" :: float
    %t2190 = const 168600.0 :: float
    %t2191 = make_tuple(%t2189, %t2190) :: tuple<float>
    %t2192 = fold %t2191 fn="agg.min" :: float
    %t2193 = const 0.062 :: float
    %t2194 = call core.mul(%t2192, %t2193) :: float
    %t2196 = load_input "income" :: float
    %t2197 = const 0.0145 :: float
    %t2198 = call core.mul(%t2196, %t2197) :: float
    %t381 = call core.add(%t2194, %t2198) :: float
    %t2199 = load_input "income" :: float
    %t2200 = const 125000.0 :: float
    %t2201 = call core.sub(%t2199, %t2200) :: float
    %t2202 = const 0 :: integer
    %t2203 = make_tuple(%t2201, %t2202) :: tuple<float, integer>
    %t2204 = fold %t2203 fn="agg.max" :: float
    %t2205 = const 0.009 :: float
    %t2206 = call core.mul(%t2204, %t2205) :: float
    %t383 = call core.add(%t381, %t2206) :: float
    yield %t383
  )
  (Declaration fica_eff_ms
    %t2213 = load_input "income" :: float
    %t2214 = const 168600.0 :: float
    %t2215 = make_tuple(%t2213, %t2214) :: tuple<float>
    %t2216 = fold %t2215 fn="agg.min" :: float
    %t2217 = const 0.062 :: float
    %t2218 = call core.mul(%t2216, %t2217) :: float
    %t2220 = load_input "income" :: float
    %t2221 = const 0.0145 :: float
    %t2222 = call core.mul(%t2220, %t2221) :: float
    %t2209 = call core.add(%t2218, %t2222) :: float
    %t2223 = load_input "income" :: float
    %t2224 = const 125000.0 :: float
    %t2225 = call core.sub(%t2223, %t2224) :: float
    %t2226 = const 0 :: integer
    %t2227 = make_tuple(%t2225, %t2226) :: tuple<float, integer>
    %t2228 = fold %t2227 fn="agg.max" :: float
    %t2229 = const 0.009 :: float
    %t2230 = call core.mul(%t2228, %t2229) :: float
    %t2211 = call core.add(%t2209, %t2230) :: float
    %t385 = load_input "income" :: float
    %t386 = const 1.0 :: float
    %t387 = make_tuple(%t385, %t386) :: tuple<float>
    %t388 = fold %t387 fn="agg.max" :: float
    %t389 = call core.div(%t2211, %t388) :: float
    yield %t389
  )
  (Declaration total_tax_ms
    %acc2232 = decl_acc :: float
    %t2233 = load_input "fed" :: array
    %t2234 = load_field t2233["married_separate"] :: any
    %t2235 = load_field t2234["rates"] :: any
    loop rates id=L44 in %t2235 as el=%t2236, idx=%t2237
      %t2253 = load_input "income" :: float
      %t2254 = load_input "fed" :: any
      %t2255 = load_field t2254["married_separate"] :: any
      %t2256 = load_field t2255["std"] :: float
      %t2257 = call core.sub(%t2253, %t2256) :: float
      %t2258 = const 0 :: integer
      %t2259 = make_tuple(%t2257, %t2258) :: tuple<float, integer>
      %t2260 = fold %t2259 fn="agg.max" :: float
      %t2242 = load_input "fed" :: array
      %t2243 = load_field t2242["married_separate"] :: any
      %t2244 = load_field t2243["rates"] :: any
      %t2261 = load_input "fed" :: array
      %t2262 = load_field t2261["married_separate"] :: any
      %t2263 = load_field t2262["rates"] :: any
      %t2264 = load_field t2236["lo"] :: float
      %t2247 = call core.sub(%t2260, %t2264) :: float
      %t2248 = const 0 :: integer
      %t2265 = load_input "fed" :: array
      %t2266 = load_field t2265["married_separate"] :: any
      %t2267 = load_field t2266["rates"] :: any
      %t2274 = load_input "fed" :: array
      %t2275 = load_field t2274["married_separate"] :: any
      %t2276 = load_field t2275["rates"] :: any
      %t2277 = load_field t2236["hi"] :: float
      %t2269 = const -1 :: integer
      %t2270 = call core.eq(%t2277, %t2269) :: boolean
      %t2271 = const 100000000000.0 :: float
      %t2278 = load_input "fed" :: array
      %t2279 = load_field t2278["married_separate"] :: any
      %t2280 = load_field t2279["rates"] :: any
      %t2281 = load_field t2236["hi"] :: float
      %t2273 = select %t2270, %t2271, %t2281 :: float
      %t2282 = load_input "fed" :: array
      %t2283 = load_field t2282["married_separate"] :: any
      %t2284 = load_field t2283["rates"] :: any
      %t2285 = load_field t2236["lo"] :: float
      %t2251 = call core.sub(%t2273, %t2285) :: float
      %t2252 = call core.clamp(%t2247, %t2248, %t2251) :: float
      %t2286 = load_input "fed" :: array
      %t2287 = load_field t2286["married_separate"] :: any
      %t2288 = load_field t2287["rates"] :: any
      %t2289 = load_field t2236["rate"] :: float
      %t2240 = call core.mul(%t2252, %t2289) :: float
      %acc2232 = acc_add agg.sum(%acc2232, %t2240) :: float
    end_loop
    %t2241 = acc_load %acc2232 :: float
    %t2296 = load_input "income" :: float
    %t2297 = const 168600.0 :: float
    %t2298 = make_tuple(%t2296, %t2297) :: tuple<float>
    %t2299 = fold %t2298 fn="agg.min" :: float
    %t2300 = const 0.062 :: float
    %t2301 = call core.mul(%t2299, %t2300) :: float
    %t2303 = load_input "income" :: float
    %t2304 = const 0.0145 :: float
    %t2305 = call core.mul(%t2303, %t2304) :: float
    %t2292 = call core.add(%t2301, %t2305) :: float
    %t2306 = load_input "income" :: float
    %t2307 = const 125000.0 :: float
    %t2308 = call core.sub(%t2306, %t2307) :: float
    %t2309 = const 0 :: integer
    %t2310 = make_tuple(%t2308, %t2309) :: tuple<float, integer>
    %t2311 = fold %t2310 fn="agg.max" :: float
    %t2312 = const 0.009 :: float
    %t2313 = call core.mul(%t2311, %t2312) :: float
    %t2294 = call core.add(%t2292, %t2313) :: float
    %t392 = call core.add(%t2241, %t2294) :: float
    %t2314 = load_input "income" :: float
    %t2315 = load_input "state_rate" :: float
    %t2316 = call core.mul(%t2314, %t2315) :: float
    %t394 = call core.add(%t392, %t2316) :: float
    %t2317 = load_input "income" :: float
    %t2318 = load_input "local_rate" :: float
    %t2319 = call core.mul(%t2317, %t2318) :: float
    %t396 = call core.add(%t394, %t2319) :: float
    yield %t396
  )
  (Declaration total_eff_ms
    %acc2328 = decl_acc :: float
    %t2329 = load_input "fed" :: array
    %t2330 = load_field t2329["married_separate"] :: any
    %t2331 = load_field t2330["rates"] :: any
    loop rates id=L45 in %t2331 as el=%t2332, idx=%t2333
      %t2349 = load_input "income" :: float
      %t2350 = load_input "fed" :: any
      %t2351 = load_field t2350["married_separate"] :: any
      %t2352 = load_field t2351["std"] :: float
      %t2353 = call core.sub(%t2349, %t2352) :: float
      %t2354 = const 0 :: integer
      %t2355 = make_tuple(%t2353, %t2354) :: tuple<float, integer>
      %t2356 = fold %t2355 fn="agg.max" :: float
      %t2338 = load_input "fed" :: array
      %t2339 = load_field t2338["married_separate"] :: any
      %t2340 = load_field t2339["rates"] :: any
      %t2357 = load_input "fed" :: array
      %t2358 = load_field t2357["married_separate"] :: any
      %t2359 = load_field t2358["rates"] :: any
      %t2360 = load_field t2332["lo"] :: float
      %t2343 = call core.sub(%t2356, %t2360) :: float
      %t2344 = const 0 :: integer
      %t2361 = load_input "fed" :: array
      %t2362 = load_field t2361["married_separate"] :: any
      %t2363 = load_field t2362["rates"] :: any
      %t2370 = load_input "fed" :: array
      %t2371 = load_field t2370["married_separate"] :: any
      %t2372 = load_field t2371["rates"] :: any
      %t2373 = load_field t2332["hi"] :: float
      %t2365 = const -1 :: integer
      %t2366 = call core.eq(%t2373, %t2365) :: boolean
      %t2367 = const 100000000000.0 :: float
      %t2374 = load_input "fed" :: array
      %t2375 = load_field t2374["married_separate"] :: any
      %t2376 = load_field t2375["rates"] :: any
      %t2377 = load_field t2332["hi"] :: float
      %t2369 = select %t2366, %t2367, %t2377 :: float
      %t2378 = load_input "fed" :: array
      %t2379 = load_field t2378["married_separate"] :: any
      %t2380 = load_field t2379["rates"] :: any
      %t2381 = load_field t2332["lo"] :: float
      %t2347 = call core.sub(%t2369, %t2381) :: float
      %t2348 = call core.clamp(%t2343, %t2344, %t2347) :: float
      %t2382 = load_input "fed" :: array
      %t2383 = load_field t2382["married_separate"] :: any
      %t2384 = load_field t2383["rates"] :: any
      %t2385 = load_field t2332["rate"] :: float
      %t2336 = call core.mul(%t2348, %t2385) :: float
      %acc2328 = acc_add agg.sum(%acc2328, %t2336) :: float
    end_loop
    %t2337 = acc_load %acc2328 :: float
    %t2392 = load_input "income" :: float
    %t2393 = const 168600.0 :: float
    %t2394 = make_tuple(%t2392, %t2393) :: tuple<float>
    %t2395 = fold %t2394 fn="agg.min" :: float
    %t2396 = const 0.062 :: float
    %t2397 = call core.mul(%t2395, %t2396) :: float
    %t2399 = load_input "income" :: float
    %t2400 = const 0.0145 :: float
    %t2401 = call core.mul(%t2399, %t2400) :: float
    %t2388 = call core.add(%t2397, %t2401) :: float
    %t2402 = load_input "income" :: float
    %t2403 = const 125000.0 :: float
    %t2404 = call core.sub(%t2402, %t2403) :: float
    %t2405 = const 0 :: integer
    %t2406 = make_tuple(%t2404, %t2405) :: tuple<float, integer>
    %t2407 = fold %t2406 fn="agg.max" :: float
    %t2408 = const 0.009 :: float
    %t2409 = call core.mul(%t2407, %t2408) :: float
    %t2390 = call core.add(%t2388, %t2409) :: float
    %t2322 = call core.add(%t2337, %t2390) :: float
    %t2410 = load_input "income" :: float
    %t2411 = load_input "state_rate" :: float
    %t2412 = call core.mul(%t2410, %t2411) :: float
    %t2324 = call core.add(%t2322, %t2412) :: float
    %t2413 = load_input "income" :: float
    %t2414 = load_input "local_rate" :: float
    %t2415 = call core.mul(%t2413, %t2414) :: float
    %t2326 = call core.add(%t2324, %t2415) :: float
    %t398 = load_input "income" :: float
    %t399 = const 1.0 :: float
    %t400 = make_tuple(%t398, %t399) :: tuple<float>
    %t401 = fold %t400 fn="agg.max" :: float
    %t402 = call core.div(%t2326, %t401) :: float
    yield %t402
  )
  (Declaration after_tax_ms
    %t403 = load_input "income" :: float
    %acc2424 = decl_acc :: float
    %t2425 = load_input "fed" :: array
    %t2426 = load_field t2425["married_separate"] :: any
    %t2427 = load_field t2426["rates"] :: any
    loop rates id=L46 in %t2427 as el=%t2428, idx=%t2429
      %t2445 = load_input "income" :: float
      %t2446 = load_input "fed" :: any
      %t2447 = load_field t2446["married_separate"] :: any
      %t2448 = load_field t2447["std"] :: float
      %t2449 = call core.sub(%t2445, %t2448) :: float
      %t2450 = const 0 :: integer
      %t2451 = make_tuple(%t2449, %t2450) :: tuple<float, integer>
      %t2452 = fold %t2451 fn="agg.max" :: float
      %t2434 = load_input "fed" :: array
      %t2435 = load_field t2434["married_separate"] :: any
      %t2436 = load_field t2435["rates"] :: any
      %t2453 = load_input "fed" :: array
      %t2454 = load_field t2453["married_separate"] :: any
      %t2455 = load_field t2454["rates"] :: any
      %t2456 = load_field t2428["lo"] :: float
      %t2439 = call core.sub(%t2452, %t2456) :: float
      %t2440 = const 0 :: integer
      %t2457 = load_input "fed" :: array
      %t2458 = load_field t2457["married_separate"] :: any
      %t2459 = load_field t2458["rates"] :: any
      %t2466 = load_input "fed" :: array
      %t2467 = load_field t2466["married_separate"] :: any
      %t2468 = load_field t2467["rates"] :: any
      %t2469 = load_field t2428["hi"] :: float
      %t2461 = const -1 :: integer
      %t2462 = call core.eq(%t2469, %t2461) :: boolean
      %t2463 = const 100000000000.0 :: float
      %t2470 = load_input "fed" :: array
      %t2471 = load_field t2470["married_separate"] :: any
      %t2472 = load_field t2471["rates"] :: any
      %t2473 = load_field t2428["hi"] :: float
      %t2465 = select %t2462, %t2463, %t2473 :: float
      %t2474 = load_input "fed" :: array
      %t2475 = load_field t2474["married_separate"] :: any
      %t2476 = load_field t2475["rates"] :: any
      %t2477 = load_field t2428["lo"] :: float
      %t2443 = call core.sub(%t2465, %t2477) :: float
      %t2444 = call core.clamp(%t2439, %t2440, %t2443) :: float
      %t2478 = load_input "fed" :: array
      %t2479 = load_field t2478["married_separate"] :: any
      %t2480 = load_field t2479["rates"] :: any
      %t2481 = load_field t2428["rate"] :: float
      %t2432 = call core.mul(%t2444, %t2481) :: float
      %acc2424 = acc_add agg.sum(%acc2424, %t2432) :: float
    end_loop
    %t2433 = acc_load %acc2424 :: float
    %t2488 = load_input "income" :: float
    %t2489 = const 168600.0 :: float
    %t2490 = make_tuple(%t2488, %t2489) :: tuple<float>
    %t2491 = fold %t2490 fn="agg.min" :: float
    %t2492 = const 0.062 :: float
    %t2493 = call core.mul(%t2491, %t2492) :: float
    %t2495 = load_input "income" :: float
    %t2496 = const 0.0145 :: float
    %t2497 = call core.mul(%t2495, %t2496) :: float
    %t2484 = call core.add(%t2493, %t2497) :: float
    %t2498 = load_input "income" :: float
    %t2499 = const 125000.0 :: float
    %t2500 = call core.sub(%t2498, %t2499) :: float
    %t2501 = const 0 :: integer
    %t2502 = make_tuple(%t2500, %t2501) :: tuple<float, integer>
    %t2503 = fold %t2502 fn="agg.max" :: float
    %t2504 = const 0.009 :: float
    %t2505 = call core.mul(%t2503, %t2504) :: float
    %t2486 = call core.add(%t2484, %t2505) :: float
    %t2418 = call core.add(%t2433, %t2486) :: float
    %t2506 = load_input "income" :: float
    %t2507 = load_input "state_rate" :: float
    %t2508 = call core.mul(%t2506, %t2507) :: float
    %t2420 = call core.add(%t2418, %t2508) :: float
    %t2509 = load_input "income" :: float
    %t2510 = load_input "local_rate" :: float
    %t2511 = call core.mul(%t2509, %t2510) :: float
    %t2422 = call core.add(%t2420, %t2511) :: float
    %t405 = call core.sub(%t403, %t2422) :: float
    yield %t405
  )
  (Declaration take_home_ms
    %t2512 = load_input "income" :: float
    %acc2523 = decl_acc :: float
    %t2524 = load_input "fed" :: array
    %t2525 = load_field t2524["married_separate"] :: any
    %t2526 = load_field t2525["rates"] :: any
    loop rates id=L47 in %t2526 as el=%t2527, idx=%t2528
      %t2544 = load_input "income" :: float
      %t2545 = load_input "fed" :: any
      %t2546 = load_field t2545["married_separate"] :: any
      %t2547 = load_field t2546["std"] :: float
      %t2548 = call core.sub(%t2544, %t2547) :: float
      %t2549 = const 0 :: integer
      %t2550 = make_tuple(%t2548, %t2549) :: tuple<float, integer>
      %t2551 = fold %t2550 fn="agg.max" :: float
      %t2533 = load_input "fed" :: array
      %t2534 = load_field t2533["married_separate"] :: any
      %t2535 = load_field t2534["rates"] :: any
      %t2552 = load_input "fed" :: array
      %t2553 = load_field t2552["married_separate"] :: any
      %t2554 = load_field t2553["rates"] :: any
      %t2555 = load_field t2527["lo"] :: float
      %t2538 = call core.sub(%t2551, %t2555) :: float
      %t2539 = const 0 :: integer
      %t2556 = load_input "fed" :: array
      %t2557 = load_field t2556["married_separate"] :: any
      %t2558 = load_field t2557["rates"] :: any
      %t2565 = load_input "fed" :: array
      %t2566 = load_field t2565["married_separate"] :: any
      %t2567 = load_field t2566["rates"] :: any
      %t2568 = load_field t2527["hi"] :: float
      %t2560 = const -1 :: integer
      %t2561 = call core.eq(%t2568, %t2560) :: boolean
      %t2562 = const 100000000000.0 :: float
      %t2569 = load_input "fed" :: array
      %t2570 = load_field t2569["married_separate"] :: any
      %t2571 = load_field t2570["rates"] :: any
      %t2572 = load_field t2527["hi"] :: float
      %t2564 = select %t2561, %t2562, %t2572 :: float
      %t2573 = load_input "fed" :: array
      %t2574 = load_field t2573["married_separate"] :: any
      %t2575 = load_field t2574["rates"] :: any
      %t2576 = load_field t2527["lo"] :: float
      %t2542 = call core.sub(%t2564, %t2576) :: float
      %t2543 = call core.clamp(%t2538, %t2539, %t2542) :: float
      %t2577 = load_input "fed" :: array
      %t2578 = load_field t2577["married_separate"] :: any
      %t2579 = load_field t2578["rates"] :: any
      %t2580 = load_field t2527["rate"] :: float
      %t2531 = call core.mul(%t2543, %t2580) :: float
      %acc2523 = acc_add agg.sum(%acc2523, %t2531) :: float
    end_loop
    %t2532 = acc_load %acc2523 :: float
    %t2587 = load_input "income" :: float
    %t2588 = const 168600.0 :: float
    %t2589 = make_tuple(%t2587, %t2588) :: tuple<float>
    %t2590 = fold %t2589 fn="agg.min" :: float
    %t2591 = const 0.062 :: float
    %t2592 = call core.mul(%t2590, %t2591) :: float
    %t2594 = load_input "income" :: float
    %t2595 = const 0.0145 :: float
    %t2596 = call core.mul(%t2594, %t2595) :: float
    %t2583 = call core.add(%t2592, %t2596) :: float
    %t2597 = load_input "income" :: float
    %t2598 = const 125000.0 :: float
    %t2599 = call core.sub(%t2597, %t2598) :: float
    %t2600 = const 0 :: integer
    %t2601 = make_tuple(%t2599, %t2600) :: tuple<float, integer>
    %t2602 = fold %t2601 fn="agg.max" :: float
    %t2603 = const 0.009 :: float
    %t2604 = call core.mul(%t2602, %t2603) :: float
    %t2585 = call core.add(%t2583, %t2604) :: float
    %t2517 = call core.add(%t2532, %t2585) :: float
    %t2605 = load_input "income" :: float
    %t2606 = load_input "state_rate" :: float
    %t2607 = call core.mul(%t2605, %t2606) :: float
    %t2519 = call core.add(%t2517, %t2607) :: float
    %t2608 = load_input "income" :: float
    %t2609 = load_input "local_rate" :: float
    %t2610 = call core.mul(%t2608, %t2609) :: float
    %t2521 = call core.add(%t2519, %t2610) :: float
    %t2514 = call core.sub(%t2512, %t2521) :: float
    %t407 = load_input "retirement_contrib" :: float
    %t408 = call core.sub(%t2514, %t407) :: float
    yield %t408
  )
  (Declaration taxable_hoh
    %t409 = load_input "income" :: float
    %t410 = load_input "fed" :: any
    %t411 = load_field t410["head_of_household"] :: any
    %t412 = load_field t411["std"] :: float
    %t413 = call core.sub(%t409, %t412) :: float
    %t414 = const 0 :: integer
    %t415 = make_tuple(%t413, %t414) :: tuple<float, integer>
    %t416 = fold %t415 fn="agg.max" :: float
    yield %t416
  )
  (Declaration lo_h
    %t417 = load_input "fed" :: array
    %t418 = load_field t417["head_of_household"] :: any
    %t419 = load_field t418["rates"] :: any
    loop rates id=L25 in %t419 as el=%rates_el_420, idx=%rates_i_421
      %t422 = load_field rates_el_420["lo"] :: float
      yield %t422
    end_loop
  )
  (Declaration hi_h
    %t423 = load_input "fed" :: array
    %t424 = load_field t423["head_of_household"] :: any
    %t425 = load_field t424["rates"] :: any
    loop rates id=L26 in %t425 as el=%rates_el_426, idx=%rates_i_427
      %t428 = load_field rates_el_426["hi"] :: float
      yield %t428
    end_loop
  )
  (Declaration rate_h
    %t429 = load_input "fed" :: array
    %t430 = load_field t429["head_of_household"] :: any
    %t431 = load_field t430["rates"] :: any
    loop rates id=L27 in %t431 as el=%rates_el_432, idx=%rates_i_433
      %t434 = load_field rates_el_432["rate"] :: float
      yield %t434
    end_loop
  )
  (Declaration hi_h_eff
    %t435 = load_input "fed" :: array
    %t436 = load_field t435["head_of_household"] :: any
    %t437 = load_field t436["rates"] :: any
    loop rates id=L28 in %t437 as el=%rates_el_438, idx=%rates_i_439
      %t2611 = load_input "fed" :: array
      %t2612 = load_field t2611["head_of_household"] :: any
      %t2613 = load_field t2612["rates"] :: any
      %t2614 = load_field rates_el_438["hi"] :: float
      %t441 = const -1 :: integer
      %t442 = call core.eq(%t2614, %t441) :: boolean
      %t443 = const 100000000000.0 :: float
      %t2615 = load_input "fed" :: array
      %t2616 = load_field t2615["head_of_household"] :: any
      %t2617 = load_field t2616["rates"] :: any
      %t2618 = load_field rates_el_438["hi"] :: float
      %t445 = select %t442, %t443, %t2618 :: float
      yield %t445
    end_loop
  )
  (Declaration amt_h
    %t446 = load_input "fed" :: array
    %t447 = load_field t446["head_of_household"] :: any
    %t448 = load_field t447["rates"] :: any
    %t2619 = load_input "income" :: float
    %t2620 = load_input "fed" :: any
    %t2621 = load_field t2620["head_of_household"] :: any
    %t2622 = load_field t2621["std"] :: float
    %t2623 = call core.sub(%t2619, %t2622) :: float
    %t2624 = const 0 :: integer
    %t2625 = make_tuple(%t2623, %t2624) :: tuple<float, integer>
    %t2626 = fold %t2625 fn="agg.max" :: float
    loop rates id=L29 in %t448 as el=%rates_el_449, idx=%rates_i_450
      %t2627 = load_input "fed" :: array
      %t2628 = load_field t2627["head_of_household"] :: any
      %t2629 = load_field t2628["rates"] :: any
      %t2630 = load_field rates_el_449["lo"] :: float
      %t453 = call core.sub(%t451, %t2630) :: float
      %t454 = const 0 :: integer
      %t2631 = load_input "fed" :: array
      %t2632 = load_field t2631["head_of_household"] :: any
      %t2633 = load_field t2632["rates"] :: any
      %t2640 = load_input "fed" :: array
      %t2641 = load_field t2640["head_of_household"] :: any
      %t2642 = load_field t2641["rates"] :: any
      %t2643 = load_field rates_el_449["hi"] :: float
      %t2635 = const -1 :: integer
      %t2636 = call core.eq(%t2643, %t2635) :: boolean
      %t2637 = const 100000000000.0 :: float
      %t2644 = load_input "fed" :: array
      %t2645 = load_field t2644["head_of_household"] :: any
      %t2646 = load_field t2645["rates"] :: any
      %t2647 = load_field rates_el_449["hi"] :: float
      %t2639 = select %t2636, %t2637, %t2647 :: float
      %t2648 = load_input "fed" :: array
      %t2649 = load_field t2648["head_of_household"] :: any
      %t2650 = load_field t2649["rates"] :: any
      %t2651 = load_field rates_el_449["lo"] :: float
      %t457 = call core.sub(%t2639, %t2651) :: float
      %t458 = call core.clamp(%t453, %t454, %t457) :: float
      yield %t458
    end_loop
  )
  (Declaration fed_tax_hoh
    %acc_459 = decl_acc :: float
    %t460 = load_input "fed" :: array
    %t461 = load_field t460["head_of_household"] :: any
    %t462 = load_field t461["rates"] :: any
    loop rates id=L30 in %t462 as el=%rates_el_463, idx=%rates_i_464
      %t2663 = load_input "income" :: float
      %t2664 = load_input "fed" :: any
      %t2665 = load_field t2664["head_of_household"] :: any
      %t2666 = load_field t2665["std"] :: float
      %t2667 = call core.sub(%t2663, %t2666) :: float
      %t2668 = const 0 :: integer
      %t2669 = make_tuple(%t2667, %t2668) :: tuple<float, integer>
      %t2670 = fold %t2669 fn="agg.max" :: float
      %t2652 = load_input "fed" :: array
      %t2653 = load_field t2652["head_of_household"] :: any
      %t2654 = load_field t2653["rates"] :: any
      %t2671 = load_input "fed" :: array
      %t2672 = load_field t2671["head_of_household"] :: any
      %t2673 = load_field t2672["rates"] :: any
      %t2674 = load_field rates_el_463["lo"] :: float
      %t2657 = call core.sub(%t2670, %t2674) :: float
      %t2658 = const 0 :: integer
      %t2675 = load_input "fed" :: array
      %t2676 = load_field t2675["head_of_household"] :: any
      %t2677 = load_field t2676["rates"] :: any
      %t2684 = load_input "fed" :: array
      %t2685 = load_field t2684["head_of_household"] :: any
      %t2686 = load_field t2685["rates"] :: any
      %t2687 = load_field rates_el_463["hi"] :: float
      %t2679 = const -1 :: integer
      %t2680 = call core.eq(%t2687, %t2679) :: boolean
      %t2681 = const 100000000000.0 :: float
      %t2688 = load_input "fed" :: array
      %t2689 = load_field t2688["head_of_household"] :: any
      %t2690 = load_field t2689["rates"] :: any
      %t2691 = load_field rates_el_463["hi"] :: float
      %t2683 = select %t2680, %t2681, %t2691 :: float
      %t2692 = load_input "fed" :: array
      %t2693 = load_field t2692["head_of_household"] :: any
      %t2694 = load_field t2693["rates"] :: any
      %t2695 = load_field rates_el_463["lo"] :: float
      %t2661 = call core.sub(%t2683, %t2695) :: float
      %t2662 = call core.clamp(%t2657, %t2658, %t2661) :: float
      %t2696 = load_input "fed" :: array
      %t2697 = load_field t2696["head_of_household"] :: any
      %t2698 = load_field t2697["rates"] :: any
      %t2699 = load_field rates_el_463["rate"] :: float
      %t467 = call core.mul(%t2662, %t2699) :: float
      %acc_459 = acc_add agg.sum(%acc_459, %t467) :: float
    end_loop
    %t468 = acc_load %acc_459 :: float
    yield %t468
  )
  (Declaration in_br_h
    %t469 = load_input "fed" :: array
    %t470 = load_field t469["head_of_household"] :: any
    %t471 = load_field t470["rates"] :: any
    %t2700 = load_input "income" :: float
    %t2701 = load_input "fed" :: any
    %t2702 = load_field t2701["head_of_household"] :: any
    %t2703 = load_field t2702["std"] :: float
    %t2704 = call core.sub(%t2700, %t2703) :: float
    %t2705 = const 0 :: integer
    %t2706 = make_tuple(%t2704, %t2705) :: tuple<float, integer>
    %t2707 = fold %t2706 fn="agg.max" :: float
    %t2708 = load_input "income" :: float
    %t2709 = load_input "fed" :: any
    %t2710 = load_field t2709["head_of_household"] :: any
    %t2711 = load_field t2710["std"] :: float
    %t2712 = call core.sub(%t2708, %t2711) :: float
    %t2713 = const 0 :: integer
    %t2714 = make_tuple(%t2712, %t2713) :: tuple<float, integer>
    %t2715 = fold %t2714 fn="agg.max" :: float
    loop rates id=L31 in %t471 as el=%rates_el_472, idx=%rates_i_473
      %t2716 = load_input "fed" :: array
      %t2717 = load_field t2716["head_of_household"] :: any
      %t2718 = load_field t2717["rates"] :: any
      %t2719 = load_field rates_el_472["lo"] :: float
      %t476 = call core.gte(%t474, %t2719) :: boolean
      %t2720 = load_input "fed" :: array
      %t2721 = load_field t2720["head_of_household"] :: any
      %t2722 = load_field t2721["rates"] :: any
      %t2729 = load_input "fed" :: array
      %t2730 = load_field t2729["head_of_household"] :: any
      %t2731 = load_field t2730["rates"] :: any
      %t2732 = load_field rates_el_472["hi"] :: float
      %t2724 = const -1 :: integer
      %t2725 = call core.eq(%t2732, %t2724) :: boolean
      %t2726 = const 100000000000.0 :: float
      %t2733 = load_input "fed" :: array
      %t2734 = load_field t2733["head_of_household"] :: any
      %t2735 = load_field t2734["rates"] :: any
      %t2736 = load_field rates_el_472["hi"] :: float
      %t2728 = select %t2725, %t2726, %t2736 :: float
      %t479 = call core.lt(%t477, %t2728) :: boolean
      %t480 = call core.and(%t476, %t479) :: boolean
      yield %t480
    end_loop
  )
  (Declaration fed_marginal_hoh
    %acc_481 = decl_acc :: float
    %t482 = load_input "fed" :: array
    %t483 = load_field t482["head_of_household"] :: any
    %t484 = load_field t483["rates"] :: any
    loop rates id=L32 in %t484 as el=%rates_el_485, idx=%rates_i_486
      %t2747 = load_input "income" :: float
      %t2748 = load_input "fed" :: any
      %t2749 = load_field t2748["head_of_household"] :: any
      %t2750 = load_field t2749["std"] :: float
      %t2751 = call core.sub(%t2747, %t2750) :: float
      %t2752 = const 0 :: integer
      %t2753 = make_tuple(%t2751, %t2752) :: tuple<float, integer>
      %t2754 = fold %t2753 fn="agg.max" :: float
      %t2755 = load_input "income" :: float
      %t2756 = load_input "fed" :: any
      %t2757 = load_field t2756["head_of_household"] :: any
      %t2758 = load_field t2757["std"] :: float
      %t2759 = call core.sub(%t2755, %t2758) :: float
      %t2760 = const 0 :: integer
      %t2761 = make_tuple(%t2759, %t2760) :: tuple<float, integer>
      %t2762 = fold %t2761 fn="agg.max" :: float
      %t2737 = load_input "fed" :: array
      %t2738 = load_field t2737["head_of_household"] :: any
      %t2739 = load_field t2738["rates"] :: any
      %t2763 = load_input "fed" :: array
      %t2764 = load_field t2763["head_of_household"] :: any
      %t2765 = load_field t2764["rates"] :: any
      %t2766 = load_field rates_el_485["lo"] :: float
      %t2743 = call core.gte(%t2754, %t2766) :: boolean
      %t2767 = load_input "fed" :: array
      %t2768 = load_field t2767["head_of_household"] :: any
      %t2769 = load_field t2768["rates"] :: any
      %t2776 = load_input "fed" :: array
      %t2777 = load_field t2776["head_of_household"] :: any
      %t2778 = load_field t2777["rates"] :: any
      %t2779 = load_field rates_el_485["hi"] :: float
      %t2771 = const -1 :: integer
      %t2772 = call core.eq(%t2779, %t2771) :: boolean
      %t2773 = const 100000000000.0 :: float
      %t2780 = load_input "fed" :: array
      %t2781 = load_field t2780["head_of_household"] :: any
      %t2782 = load_field t2781["rates"] :: any
      %t2783 = load_field rates_el_485["hi"] :: float
      %t2775 = select %t2772, %t2773, %t2783 :: float
      %t2745 = call core.lt(%t2762, %t2775) :: boolean
      %t2746 = call core.and(%t2743, %t2745) :: boolean
      %t2784 = load_input "fed" :: array
      %t2785 = load_field t2784["head_of_household"] :: any
      %t2786 = load_field t2785["rates"] :: any
      %t2787 = load_field rates_el_485["rate"] :: float
      %t489 = const 0 :: integer
      %t490 = select %t2746, %t2787, %t489 :: float
      %acc_481 = acc_add agg.sum(%acc_481, %t490) :: float
    end_loop
    %t491 = acc_load %acc_481 :: float
    yield %t491
  )
  (Declaration fed_eff_hoh
    %acc2789 = decl_acc :: float
    %t2790 = load_input "fed" :: array
    %t2791 = load_field t2790["head_of_household"] :: any
    %t2792 = load_field t2791["rates"] :: any
    loop rates id=L48 in %t2792 as el=%t2793, idx=%t2794
      %t2810 = load_input "income" :: float
      %t2811 = load_input "fed" :: any
      %t2812 = load_field t2811["head_of_household"] :: any
      %t2813 = load_field t2812["std"] :: float
      %t2814 = call core.sub(%t2810, %t2813) :: float
      %t2815 = const 0 :: integer
      %t2816 = make_tuple(%t2814, %t2815) :: tuple<float, integer>
      %t2817 = fold %t2816 fn="agg.max" :: float
      %t2799 = load_input "fed" :: array
      %t2800 = load_field t2799["head_of_household"] :: any
      %t2801 = load_field t2800["rates"] :: any
      %t2818 = load_input "fed" :: array
      %t2819 = load_field t2818["head_of_household"] :: any
      %t2820 = load_field t2819["rates"] :: any
      %t2821 = load_field t2793["lo"] :: float
      %t2804 = call core.sub(%t2817, %t2821) :: float
      %t2805 = const 0 :: integer
      %t2822 = load_input "fed" :: array
      %t2823 = load_field t2822["head_of_household"] :: any
      %t2824 = load_field t2823["rates"] :: any
      %t2831 = load_input "fed" :: array
      %t2832 = load_field t2831["head_of_household"] :: any
      %t2833 = load_field t2832["rates"] :: any
      %t2834 = load_field t2793["hi"] :: float
      %t2826 = const -1 :: integer
      %t2827 = call core.eq(%t2834, %t2826) :: boolean
      %t2828 = const 100000000000.0 :: float
      %t2835 = load_input "fed" :: array
      %t2836 = load_field t2835["head_of_household"] :: any
      %t2837 = load_field t2836["rates"] :: any
      %t2838 = load_field t2793["hi"] :: float
      %t2830 = select %t2827, %t2828, %t2838 :: float
      %t2839 = load_input "fed" :: array
      %t2840 = load_field t2839["head_of_household"] :: any
      %t2841 = load_field t2840["rates"] :: any
      %t2842 = load_field t2793["lo"] :: float
      %t2808 = call core.sub(%t2830, %t2842) :: float
      %t2809 = call core.clamp(%t2804, %t2805, %t2808) :: float
      %t2843 = load_input "fed" :: array
      %t2844 = load_field t2843["head_of_household"] :: any
      %t2845 = load_field t2844["rates"] :: any
      %t2846 = load_field t2793["rate"] :: float
      %t2797 = call core.mul(%t2809, %t2846) :: float
      %acc2789 = acc_add agg.sum(%acc2789, %t2797) :: float
    end_loop
    %t2798 = acc_load %acc2789 :: float
    %t493 = load_input "income" :: float
    %t494 = const 1.0 :: float
    %t495 = make_tuple(%t493, %t494) :: tuple<float>
    %t496 = fold %t495 fn="agg.max" :: float
    %t497 = call core.div(%t2798, %t496) :: float
    yield %t497
  )
  (Declaration ss_tax_h
    %t2847 = load_input "income" :: float
    %t2848 = const 168600.0 :: float
    %t2849 = make_tuple(%t2847, %t2848) :: tuple<float>
    %t2850 = fold %t2849 fn="agg.min" :: float
    %t2851 = const 0.062 :: float
    %t2852 = call core.mul(%t2850, %t2851) :: float
    yield %t2852
  )
  (Declaration med_tax_h
    %t2853 = load_input "income" :: float
    %t2854 = const 0.0145 :: float
    %t2855 = call core.mul(%t2853, %t2854) :: float
    yield %t2855
  )
  (Declaration addl_threshold_hoh
    %t500 = const 200000.0 :: float
    yield %t500
  )
  (Declaration addl_med_tax_h
    %t501 = load_input "income" :: float
    %t502 = const 200000.0 :: float
    %t503 = call core.sub(%t501, %t502) :: float
    %t504 = const 0 :: integer
    %t505 = make_tuple(%t503, %t504) :: tuple<float, integer>
    %t506 = fold %t505 fn="agg.max" :: float
    %t507 = const 0.009 :: float
    %t508 = call core.mul(%t506, %t507) :: float
    yield %t508
  )
  (Declaration fica_tax_hoh
    %t2857 = load_input "income" :: float
    %t2858 = const 168600.0 :: float
    %t2859 = make_tuple(%t2857, %t2858) :: tuple<float>
    %t2860 = fold %t2859 fn="agg.min" :: float
    %t2861 = const 0.062 :: float
    %t2862 = call core.mul(%t2860, %t2861) :: float
    %t2864 = load_input "income" :: float
    %t2865 = const 0.0145 :: float
    %t2866 = call core.mul(%t2864, %t2865) :: float
    %t511 = call core.add(%t2862, %t2866) :: float
    %t2867 = load_input "income" :: float
    %t2868 = const 200000.0 :: float
    %t2869 = call core.sub(%t2867, %t2868) :: float
    %t2870 = const 0 :: integer
    %t2871 = make_tuple(%t2869, %t2870) :: tuple<float, integer>
    %t2872 = fold %t2871 fn="agg.max" :: float
    %t2873 = const 0.009 :: float
    %t2874 = call core.mul(%t2872, %t2873) :: float
    %t513 = call core.add(%t511, %t2874) :: float
    yield %t513
  )
  (Declaration fica_eff_hoh
    %t2881 = load_input "income" :: float
    %t2882 = const 168600.0 :: float
    %t2883 = make_tuple(%t2881, %t2882) :: tuple<float>
    %t2884 = fold %t2883 fn="agg.min" :: float
    %t2885 = const 0.062 :: float
    %t2886 = call core.mul(%t2884, %t2885) :: float
    %t2888 = load_input "income" :: float
    %t2889 = const 0.0145 :: float
    %t2890 = call core.mul(%t2888, %t2889) :: float
    %t2877 = call core.add(%t2886, %t2890) :: float
    %t2891 = load_input "income" :: float
    %t2892 = const 200000.0 :: float
    %t2893 = call core.sub(%t2891, %t2892) :: float
    %t2894 = const 0 :: integer
    %t2895 = make_tuple(%t2893, %t2894) :: tuple<float, integer>
    %t2896 = fold %t2895 fn="agg.max" :: float
    %t2897 = const 0.009 :: float
    %t2898 = call core.mul(%t2896, %t2897) :: float
    %t2879 = call core.add(%t2877, %t2898) :: float
    %t515 = load_input "income" :: float
    %t516 = const 1.0 :: float
    %t517 = make_tuple(%t515, %t516) :: tuple<float>
    %t518 = fold %t517 fn="agg.max" :: float
    %t519 = call core.div(%t2879, %t518) :: float
    yield %t519
  )
  (Declaration total_tax_hoh
    %acc2900 = decl_acc :: float
    %t2901 = load_input "fed" :: array
    %t2902 = load_field t2901["head_of_household"] :: any
    %t2903 = load_field t2902["rates"] :: any
    loop rates id=L49 in %t2903 as el=%t2904, idx=%t2905
      %t2921 = load_input "income" :: float
      %t2922 = load_input "fed" :: any
      %t2923 = load_field t2922["head_of_household"] :: any
      %t2924 = load_field t2923["std"] :: float
      %t2925 = call core.sub(%t2921, %t2924) :: float
      %t2926 = const 0 :: integer
      %t2927 = make_tuple(%t2925, %t2926) :: tuple<float, integer>
      %t2928 = fold %t2927 fn="agg.max" :: float
      %t2910 = load_input "fed" :: array
      %t2911 = load_field t2910["head_of_household"] :: any
      %t2912 = load_field t2911["rates"] :: any
      %t2929 = load_input "fed" :: array
      %t2930 = load_field t2929["head_of_household"] :: any
      %t2931 = load_field t2930["rates"] :: any
      %t2932 = load_field t2904["lo"] :: float
      %t2915 = call core.sub(%t2928, %t2932) :: float
      %t2916 = const 0 :: integer
      %t2933 = load_input "fed" :: array
      %t2934 = load_field t2933["head_of_household"] :: any
      %t2935 = load_field t2934["rates"] :: any
      %t2942 = load_input "fed" :: array
      %t2943 = load_field t2942["head_of_household"] :: any
      %t2944 = load_field t2943["rates"] :: any
      %t2945 = load_field t2904["hi"] :: float
      %t2937 = const -1 :: integer
      %t2938 = call core.eq(%t2945, %t2937) :: boolean
      %t2939 = const 100000000000.0 :: float
      %t2946 = load_input "fed" :: array
      %t2947 = load_field t2946["head_of_household"] :: any
      %t2948 = load_field t2947["rates"] :: any
      %t2949 = load_field t2904["hi"] :: float
      %t2941 = select %t2938, %t2939, %t2949 :: float
      %t2950 = load_input "fed" :: array
      %t2951 = load_field t2950["head_of_household"] :: any
      %t2952 = load_field t2951["rates"] :: any
      %t2953 = load_field t2904["lo"] :: float
      %t2919 = call core.sub(%t2941, %t2953) :: float
      %t2920 = call core.clamp(%t2915, %t2916, %t2919) :: float
      %t2954 = load_input "fed" :: array
      %t2955 = load_field t2954["head_of_household"] :: any
      %t2956 = load_field t2955["rates"] :: any
      %t2957 = load_field t2904["rate"] :: float
      %t2908 = call core.mul(%t2920, %t2957) :: float
      %acc2900 = acc_add agg.sum(%acc2900, %t2908) :: float
    end_loop
    %t2909 = acc_load %acc2900 :: float
    %t2964 = load_input "income" :: float
    %t2965 = const 168600.0 :: float
    %t2966 = make_tuple(%t2964, %t2965) :: tuple<float>
    %t2967 = fold %t2966 fn="agg.min" :: float
    %t2968 = const 0.062 :: float
    %t2969 = call core.mul(%t2967, %t2968) :: float
    %t2971 = load_input "income" :: float
    %t2972 = const 0.0145 :: float
    %t2973 = call core.mul(%t2971, %t2972) :: float
    %t2960 = call core.add(%t2969, %t2973) :: float
    %t2974 = load_input "income" :: float
    %t2975 = const 200000.0 :: float
    %t2976 = call core.sub(%t2974, %t2975) :: float
    %t2977 = const 0 :: integer
    %t2978 = make_tuple(%t2976, %t2977) :: tuple<float, integer>
    %t2979 = fold %t2978 fn="agg.max" :: float
    %t2980 = const 0.009 :: float
    %t2981 = call core.mul(%t2979, %t2980) :: float
    %t2962 = call core.add(%t2960, %t2981) :: float
    %t522 = call core.add(%t2909, %t2962) :: float
    %t2982 = load_input "income" :: float
    %t2983 = load_input "state_rate" :: float
    %t2984 = call core.mul(%t2982, %t2983) :: float
    %t524 = call core.add(%t522, %t2984) :: float
    %t2985 = load_input "income" :: float
    %t2986 = load_input "local_rate" :: float
    %t2987 = call core.mul(%t2985, %t2986) :: float
    %t526 = call core.add(%t524, %t2987) :: float
    yield %t526
  )
  (Declaration total_eff_hoh
    %acc2996 = decl_acc :: float
    %t2997 = load_input "fed" :: array
    %t2998 = load_field t2997["head_of_household"] :: any
    %t2999 = load_field t2998["rates"] :: any
    loop rates id=L50 in %t2999 as el=%t3000, idx=%t3001
      %t3017 = load_input "income" :: float
      %t3018 = load_input "fed" :: any
      %t3019 = load_field t3018["head_of_household"] :: any
      %t3020 = load_field t3019["std"] :: float
      %t3021 = call core.sub(%t3017, %t3020) :: float
      %t3022 = const 0 :: integer
      %t3023 = make_tuple(%t3021, %t3022) :: tuple<float, integer>
      %t3024 = fold %t3023 fn="agg.max" :: float
      %t3006 = load_input "fed" :: array
      %t3007 = load_field t3006["head_of_household"] :: any
      %t3008 = load_field t3007["rates"] :: any
      %t3025 = load_input "fed" :: array
      %t3026 = load_field t3025["head_of_household"] :: any
      %t3027 = load_field t3026["rates"] :: any
      %t3028 = load_field t3000["lo"] :: float
      %t3011 = call core.sub(%t3024, %t3028) :: float
      %t3012 = const 0 :: integer
      %t3029 = load_input "fed" :: array
      %t3030 = load_field t3029["head_of_household"] :: any
      %t3031 = load_field t3030["rates"] :: any
      %t3038 = load_input "fed" :: array
      %t3039 = load_field t3038["head_of_household"] :: any
      %t3040 = load_field t3039["rates"] :: any
      %t3041 = load_field t3000["hi"] :: float
      %t3033 = const -1 :: integer
      %t3034 = call core.eq(%t3041, %t3033) :: boolean
      %t3035 = const 100000000000.0 :: float
      %t3042 = load_input "fed" :: array
      %t3043 = load_field t3042["head_of_household"] :: any
      %t3044 = load_field t3043["rates"] :: any
      %t3045 = load_field t3000["hi"] :: float
      %t3037 = select %t3034, %t3035, %t3045 :: float
      %t3046 = load_input "fed" :: array
      %t3047 = load_field t3046["head_of_household"] :: any
      %t3048 = load_field t3047["rates"] :: any
      %t3049 = load_field t3000["lo"] :: float
      %t3015 = call core.sub(%t3037, %t3049) :: float
      %t3016 = call core.clamp(%t3011, %t3012, %t3015) :: float
      %t3050 = load_input "fed" :: array
      %t3051 = load_field t3050["head_of_household"] :: any
      %t3052 = load_field t3051["rates"] :: any
      %t3053 = load_field t3000["rate"] :: float
      %t3004 = call core.mul(%t3016, %t3053) :: float
      %acc2996 = acc_add agg.sum(%acc2996, %t3004) :: float
    end_loop
    %t3005 = acc_load %acc2996 :: float
    %t3060 = load_input "income" :: float
    %t3061 = const 168600.0 :: float
    %t3062 = make_tuple(%t3060, %t3061) :: tuple<float>
    %t3063 = fold %t3062 fn="agg.min" :: float
    %t3064 = const 0.062 :: float
    %t3065 = call core.mul(%t3063, %t3064) :: float
    %t3067 = load_input "income" :: float
    %t3068 = const 0.0145 :: float
    %t3069 = call core.mul(%t3067, %t3068) :: float
    %t3056 = call core.add(%t3065, %t3069) :: float
    %t3070 = load_input "income" :: float
    %t3071 = const 200000.0 :: float
    %t3072 = call core.sub(%t3070, %t3071) :: float
    %t3073 = const 0 :: integer
    %t3074 = make_tuple(%t3072, %t3073) :: tuple<float, integer>
    %t3075 = fold %t3074 fn="agg.max" :: float
    %t3076 = const 0.009 :: float
    %t3077 = call core.mul(%t3075, %t3076) :: float
    %t3058 = call core.add(%t3056, %t3077) :: float
    %t2990 = call core.add(%t3005, %t3058) :: float
    %t3078 = load_input "income" :: float
    %t3079 = load_input "state_rate" :: float
    %t3080 = call core.mul(%t3078, %t3079) :: float
    %t2992 = call core.add(%t2990, %t3080) :: float
    %t3081 = load_input "income" :: float
    %t3082 = load_input "local_rate" :: float
    %t3083 = call core.mul(%t3081, %t3082) :: float
    %t2994 = call core.add(%t2992, %t3083) :: float
    %t528 = load_input "income" :: float
    %t529 = const 1.0 :: float
    %t530 = make_tuple(%t528, %t529) :: tuple<float>
    %t531 = fold %t530 fn="agg.max" :: float
    %t532 = call core.div(%t2994, %t531) :: float
    yield %t532
  )
  (Declaration after_tax_hoh
    %t533 = load_input "income" :: float
    %acc3092 = decl_acc :: float
    %t3093 = load_input "fed" :: array
    %t3094 = load_field t3093["head_of_household"] :: any
    %t3095 = load_field t3094["rates"] :: any
    loop rates id=L51 in %t3095 as el=%t3096, idx=%t3097
      %t3113 = load_input "income" :: float
      %t3114 = load_input "fed" :: any
      %t3115 = load_field t3114["head_of_household"] :: any
      %t3116 = load_field t3115["std"] :: float
      %t3117 = call core.sub(%t3113, %t3116) :: float
      %t3118 = const 0 :: integer
      %t3119 = make_tuple(%t3117, %t3118) :: tuple<float, integer>
      %t3120 = fold %t3119 fn="agg.max" :: float
      %t3102 = load_input "fed" :: array
      %t3103 = load_field t3102["head_of_household"] :: any
      %t3104 = load_field t3103["rates"] :: any
      %t3121 = load_input "fed" :: array
      %t3122 = load_field t3121["head_of_household"] :: any
      %t3123 = load_field t3122["rates"] :: any
      %t3124 = load_field t3096["lo"] :: float
      %t3107 = call core.sub(%t3120, %t3124) :: float
      %t3108 = const 0 :: integer
      %t3125 = load_input "fed" :: array
      %t3126 = load_field t3125["head_of_household"] :: any
      %t3127 = load_field t3126["rates"] :: any
      %t3134 = load_input "fed" :: array
      %t3135 = load_field t3134["head_of_household"] :: any
      %t3136 = load_field t3135["rates"] :: any
      %t3137 = load_field t3096["hi"] :: float
      %t3129 = const -1 :: integer
      %t3130 = call core.eq(%t3137, %t3129) :: boolean
      %t3131 = const 100000000000.0 :: float
      %t3138 = load_input "fed" :: array
      %t3139 = load_field t3138["head_of_household"] :: any
      %t3140 = load_field t3139["rates"] :: any
      %t3141 = load_field t3096["hi"] :: float
      %t3133 = select %t3130, %t3131, %t3141 :: float
      %t3142 = load_input "fed" :: array
      %t3143 = load_field t3142["head_of_household"] :: any
      %t3144 = load_field t3143["rates"] :: any
      %t3145 = load_field t3096["lo"] :: float
      %t3111 = call core.sub(%t3133, %t3145) :: float
      %t3112 = call core.clamp(%t3107, %t3108, %t3111) :: float
      %t3146 = load_input "fed" :: array
      %t3147 = load_field t3146["head_of_household"] :: any
      %t3148 = load_field t3147["rates"] :: any
      %t3149 = load_field t3096["rate"] :: float
      %t3100 = call core.mul(%t3112, %t3149) :: float
      %acc3092 = acc_add agg.sum(%acc3092, %t3100) :: float
    end_loop
    %t3101 = acc_load %acc3092 :: float
    %t3156 = load_input "income" :: float
    %t3157 = const 168600.0 :: float
    %t3158 = make_tuple(%t3156, %t3157) :: tuple<float>
    %t3159 = fold %t3158 fn="agg.min" :: float
    %t3160 = const 0.062 :: float
    %t3161 = call core.mul(%t3159, %t3160) :: float
    %t3163 = load_input "income" :: float
    %t3164 = const 0.0145 :: float
    %t3165 = call core.mul(%t3163, %t3164) :: float
    %t3152 = call core.add(%t3161, %t3165) :: float
    %t3166 = load_input "income" :: float
    %t3167 = const 200000.0 :: float
    %t3168 = call core.sub(%t3166, %t3167) :: float
    %t3169 = const 0 :: integer
    %t3170 = make_tuple(%t3168, %t3169) :: tuple<float, integer>
    %t3171 = fold %t3170 fn="agg.max" :: float
    %t3172 = const 0.009 :: float
    %t3173 = call core.mul(%t3171, %t3172) :: float
    %t3154 = call core.add(%t3152, %t3173) :: float
    %t3086 = call core.add(%t3101, %t3154) :: float
    %t3174 = load_input "income" :: float
    %t3175 = load_input "state_rate" :: float
    %t3176 = call core.mul(%t3174, %t3175) :: float
    %t3088 = call core.add(%t3086, %t3176) :: float
    %t3177 = load_input "income" :: float
    %t3178 = load_input "local_rate" :: float
    %t3179 = call core.mul(%t3177, %t3178) :: float
    %t3090 = call core.add(%t3088, %t3179) :: float
    %t535 = call core.sub(%t533, %t3090) :: float
    yield %t535
  )
  (Declaration take_home_hoh
    %t3180 = load_input "income" :: float
    %acc3191 = decl_acc :: float
    %t3192 = load_input "fed" :: array
    %t3193 = load_field t3192["head_of_household"] :: any
    %t3194 = load_field t3193["rates"] :: any
    loop rates id=L52 in %t3194 as el=%t3195, idx=%t3196
      %t3212 = load_input "income" :: float
      %t3213 = load_input "fed" :: any
      %t3214 = load_field t3213["head_of_household"] :: any
      %t3215 = load_field t3214["std"] :: float
      %t3216 = call core.sub(%t3212, %t3215) :: float
      %t3217 = const 0 :: integer
      %t3218 = make_tuple(%t3216, %t3217) :: tuple<float, integer>
      %t3219 = fold %t3218 fn="agg.max" :: float
      %t3201 = load_input "fed" :: array
      %t3202 = load_field t3201["head_of_household"] :: any
      %t3203 = load_field t3202["rates"] :: any
      %t3220 = load_input "fed" :: array
      %t3221 = load_field t3220["head_of_household"] :: any
      %t3222 = load_field t3221["rates"] :: any
      %t3223 = load_field t3195["lo"] :: float
      %t3206 = call core.sub(%t3219, %t3223) :: float
      %t3207 = const 0 :: integer
      %t3224 = load_input "fed" :: array
      %t3225 = load_field t3224["head_of_household"] :: any
      %t3226 = load_field t3225["rates"] :: any
      %t3233 = load_input "fed" :: array
      %t3234 = load_field t3233["head_of_household"] :: any
      %t3235 = load_field t3234["rates"] :: any
      %t3236 = load_field t3195["hi"] :: float
      %t3228 = const -1 :: integer
      %t3229 = call core.eq(%t3236, %t3228) :: boolean
      %t3230 = const 100000000000.0 :: float
      %t3237 = load_input "fed" :: array
      %t3238 = load_field t3237["head_of_household"] :: any
      %t3239 = load_field t3238["rates"] :: any
      %t3240 = load_field t3195["hi"] :: float
      %t3232 = select %t3229, %t3230, %t3240 :: float
      %t3241 = load_input "fed" :: array
      %t3242 = load_field t3241["head_of_household"] :: any
      %t3243 = load_field t3242["rates"] :: any
      %t3244 = load_field t3195["lo"] :: float
      %t3210 = call core.sub(%t3232, %t3244) :: float
      %t3211 = call core.clamp(%t3206, %t3207, %t3210) :: float
      %t3245 = load_input "fed" :: array
      %t3246 = load_field t3245["head_of_household"] :: any
      %t3247 = load_field t3246["rates"] :: any
      %t3248 = load_field t3195["rate"] :: float
      %t3199 = call core.mul(%t3211, %t3248) :: float
      %acc3191 = acc_add agg.sum(%acc3191, %t3199) :: float
    end_loop
    %t3200 = acc_load %acc3191 :: float
    %t3255 = load_input "income" :: float
    %t3256 = const 168600.0 :: float
    %t3257 = make_tuple(%t3255, %t3256) :: tuple<float>
    %t3258 = fold %t3257 fn="agg.min" :: float
    %t3259 = const 0.062 :: float
    %t3260 = call core.mul(%t3258, %t3259) :: float
    %t3262 = load_input "income" :: float
    %t3263 = const 0.0145 :: float
    %t3264 = call core.mul(%t3262, %t3263) :: float
    %t3251 = call core.add(%t3260, %t3264) :: float
    %t3265 = load_input "income" :: float
    %t3266 = const 200000.0 :: float
    %t3267 = call core.sub(%t3265, %t3266) :: float
    %t3268 = const 0 :: integer
    %t3269 = make_tuple(%t3267, %t3268) :: tuple<float, integer>
    %t3270 = fold %t3269 fn="agg.max" :: float
    %t3271 = const 0.009 :: float
    %t3272 = call core.mul(%t3270, %t3271) :: float
    %t3253 = call core.add(%t3251, %t3272) :: float
    %t3185 = call core.add(%t3200, %t3253) :: float
    %t3273 = load_input "income" :: float
    %t3274 = load_input "state_rate" :: float
    %t3275 = call core.mul(%t3273, %t3274) :: float
    %t3187 = call core.add(%t3185, %t3275) :: float
    %t3276 = load_input "income" :: float
    %t3277 = load_input "local_rate" :: float
    %t3278 = call core.mul(%t3276, %t3277) :: float
    %t3189 = call core.add(%t3187, %t3278) :: float
    %t3182 = call core.sub(%t3180, %t3189) :: float
    %t537 = load_input "retirement_contrib" :: float
    %t538 = call core.sub(%t3182, %t537) :: float
    yield %t538
  )
  (Declaration summary
    %acc3280 = decl_acc :: float
    %t3281 = load_input "fed" :: array
    %t3282 = load_field t3281["single"] :: any
    %t3283 = load_field t3282["rates"] :: any
    loop rates id=L53 in %t3283 as el=%t3284, idx=%t3285
      %t3301 = load_input "income" :: float
      %t3302 = load_input "fed" :: any
      %t3303 = load_field t3302["single"] :: any
      %t3304 = load_field t3303["std"] :: float
      %t3305 = call core.sub(%t3301, %t3304) :: float
      %t3306 = const 0 :: integer
      %t3307 = make_tuple(%t3305, %t3306) :: tuple<float, integer>
      %t3308 = fold %t3307 fn="agg.max" :: float
      %t3309 = load_input "income" :: float
      %t3310 = load_input "fed" :: any
      %t3311 = load_field t3310["single"] :: any
      %t3312 = load_field t3311["std"] :: float
      %t3313 = call core.sub(%t3309, %t3312) :: float
      %t3314 = const 0 :: integer
      %t3315 = make_tuple(%t3313, %t3314) :: tuple<float, integer>
      %t3316 = fold %t3315 fn="agg.max" :: float
      %t3291 = load_input "fed" :: array
      %t3292 = load_field t3291["single"] :: any
      %t3293 = load_field t3292["rates"] :: any
      %t3317 = load_input "fed" :: array
      %t3318 = load_field t3317["single"] :: any
      %t3319 = load_field t3318["rates"] :: any
      %t3320 = load_field t3284["lo"] :: float
      %t3297 = call core.gte(%t3308, %t3320) :: boolean
      %t3321 = load_input "fed" :: array
      %t3322 = load_field t3321["single"] :: any
      %t3323 = load_field t3322["rates"] :: any
      %t3330 = load_input "fed" :: array
      %t3331 = load_field t3330["single"] :: any
      %t3332 = load_field t3331["rates"] :: any
      %t3333 = load_field t3284["hi"] :: float
      %t3325 = const -1 :: integer
      %t3326 = call core.eq(%t3333, %t3325) :: boolean
      %t3327 = const 100000000000.0 :: float
      %t3334 = load_input "fed" :: array
      %t3335 = load_field t3334["single"] :: any
      %t3336 = load_field t3335["rates"] :: any
      %t3337 = load_field t3284["hi"] :: float
      %t3329 = select %t3326, %t3327, %t3337 :: float
      %t3299 = call core.lt(%t3316, %t3329) :: boolean
      %t3300 = call core.and(%t3297, %t3299) :: boolean
      %t3338 = load_input "fed" :: array
      %t3339 = load_field t3338["single"] :: any
      %t3340 = load_field t3339["rates"] :: any
      %t3341 = load_field t3284["rate"] :: float
      %t3288 = const 0 :: integer
      %t3289 = select %t3300, %t3341, %t3288 :: float
      %acc3280 = acc_add agg.sum(%acc3280, %t3289) :: float
    end_loop
    %t3290 = acc_load %acc3280 :: float
    %acc3349 = decl_acc :: float
    %t3350 = load_input "fed" :: array
    %t3351 = load_field t3350["single"] :: any
    %t3352 = load_field t3351["rates"] :: any
    loop rates id=L54 in %t3352 as el=%t3353, idx=%t3354
      %t3370 = load_input "income" :: float
      %t3371 = load_input "fed" :: any
      %t3372 = load_field t3371["single"] :: any
      %t3373 = load_field t3372["std"] :: float
      %t3374 = call core.sub(%t3370, %t3373) :: float
      %t3375 = const 0 :: integer
      %t3376 = make_tuple(%t3374, %t3375) :: tuple<float, integer>
      %t3377 = fold %t3376 fn="agg.max" :: float
      %t3359 = load_input "fed" :: array
      %t3360 = load_field t3359["single"] :: any
      %t3361 = load_field t3360["rates"] :: any
      %t3378 = load_input "fed" :: array
      %t3379 = load_field t3378["single"] :: any
      %t3380 = load_field t3379["rates"] :: any
      %t3381 = load_field t3353["lo"] :: float
      %t3364 = call core.sub(%t3377, %t3381) :: float
      %t3365 = const 0 :: integer
      %t3382 = load_input "fed" :: array
      %t3383 = load_field t3382["single"] :: any
      %t3384 = load_field t3383["rates"] :: any
      %t3391 = load_input "fed" :: array
      %t3392 = load_field t3391["single"] :: any
      %t3393 = load_field t3392["rates"] :: any
      %t3394 = load_field t3353["hi"] :: float
      %t3386 = const -1 :: integer
      %t3387 = call core.eq(%t3394, %t3386) :: boolean
      %t3388 = const 100000000000.0 :: float
      %t3395 = load_input "fed" :: array
      %t3396 = load_field t3395["single"] :: any
      %t3397 = load_field t3396["rates"] :: any
      %t3398 = load_field t3353["hi"] :: float
      %t3390 = select %t3387, %t3388, %t3398 :: float
      %t3399 = load_input "fed" :: array
      %t3400 = load_field t3399["single"] :: any
      %t3401 = load_field t3400["rates"] :: any
      %t3402 = load_field t3353["lo"] :: float
      %t3368 = call core.sub(%t3390, %t3402) :: float
      %t3369 = call core.clamp(%t3364, %t3365, %t3368) :: float
      %t3403 = load_input "fed" :: array
      %t3404 = load_field t3403["single"] :: any
      %t3405 = load_field t3404["rates"] :: any
      %t3406 = load_field t3353["rate"] :: float
      %t3357 = call core.mul(%t3369, %t3406) :: float
      %acc3349 = acc_add agg.sum(%acc3349, %t3357) :: float
    end_loop
    %t3358 = acc_load %acc3349 :: float
    %t3343 = load_input "income" :: float
    %t3344 = const 1.0 :: float
    %t3345 = make_tuple(%t3343, %t3344) :: tuple<float>
    %t3346 = fold %t3345 fn="agg.max" :: float
    %t3347 = call core.div(%t3358, %t3346) :: float
    %acc3408 = decl_acc :: float
    %t3409 = load_input "fed" :: array
    %t3410 = load_field t3409["single"] :: any
    %t3411 = load_field t3410["rates"] :: any
    loop rates id=L55 in %t3411 as el=%t3412, idx=%t3413
      %t3429 = load_input "income" :: float
      %t3430 = load_input "fed" :: any
      %t3431 = load_field t3430["single"] :: any
      %t3432 = load_field t3431["std"] :: float
      %t3433 = call core.sub(%t3429, %t3432) :: float
      %t3434 = const 0 :: integer
      %t3435 = make_tuple(%t3433, %t3434) :: tuple<float, integer>
      %t3436 = fold %t3435 fn="agg.max" :: float
      %t3418 = load_input "fed" :: array
      %t3419 = load_field t3418["single"] :: any
      %t3420 = load_field t3419["rates"] :: any
      %t3437 = load_input "fed" :: array
      %t3438 = load_field t3437["single"] :: any
      %t3439 = load_field t3438["rates"] :: any
      %t3440 = load_field t3412["lo"] :: float
      %t3423 = call core.sub(%t3436, %t3440) :: float
      %t3424 = const 0 :: integer
      %t3441 = load_input "fed" :: array
      %t3442 = load_field t3441["single"] :: any
      %t3443 = load_field t3442["rates"] :: any
      %t3450 = load_input "fed" :: array
      %t3451 = load_field t3450["single"] :: any
      %t3452 = load_field t3451["rates"] :: any
      %t3453 = load_field t3412["hi"] :: float
      %t3445 = const -1 :: integer
      %t3446 = call core.eq(%t3453, %t3445) :: boolean
      %t3447 = const 100000000000.0 :: float
      %t3454 = load_input "fed" :: array
      %t3455 = load_field t3454["single"] :: any
      %t3456 = load_field t3455["rates"] :: any
      %t3457 = load_field t3412["hi"] :: float
      %t3449 = select %t3446, %t3447, %t3457 :: float
      %t3458 = load_input "fed" :: array
      %t3459 = load_field t3458["single"] :: any
      %t3460 = load_field t3459["rates"] :: any
      %t3461 = load_field t3412["lo"] :: float
      %t3427 = call core.sub(%t3449, %t3461) :: float
      %t3428 = call core.clamp(%t3423, %t3424, %t3427) :: float
      %t3462 = load_input "fed" :: array
      %t3463 = load_field t3462["single"] :: any
      %t3464 = load_field t3463["rates"] :: any
      %t3465 = load_field t3412["rate"] :: float
      %t3416 = call core.mul(%t3428, %t3465) :: float
      %acc3408 = acc_add agg.sum(%acc3408, %t3416) :: float
    end_loop
    %t3417 = acc_load %acc3408 :: float
    %t542 = make_object{marginal: %t3290, effective: %t3347, tax: %t3417} :: object
    %t3477 = load_input "income" :: float
    %t3478 = const 168600.0 :: float
    %t3479 = make_tuple(%t3477, %t3478) :: tuple<float>
    %t3480 = fold %t3479 fn="agg.min" :: float
    %t3481 = const 0.062 :: float
    %t3482 = call core.mul(%t3480, %t3481) :: float
    %t3483 = load_input "income" :: float
    %t3484 = const 0.0145 :: float
    %t3485 = call core.mul(%t3483, %t3484) :: float
    %t3474 = call core.add(%t3482, %t3485) :: float
    %t3486 = load_input "income" :: float
    %t3487 = const 200000.0 :: float
    %t3488 = call core.sub(%t3486, %t3487) :: float
    %t3489 = const 0 :: integer
    %t3490 = make_tuple(%t3488, %t3489) :: tuple<float, integer>
    %t3491 = fold %t3490 fn="agg.max" :: float
    %t3492 = const 0.009 :: float
    %t3493 = call core.mul(%t3491, %t3492) :: float
    %t3476 = call core.add(%t3474, %t3493) :: float
    %t3467 = load_input "income" :: float
    %t3468 = const 1.0 :: float
    %t3469 = make_tuple(%t3467, %t3468) :: tuple<float>
    %t3470 = fold %t3469 fn="agg.max" :: float
    %t3471 = call core.div(%t3476, %t3470) :: float
    %t3499 = load_input "income" :: float
    %t3500 = const 168600.0 :: float
    %t3501 = make_tuple(%t3499, %t3500) :: tuple<float>
    %t3502 = fold %t3501 fn="agg.min" :: float
    %t3503 = const 0.062 :: float
    %t3504 = call core.mul(%t3502, %t3503) :: float
    %t3505 = load_input "income" :: float
    %t3506 = const 0.0145 :: float
    %t3507 = call core.mul(%t3505, %t3506) :: float
    %t3496 = call core.add(%t3504, %t3507) :: float
    %t3508 = load_input "income" :: float
    %t3509 = const 200000.0 :: float
    %t3510 = call core.sub(%t3508, %t3509) :: float
    %t3511 = const 0 :: integer
    %t3512 = make_tuple(%t3510, %t3511) :: tuple<float, integer>
    %t3513 = fold %t3512 fn="agg.max" :: float
    %t3514 = const 0.009 :: float
    %t3515 = call core.mul(%t3513, %t3514) :: float
    %t3498 = call core.add(%t3496, %t3515) :: float
    %t545 = make_object{effective: %t3471, tax: %t3498} :: object
    %t546 = load_input "state_rate" :: float
    %t547 = load_input "state_rate" :: float
    %t3516 = load_input "income" :: float
    %t3517 = load_input "state_rate" :: float
    %t3518 = call core.mul(%t3516, %t3517) :: float
    %t549 = make_object{marginal: %t546, effective: %t547, tax: %t3518} :: object
    %t550 = load_input "local_rate" :: float
    %t551 = load_input "local_rate" :: float
    %t3519 = load_input "income" :: float
    %t3520 = load_input "local_rate" :: float
    %t3521 = call core.mul(%t3519, %t3520) :: float
    %t553 = make_object{marginal: %t550, effective: %t551, tax: %t3521} :: object
    %acc3536 = decl_acc :: float
    %t3537 = load_input "fed" :: array
    %t3538 = load_field t3537["single"] :: any
    %t3539 = load_field t3538["rates"] :: any
    loop rates id=L56 in %t3539 as el=%t3540, idx=%t3541
      %t3557 = load_input "income" :: float
      %t3558 = load_input "fed" :: any
      %t3559 = load_field t3558["single"] :: any
      %t3560 = load_field t3559["std"] :: float
      %t3561 = call core.sub(%t3557, %t3560) :: float
      %t3562 = const 0 :: integer
      %t3563 = make_tuple(%t3561, %t3562) :: tuple<float, integer>
      %t3564 = fold %t3563 fn="agg.max" :: float
      %t3546 = load_input "fed" :: array
      %t3547 = load_field t3546["single"] :: any
      %t3548 = load_field t3547["rates"] :: any
      %t3565 = load_input "fed" :: array
      %t3566 = load_field t3565["single"] :: any
      %t3567 = load_field t3566["rates"] :: any
      %t3568 = load_field t3540["lo"] :: float
      %t3551 = call core.sub(%t3564, %t3568) :: float
      %t3552 = const 0 :: integer
      %t3569 = load_input "fed" :: array
      %t3570 = load_field t3569["single"] :: any
      %t3571 = load_field t3570["rates"] :: any
      %t3578 = load_input "fed" :: array
      %t3579 = load_field t3578["single"] :: any
      %t3580 = load_field t3579["rates"] :: any
      %t3581 = load_field t3540["hi"] :: float
      %t3573 = const -1 :: integer
      %t3574 = call core.eq(%t3581, %t3573) :: boolean
      %t3575 = const 100000000000.0 :: float
      %t3582 = load_input "fed" :: array
      %t3583 = load_field t3582["single"] :: any
      %t3584 = load_field t3583["rates"] :: any
      %t3585 = load_field t3540["hi"] :: float
      %t3577 = select %t3574, %t3575, %t3585 :: float
      %t3586 = load_input "fed" :: array
      %t3587 = load_field t3586["single"] :: any
      %t3588 = load_field t3587["rates"] :: any
      %t3589 = load_field t3540["lo"] :: float
      %t3555 = call core.sub(%t3577, %t3589) :: float
      %t3556 = call core.clamp(%t3551, %t3552, %t3555) :: float
      %t3590 = load_input "fed" :: array
      %t3591 = load_field t3590["single"] :: any
      %t3592 = load_field t3591["rates"] :: any
      %t3593 = load_field t3540["rate"] :: float
      %t3544 = call core.mul(%t3556, %t3593) :: float
      %acc3536 = acc_add agg.sum(%acc3536, %t3544) :: float
    end_loop
    %t3545 = acc_load %acc3536 :: float
    %t3599 = load_input "income" :: float
    %t3600 = const 168600.0 :: float
    %t3601 = make_tuple(%t3599, %t3600) :: tuple<float>
    %t3602 = fold %t3601 fn="agg.min" :: float
    %t3603 = const 0.062 :: float
    %t3604 = call core.mul(%t3602, %t3603) :: float
    %t3605 = load_input "income" :: float
    %t3606 = const 0.0145 :: float
    %t3607 = call core.mul(%t3605, %t3606) :: float
    %t3596 = call core.add(%t3604, %t3607) :: float
    %t3608 = load_input "income" :: float
    %t3609 = const 200000.0 :: float
    %t3610 = call core.sub(%t3608, %t3609) :: float
    %t3611 = const 0 :: integer
    %t3612 = make_tuple(%t3610, %t3611) :: tuple<float, integer>
    %t3613 = fold %t3612 fn="agg.max" :: float
    %t3614 = const 0.009 :: float
    %t3615 = call core.mul(%t3613, %t3614) :: float
    %t3598 = call core.add(%t3596, %t3615) :: float
    %t3530 = call core.add(%t3545, %t3598) :: float
    %t3616 = load_input "income" :: float
    %t3617 = load_input "state_rate" :: float
    %t3618 = call core.mul(%t3616, %t3617) :: float
    %t3532 = call core.add(%t3530, %t3618) :: float
    %t3619 = load_input "income" :: float
    %t3620 = load_input "local_rate" :: float
    %t3621 = call core.mul(%t3619, %t3620) :: float
    %t3534 = call core.add(%t3532, %t3621) :: float
    %t3523 = load_input "income" :: float
    %t3524 = const 1.0 :: float
    %t3525 = make_tuple(%t3523, %t3524) :: tuple<float>
    %t3526 = fold %t3525 fn="agg.max" :: float
    %t3527 = call core.div(%t3534, %t3526) :: float
    %acc3630 = decl_acc :: float
    %t3631 = load_input "fed" :: array
    %t3632 = load_field t3631["single"] :: any
    %t3633 = load_field t3632["rates"] :: any
    loop rates id=L57 in %t3633 as el=%t3634, idx=%t3635
      %t3651 = load_input "income" :: float
      %t3652 = load_input "fed" :: any
      %t3653 = load_field t3652["single"] :: any
      %t3654 = load_field t3653["std"] :: float
      %t3655 = call core.sub(%t3651, %t3654) :: float
      %t3656 = const 0 :: integer
      %t3657 = make_tuple(%t3655, %t3656) :: tuple<float, integer>
      %t3658 = fold %t3657 fn="agg.max" :: float
      %t3640 = load_input "fed" :: array
      %t3641 = load_field t3640["single"] :: any
      %t3642 = load_field t3641["rates"] :: any
      %t3659 = load_input "fed" :: array
      %t3660 = load_field t3659["single"] :: any
      %t3661 = load_field t3660["rates"] :: any
      %t3662 = load_field t3634["lo"] :: float
      %t3645 = call core.sub(%t3658, %t3662) :: float
      %t3646 = const 0 :: integer
      %t3663 = load_input "fed" :: array
      %t3664 = load_field t3663["single"] :: any
      %t3665 = load_field t3664["rates"] :: any
      %t3672 = load_input "fed" :: array
      %t3673 = load_field t3672["single"] :: any
      %t3674 = load_field t3673["rates"] :: any
      %t3675 = load_field t3634["hi"] :: float
      %t3667 = const -1 :: integer
      %t3668 = call core.eq(%t3675, %t3667) :: boolean
      %t3669 = const 100000000000.0 :: float
      %t3676 = load_input "fed" :: array
      %t3677 = load_field t3676["single"] :: any
      %t3678 = load_field t3677["rates"] :: any
      %t3679 = load_field t3634["hi"] :: float
      %t3671 = select %t3668, %t3669, %t3679 :: float
      %t3680 = load_input "fed" :: array
      %t3681 = load_field t3680["single"] :: any
      %t3682 = load_field t3681["rates"] :: any
      %t3683 = load_field t3634["lo"] :: float
      %t3649 = call core.sub(%t3671, %t3683) :: float
      %t3650 = call core.clamp(%t3645, %t3646, %t3649) :: float
      %t3684 = load_input "fed" :: array
      %t3685 = load_field t3684["single"] :: any
      %t3686 = load_field t3685["rates"] :: any
      %t3687 = load_field t3634["rate"] :: float
      %t3638 = call core.mul(%t3650, %t3687) :: float
      %acc3630 = acc_add agg.sum(%acc3630, %t3638) :: float
    end_loop
    %t3639 = acc_load %acc3630 :: float
    %t3693 = load_input "income" :: float
    %t3694 = const 168600.0 :: float
    %t3695 = make_tuple(%t3693, %t3694) :: tuple<float>
    %t3696 = fold %t3695 fn="agg.min" :: float
    %t3697 = const 0.062 :: float
    %t3698 = call core.mul(%t3696, %t3697) :: float
    %t3699 = load_input "income" :: float
    %t3700 = const 0.0145 :: float
    %t3701 = call core.mul(%t3699, %t3700) :: float
    %t3690 = call core.add(%t3698, %t3701) :: float
    %t3702 = load_input "income" :: float
    %t3703 = const 200000.0 :: float
    %t3704 = call core.sub(%t3702, %t3703) :: float
    %t3705 = const 0 :: integer
    %t3706 = make_tuple(%t3704, %t3705) :: tuple<float, integer>
    %t3707 = fold %t3706 fn="agg.max" :: float
    %t3708 = const 0.009 :: float
    %t3709 = call core.mul(%t3707, %t3708) :: float
    %t3692 = call core.add(%t3690, %t3709) :: float
    %t3624 = call core.add(%t3639, %t3692) :: float
    %t3710 = load_input "income" :: float
    %t3711 = load_input "state_rate" :: float
    %t3712 = call core.mul(%t3710, %t3711) :: float
    %t3626 = call core.add(%t3624, %t3712) :: float
    %t3713 = load_input "income" :: float
    %t3714 = load_input "local_rate" :: float
    %t3715 = call core.mul(%t3713, %t3714) :: float
    %t3628 = call core.add(%t3626, %t3715) :: float
    %t556 = make_object{effective: %t3527, tax: %t3628} :: object
    %t3716 = load_input "income" :: float
    %acc3727 = decl_acc :: float
    %t3728 = load_input "fed" :: array
    %t3729 = load_field t3728["single"] :: any
    %t3730 = load_field t3729["rates"] :: any
    loop rates id=L58 in %t3730 as el=%t3731, idx=%t3732
      %t3748 = load_input "income" :: float
      %t3749 = load_input "fed" :: any
      %t3750 = load_field t3749["single"] :: any
      %t3751 = load_field t3750["std"] :: float
      %t3752 = call core.sub(%t3748, %t3751) :: float
      %t3753 = const 0 :: integer
      %t3754 = make_tuple(%t3752, %t3753) :: tuple<float, integer>
      %t3755 = fold %t3754 fn="agg.max" :: float
      %t3737 = load_input "fed" :: array
      %t3738 = load_field t3737["single"] :: any
      %t3739 = load_field t3738["rates"] :: any
      %t3756 = load_input "fed" :: array
      %t3757 = load_field t3756["single"] :: any
      %t3758 = load_field t3757["rates"] :: any
      %t3759 = load_field t3731["lo"] :: float
      %t3742 = call core.sub(%t3755, %t3759) :: float
      %t3743 = const 0 :: integer
      %t3760 = load_input "fed" :: array
      %t3761 = load_field t3760["single"] :: any
      %t3762 = load_field t3761["rates"] :: any
      %t3769 = load_input "fed" :: array
      %t3770 = load_field t3769["single"] :: any
      %t3771 = load_field t3770["rates"] :: any
      %t3772 = load_field t3731["hi"] :: float
      %t3764 = const -1 :: integer
      %t3765 = call core.eq(%t3772, %t3764) :: boolean
      %t3766 = const 100000000000.0 :: float
      %t3773 = load_input "fed" :: array
      %t3774 = load_field t3773["single"] :: any
      %t3775 = load_field t3774["rates"] :: any
      %t3776 = load_field t3731["hi"] :: float
      %t3768 = select %t3765, %t3766, %t3776 :: float
      %t3777 = load_input "fed" :: array
      %t3778 = load_field t3777["single"] :: any
      %t3779 = load_field t3778["rates"] :: any
      %t3780 = load_field t3731["lo"] :: float
      %t3746 = call core.sub(%t3768, %t3780) :: float
      %t3747 = call core.clamp(%t3742, %t3743, %t3746) :: float
      %t3781 = load_input "fed" :: array
      %t3782 = load_field t3781["single"] :: any
      %t3783 = load_field t3782["rates"] :: any
      %t3784 = load_field t3731["rate"] :: float
      %t3735 = call core.mul(%t3747, %t3784) :: float
      %acc3727 = acc_add agg.sum(%acc3727, %t3735) :: float
    end_loop
    %t3736 = acc_load %acc3727 :: float
    %t3790 = load_input "income" :: float
    %t3791 = const 168600.0 :: float
    %t3792 = make_tuple(%t3790, %t3791) :: tuple<float>
    %t3793 = fold %t3792 fn="agg.min" :: float
    %t3794 = const 0.062 :: float
    %t3795 = call core.mul(%t3793, %t3794) :: float
    %t3796 = load_input "income" :: float
    %t3797 = const 0.0145 :: float
    %t3798 = call core.mul(%t3796, %t3797) :: float
    %t3787 = call core.add(%t3795, %t3798) :: float
    %t3799 = load_input "income" :: float
    %t3800 = const 200000.0 :: float
    %t3801 = call core.sub(%t3799, %t3800) :: float
    %t3802 = const 0 :: integer
    %t3803 = make_tuple(%t3801, %t3802) :: tuple<float, integer>
    %t3804 = fold %t3803 fn="agg.max" :: float
    %t3805 = const 0.009 :: float
    %t3806 = call core.mul(%t3804, %t3805) :: float
    %t3789 = call core.add(%t3787, %t3806) :: float
    %t3721 = call core.add(%t3736, %t3789) :: float
    %t3807 = load_input "income" :: float
    %t3808 = load_input "state_rate" :: float
    %t3809 = call core.mul(%t3807, %t3808) :: float
    %t3723 = call core.add(%t3721, %t3809) :: float
    %t3810 = load_input "income" :: float
    %t3811 = load_input "local_rate" :: float
    %t3812 = call core.mul(%t3810, %t3811) :: float
    %t3725 = call core.add(%t3723, %t3812) :: float
    %t3718 = call core.sub(%t3716, %t3725) :: float
    %t558 = load_input "retirement_contrib" :: float
    %t3816 = load_input "income" :: float
    %acc3827 = decl_acc :: float
    %t3828 = load_input "fed" :: array
    %t3829 = load_field t3828["single"] :: any
    %t3830 = load_field t3829["rates"] :: any
    loop rates id=L59 in %t3830 as el=%t3831, idx=%t3832
      %t3848 = load_input "income" :: float
      %t3849 = load_input "fed" :: any
      %t3850 = load_field t3849["single"] :: any
      %t3851 = load_field t3850["std"] :: float
      %t3852 = call core.sub(%t3848, %t3851) :: float
      %t3853 = const 0 :: integer
      %t3854 = make_tuple(%t3852, %t3853) :: tuple<float, integer>
      %t3855 = fold %t3854 fn="agg.max" :: float
      %t3837 = load_input "fed" :: array
      %t3838 = load_field t3837["single"] :: any
      %t3839 = load_field t3838["rates"] :: any
      %t3856 = load_input "fed" :: array
      %t3857 = load_field t3856["single"] :: any
      %t3858 = load_field t3857["rates"] :: any
      %t3859 = load_field t3831["lo"] :: float
      %t3842 = call core.sub(%t3855, %t3859) :: float
      %t3843 = const 0 :: integer
      %t3860 = load_input "fed" :: array
      %t3861 = load_field t3860["single"] :: any
      %t3862 = load_field t3861["rates"] :: any
      %t3869 = load_input "fed" :: array
      %t3870 = load_field t3869["single"] :: any
      %t3871 = load_field t3870["rates"] :: any
      %t3872 = load_field t3831["hi"] :: float
      %t3864 = const -1 :: integer
      %t3865 = call core.eq(%t3872, %t3864) :: boolean
      %t3866 = const 100000000000.0 :: float
      %t3873 = load_input "fed" :: array
      %t3874 = load_field t3873["single"] :: any
      %t3875 = load_field t3874["rates"] :: any
      %t3876 = load_field t3831["hi"] :: float
      %t3868 = select %t3865, %t3866, %t3876 :: float
      %t3877 = load_input "fed" :: array
      %t3878 = load_field t3877["single"] :: any
      %t3879 = load_field t3878["rates"] :: any
      %t3880 = load_field t3831["lo"] :: float
      %t3846 = call core.sub(%t3868, %t3880) :: float
      %t3847 = call core.clamp(%t3842, %t3843, %t3846) :: float
      %t3881 = load_input "fed" :: array
      %t3882 = load_field t3881["single"] :: any
      %t3883 = load_field t3882["rates"] :: any
      %t3884 = load_field t3831["rate"] :: float
      %t3835 = call core.mul(%t3847, %t3884) :: float
      %acc3827 = acc_add agg.sum(%acc3827, %t3835) :: float
    end_loop
    %t3836 = acc_load %acc3827 :: float
    %t3890 = load_input "income" :: float
    %t3891 = const 168600.0 :: float
    %t3892 = make_tuple(%t3890, %t3891) :: tuple<float>
    %t3893 = fold %t3892 fn="agg.min" :: float
    %t3894 = const 0.062 :: float
    %t3895 = call core.mul(%t3893, %t3894) :: float
    %t3896 = load_input "income" :: float
    %t3897 = const 0.0145 :: float
    %t3898 = call core.mul(%t3896, %t3897) :: float
    %t3887 = call core.add(%t3895, %t3898) :: float
    %t3899 = load_input "income" :: float
    %t3900 = const 200000.0 :: float
    %t3901 = call core.sub(%t3899, %t3900) :: float
    %t3902 = const 0 :: integer
    %t3903 = make_tuple(%t3901, %t3902) :: tuple<float, integer>
    %t3904 = fold %t3903 fn="agg.max" :: float
    %t3905 = const 0.009 :: float
    %t3906 = call core.mul(%t3904, %t3905) :: float
    %t3889 = call core.add(%t3887, %t3906) :: float
    %t3821 = call core.add(%t3836, %t3889) :: float
    %t3907 = load_input "income" :: float
    %t3908 = load_input "state_rate" :: float
    %t3909 = call core.mul(%t3907, %t3908) :: float
    %t3823 = call core.add(%t3821, %t3909) :: float
    %t3910 = load_input "income" :: float
    %t3911 = load_input "local_rate" :: float
    %t3912 = call core.mul(%t3910, %t3911) :: float
    %t3825 = call core.add(%t3823, %t3912) :: float
    %t3818 = call core.sub(%t3816, %t3825) :: float
    %t3814 = load_input "retirement_contrib" :: float
    %t3815 = call core.sub(%t3818, %t3814) :: float
    %t560 = make_object{federal: %t542, fica: %t545, state: %t549, local: %t553, total: %t556, after_tax: %t3718, retirement_contrib: %t558, take_home: %t3815} :: object
    %acc3914 = decl_acc :: float
    %t3915 = load_input "fed" :: array
    %t3916 = load_field t3915["married_joint"] :: any
    %t3917 = load_field t3916["rates"] :: any
    loop rates id=L60 in %t3917 as el=%t3918, idx=%t3919
      %t3935 = load_input "income" :: float
      %t3936 = load_input "fed" :: any
      %t3937 = load_field t3936["married_joint"] :: any
      %t3938 = load_field t3937["std"] :: float
      %t3939 = call core.sub(%t3935, %t3938) :: float
      %t3940 = const 0 :: integer
      %t3941 = make_tuple(%t3939, %t3940) :: tuple<float, integer>
      %t3942 = fold %t3941 fn="agg.max" :: float
      %t3943 = load_input "income" :: float
      %t3944 = load_input "fed" :: any
      %t3945 = load_field t3944["married_joint"] :: any
      %t3946 = load_field t3945["std"] :: float
      %t3947 = call core.sub(%t3943, %t3946) :: float
      %t3948 = const 0 :: integer
      %t3949 = make_tuple(%t3947, %t3948) :: tuple<float, integer>
      %t3950 = fold %t3949 fn="agg.max" :: float
      %t3925 = load_input "fed" :: array
      %t3926 = load_field t3925["married_joint"] :: any
      %t3927 = load_field t3926["rates"] :: any
      %t3951 = load_input "fed" :: array
      %t3952 = load_field t3951["married_joint"] :: any
      %t3953 = load_field t3952["rates"] :: any
      %t3954 = load_field t3918["lo"] :: float
      %t3931 = call core.gte(%t3942, %t3954) :: boolean
      %t3955 = load_input "fed" :: array
      %t3956 = load_field t3955["married_joint"] :: any
      %t3957 = load_field t3956["rates"] :: any
      %t3964 = load_input "fed" :: array
      %t3965 = load_field t3964["married_joint"] :: any
      %t3966 = load_field t3965["rates"] :: any
      %t3967 = load_field t3918["hi"] :: float
      %t3959 = const -1 :: integer
      %t3960 = call core.eq(%t3967, %t3959) :: boolean
      %t3961 = const 100000000000.0 :: float
      %t3968 = load_input "fed" :: array
      %t3969 = load_field t3968["married_joint"] :: any
      %t3970 = load_field t3969["rates"] :: any
      %t3971 = load_field t3918["hi"] :: float
      %t3963 = select %t3960, %t3961, %t3971 :: float
      %t3933 = call core.lt(%t3950, %t3963) :: boolean
      %t3934 = call core.and(%t3931, %t3933) :: boolean
      %t3972 = load_input "fed" :: array
      %t3973 = load_field t3972["married_joint"] :: any
      %t3974 = load_field t3973["rates"] :: any
      %t3975 = load_field t3918["rate"] :: float
      %t3922 = const 0 :: integer
      %t3923 = select %t3934, %t3975, %t3922 :: float
      %acc3914 = acc_add agg.sum(%acc3914, %t3923) :: float
    end_loop
    %t3924 = acc_load %acc3914 :: float
    %acc3983 = decl_acc :: float
    %t3984 = load_input "fed" :: array
    %t3985 = load_field t3984["married_joint"] :: any
    %t3986 = load_field t3985["rates"] :: any
    loop rates id=L61 in %t3986 as el=%t3987, idx=%t3988
      %t4004 = load_input "income" :: float
      %t4005 = load_input "fed" :: any
      %t4006 = load_field t4005["married_joint"] :: any
      %t4007 = load_field t4006["std"] :: float
      %t4008 = call core.sub(%t4004, %t4007) :: float
      %t4009 = const 0 :: integer
      %t4010 = make_tuple(%t4008, %t4009) :: tuple<float, integer>
      %t4011 = fold %t4010 fn="agg.max" :: float
      %t3993 = load_input "fed" :: array
      %t3994 = load_field t3993["married_joint"] :: any
      %t3995 = load_field t3994["rates"] :: any
      %t4012 = load_input "fed" :: array
      %t4013 = load_field t4012["married_joint"] :: any
      %t4014 = load_field t4013["rates"] :: any
      %t4015 = load_field t3987["lo"] :: float
      %t3998 = call core.sub(%t4011, %t4015) :: float
      %t3999 = const 0 :: integer
      %t4016 = load_input "fed" :: array
      %t4017 = load_field t4016["married_joint"] :: any
      %t4018 = load_field t4017["rates"] :: any
      %t4025 = load_input "fed" :: array
      %t4026 = load_field t4025["married_joint"] :: any
      %t4027 = load_field t4026["rates"] :: any
      %t4028 = load_field t3987["hi"] :: float
      %t4020 = const -1 :: integer
      %t4021 = call core.eq(%t4028, %t4020) :: boolean
      %t4022 = const 100000000000.0 :: float
      %t4029 = load_input "fed" :: array
      %t4030 = load_field t4029["married_joint"] :: any
      %t4031 = load_field t4030["rates"] :: any
      %t4032 = load_field t3987["hi"] :: float
      %t4024 = select %t4021, %t4022, %t4032 :: float
      %t4033 = load_input "fed" :: array
      %t4034 = load_field t4033["married_joint"] :: any
      %t4035 = load_field t4034["rates"] :: any
      %t4036 = load_field t3987["lo"] :: float
      %t4002 = call core.sub(%t4024, %t4036) :: float
      %t4003 = call core.clamp(%t3998, %t3999, %t4002) :: float
      %t4037 = load_input "fed" :: array
      %t4038 = load_field t4037["married_joint"] :: any
      %t4039 = load_field t4038["rates"] :: any
      %t4040 = load_field t3987["rate"] :: float
      %t3991 = call core.mul(%t4003, %t4040) :: float
      %acc3983 = acc_add agg.sum(%acc3983, %t3991) :: float
    end_loop
    %t3992 = acc_load %acc3983 :: float
    %t3977 = load_input "income" :: float
    %t3978 = const 1.0 :: float
    %t3979 = make_tuple(%t3977, %t3978) :: tuple<float>
    %t3980 = fold %t3979 fn="agg.max" :: float
    %t3981 = call core.div(%t3992, %t3980) :: float
    %acc4042 = decl_acc :: float
    %t4043 = load_input "fed" :: array
    %t4044 = load_field t4043["married_joint"] :: any
    %t4045 = load_field t4044["rates"] :: any
    loop rates id=L62 in %t4045 as el=%t4046, idx=%t4047
      %t4063 = load_input "income" :: float
      %t4064 = load_input "fed" :: any
      %t4065 = load_field t4064["married_joint"] :: any
      %t4066 = load_field t4065["std"] :: float
      %t4067 = call core.sub(%t4063, %t4066) :: float
      %t4068 = const 0 :: integer
      %t4069 = make_tuple(%t4067, %t4068) :: tuple<float, integer>
      %t4070 = fold %t4069 fn="agg.max" :: float
      %t4052 = load_input "fed" :: array
      %t4053 = load_field t4052["married_joint"] :: any
      %t4054 = load_field t4053["rates"] :: any
      %t4071 = load_input "fed" :: array
      %t4072 = load_field t4071["married_joint"] :: any
      %t4073 = load_field t4072["rates"] :: any
      %t4074 = load_field t4046["lo"] :: float
      %t4057 = call core.sub(%t4070, %t4074) :: float
      %t4058 = const 0 :: integer
      %t4075 = load_input "fed" :: array
      %t4076 = load_field t4075["married_joint"] :: any
      %t4077 = load_field t4076["rates"] :: any
      %t4084 = load_input "fed" :: array
      %t4085 = load_field t4084["married_joint"] :: any
      %t4086 = load_field t4085["rates"] :: any
      %t4087 = load_field t4046["hi"] :: float
      %t4079 = const -1 :: integer
      %t4080 = call core.eq(%t4087, %t4079) :: boolean
      %t4081 = const 100000000000.0 :: float
      %t4088 = load_input "fed" :: array
      %t4089 = load_field t4088["married_joint"] :: any
      %t4090 = load_field t4089["rates"] :: any
      %t4091 = load_field t4046["hi"] :: float
      %t4083 = select %t4080, %t4081, %t4091 :: float
      %t4092 = load_input "fed" :: array
      %t4093 = load_field t4092["married_joint"] :: any
      %t4094 = load_field t4093["rates"] :: any
      %t4095 = load_field t4046["lo"] :: float
      %t4061 = call core.sub(%t4083, %t4095) :: float
      %t4062 = call core.clamp(%t4057, %t4058, %t4061) :: float
      %t4096 = load_input "fed" :: array
      %t4097 = load_field t4096["married_joint"] :: any
      %t4098 = load_field t4097["rates"] :: any
      %t4099 = load_field t4046["rate"] :: float
      %t4050 = call core.mul(%t4062, %t4099) :: float
      %acc4042 = acc_add agg.sum(%acc4042, %t4050) :: float
    end_loop
    %t4051 = acc_load %acc4042 :: float
    %t564 = make_object{marginal: %t3924, effective: %t3981, tax: %t4051} :: object
    %t4112 = load_input "income" :: float
    %t4113 = const 168600.0 :: float
    %t4114 = make_tuple(%t4112, %t4113) :: tuple<float>
    %t4115 = fold %t4114 fn="agg.min" :: float
    %t4116 = const 0.062 :: float
    %t4117 = call core.mul(%t4115, %t4116) :: float
    %t4119 = load_input "income" :: float
    %t4120 = const 0.0145 :: float
    %t4121 = call core.mul(%t4119, %t4120) :: float
    %t4108 = call core.add(%t4117, %t4121) :: float
    %t4122 = load_input "income" :: float
    %t4123 = const 250000.0 :: float
    %t4124 = call core.sub(%t4122, %t4123) :: float
    %t4125 = const 0 :: integer
    %t4126 = make_tuple(%t4124, %t4125) :: tuple<float, integer>
    %t4127 = fold %t4126 fn="agg.max" :: float
    %t4128 = const 0.009 :: float
    %t4129 = call core.mul(%t4127, %t4128) :: float
    %t4110 = call core.add(%t4108, %t4129) :: float
    %t4101 = load_input "income" :: float
    %t4102 = const 1.0 :: float
    %t4103 = make_tuple(%t4101, %t4102) :: tuple<float>
    %t4104 = fold %t4103 fn="agg.max" :: float
    %t4105 = call core.div(%t4110, %t4104) :: float
    %t4136 = load_input "income" :: float
    %t4137 = const 168600.0 :: float
    %t4138 = make_tuple(%t4136, %t4137) :: tuple<float>
    %t4139 = fold %t4138 fn="agg.min" :: float
    %t4140 = const 0.062 :: float
    %t4141 = call core.mul(%t4139, %t4140) :: float
    %t4143 = load_input "income" :: float
    %t4144 = const 0.0145 :: float
    %t4145 = call core.mul(%t4143, %t4144) :: float
    %t4132 = call core.add(%t4141, %t4145) :: float
    %t4146 = load_input "income" :: float
    %t4147 = const 250000.0 :: float
    %t4148 = call core.sub(%t4146, %t4147) :: float
    %t4149 = const 0 :: integer
    %t4150 = make_tuple(%t4148, %t4149) :: tuple<float, integer>
    %t4151 = fold %t4150 fn="agg.max" :: float
    %t4152 = const 0.009 :: float
    %t4153 = call core.mul(%t4151, %t4152) :: float
    %t4134 = call core.add(%t4132, %t4153) :: float
    %t567 = make_object{effective: %t4105, tax: %t4134} :: object
    %t568 = load_input "state_rate" :: float
    %t569 = load_input "state_rate" :: float
    %t4154 = load_input "income" :: float
    %t4155 = load_input "state_rate" :: float
    %t4156 = call core.mul(%t4154, %t4155) :: float
    %t571 = make_object{marginal: %t568, effective: %t569, tax: %t4156} :: object
    %t572 = load_input "local_rate" :: float
    %t573 = load_input "local_rate" :: float
    %t4157 = load_input "income" :: float
    %t4158 = load_input "local_rate" :: float
    %t4159 = call core.mul(%t4157, %t4158) :: float
    %t575 = make_object{marginal: %t572, effective: %t573, tax: %t4159} :: object
    %acc4174 = decl_acc :: float
    %t4175 = load_input "fed" :: array
    %t4176 = load_field t4175["married_joint"] :: any
    %t4177 = load_field t4176["rates"] :: any
    loop rates id=L63 in %t4177 as el=%t4178, idx=%t4179
      %t4195 = load_input "income" :: float
      %t4196 = load_input "fed" :: any
      %t4197 = load_field t4196["married_joint"] :: any
      %t4198 = load_field t4197["std"] :: float
      %t4199 = call core.sub(%t4195, %t4198) :: float
      %t4200 = const 0 :: integer
      %t4201 = make_tuple(%t4199, %t4200) :: tuple<float, integer>
      %t4202 = fold %t4201 fn="agg.max" :: float
      %t4184 = load_input "fed" :: array
      %t4185 = load_field t4184["married_joint"] :: any
      %t4186 = load_field t4185["rates"] :: any
      %t4203 = load_input "fed" :: array
      %t4204 = load_field t4203["married_joint"] :: any
      %t4205 = load_field t4204["rates"] :: any
      %t4206 = load_field t4178["lo"] :: float
      %t4189 = call core.sub(%t4202, %t4206) :: float
      %t4190 = const 0 :: integer
      %t4207 = load_input "fed" :: array
      %t4208 = load_field t4207["married_joint"] :: any
      %t4209 = load_field t4208["rates"] :: any
      %t4216 = load_input "fed" :: array
      %t4217 = load_field t4216["married_joint"] :: any
      %t4218 = load_field t4217["rates"] :: any
      %t4219 = load_field t4178["hi"] :: float
      %t4211 = const -1 :: integer
      %t4212 = call core.eq(%t4219, %t4211) :: boolean
      %t4213 = const 100000000000.0 :: float
      %t4220 = load_input "fed" :: array
      %t4221 = load_field t4220["married_joint"] :: any
      %t4222 = load_field t4221["rates"] :: any
      %t4223 = load_field t4178["hi"] :: float
      %t4215 = select %t4212, %t4213, %t4223 :: float
      %t4224 = load_input "fed" :: array
      %t4225 = load_field t4224["married_joint"] :: any
      %t4226 = load_field t4225["rates"] :: any
      %t4227 = load_field t4178["lo"] :: float
      %t4193 = call core.sub(%t4215, %t4227) :: float
      %t4194 = call core.clamp(%t4189, %t4190, %t4193) :: float
      %t4228 = load_input "fed" :: array
      %t4229 = load_field t4228["married_joint"] :: any
      %t4230 = load_field t4229["rates"] :: any
      %t4231 = load_field t4178["rate"] :: float
      %t4182 = call core.mul(%t4194, %t4231) :: float
      %acc4174 = acc_add agg.sum(%acc4174, %t4182) :: float
    end_loop
    %t4183 = acc_load %acc4174 :: float
    %t4238 = load_input "income" :: float
    %t4239 = const 168600.0 :: float
    %t4240 = make_tuple(%t4238, %t4239) :: tuple<float>
    %t4241 = fold %t4240 fn="agg.min" :: float
    %t4242 = const 0.062 :: float
    %t4243 = call core.mul(%t4241, %t4242) :: float
    %t4245 = load_input "income" :: float
    %t4246 = const 0.0145 :: float
    %t4247 = call core.mul(%t4245, %t4246) :: float
    %t4234 = call core.add(%t4243, %t4247) :: float
    %t4248 = load_input "income" :: float
    %t4249 = const 250000.0 :: float
    %t4250 = call core.sub(%t4248, %t4249) :: float
    %t4251 = const 0 :: integer
    %t4252 = make_tuple(%t4250, %t4251) :: tuple<float, integer>
    %t4253 = fold %t4252 fn="agg.max" :: float
    %t4254 = const 0.009 :: float
    %t4255 = call core.mul(%t4253, %t4254) :: float
    %t4236 = call core.add(%t4234, %t4255) :: float
    %t4168 = call core.add(%t4183, %t4236) :: float
    %t4256 = load_input "income" :: float
    %t4257 = load_input "state_rate" :: float
    %t4258 = call core.mul(%t4256, %t4257) :: float
    %t4170 = call core.add(%t4168, %t4258) :: float
    %t4259 = load_input "income" :: float
    %t4260 = load_input "local_rate" :: float
    %t4261 = call core.mul(%t4259, %t4260) :: float
    %t4172 = call core.add(%t4170, %t4261) :: float
    %t4161 = load_input "income" :: float
    %t4162 = const 1.0 :: float
    %t4163 = make_tuple(%t4161, %t4162) :: tuple<float>
    %t4164 = fold %t4163 fn="agg.max" :: float
    %t4165 = call core.div(%t4172, %t4164) :: float
    %acc4270 = decl_acc :: float
    %t4271 = load_input "fed" :: array
    %t4272 = load_field t4271["married_joint"] :: any
    %t4273 = load_field t4272["rates"] :: any
    loop rates id=L64 in %t4273 as el=%t4274, idx=%t4275
      %t4291 = load_input "income" :: float
      %t4292 = load_input "fed" :: any
      %t4293 = load_field t4292["married_joint"] :: any
      %t4294 = load_field t4293["std"] :: float
      %t4295 = call core.sub(%t4291, %t4294) :: float
      %t4296 = const 0 :: integer
      %t4297 = make_tuple(%t4295, %t4296) :: tuple<float, integer>
      %t4298 = fold %t4297 fn="agg.max" :: float
      %t4280 = load_input "fed" :: array
      %t4281 = load_field t4280["married_joint"] :: any
      %t4282 = load_field t4281["rates"] :: any
      %t4299 = load_input "fed" :: array
      %t4300 = load_field t4299["married_joint"] :: any
      %t4301 = load_field t4300["rates"] :: any
      %t4302 = load_field t4274["lo"] :: float
      %t4285 = call core.sub(%t4298, %t4302) :: float
      %t4286 = const 0 :: integer
      %t4303 = load_input "fed" :: array
      %t4304 = load_field t4303["married_joint"] :: any
      %t4305 = load_field t4304["rates"] :: any
      %t4312 = load_input "fed" :: array
      %t4313 = load_field t4312["married_joint"] :: any
      %t4314 = load_field t4313["rates"] :: any
      %t4315 = load_field t4274["hi"] :: float
      %t4307 = const -1 :: integer
      %t4308 = call core.eq(%t4315, %t4307) :: boolean
      %t4309 = const 100000000000.0 :: float
      %t4316 = load_input "fed" :: array
      %t4317 = load_field t4316["married_joint"] :: any
      %t4318 = load_field t4317["rates"] :: any
      %t4319 = load_field t4274["hi"] :: float
      %t4311 = select %t4308, %t4309, %t4319 :: float
      %t4320 = load_input "fed" :: array
      %t4321 = load_field t4320["married_joint"] :: any
      %t4322 = load_field t4321["rates"] :: any
      %t4323 = load_field t4274["lo"] :: float
      %t4289 = call core.sub(%t4311, %t4323) :: float
      %t4290 = call core.clamp(%t4285, %t4286, %t4289) :: float
      %t4324 = load_input "fed" :: array
      %t4325 = load_field t4324["married_joint"] :: any
      %t4326 = load_field t4325["rates"] :: any
      %t4327 = load_field t4274["rate"] :: float
      %t4278 = call core.mul(%t4290, %t4327) :: float
      %acc4270 = acc_add agg.sum(%acc4270, %t4278) :: float
    end_loop
    %t4279 = acc_load %acc4270 :: float
    %t4334 = load_input "income" :: float
    %t4335 = const 168600.0 :: float
    %t4336 = make_tuple(%t4334, %t4335) :: tuple<float>
    %t4337 = fold %t4336 fn="agg.min" :: float
    %t4338 = const 0.062 :: float
    %t4339 = call core.mul(%t4337, %t4338) :: float
    %t4341 = load_input "income" :: float
    %t4342 = const 0.0145 :: float
    %t4343 = call core.mul(%t4341, %t4342) :: float
    %t4330 = call core.add(%t4339, %t4343) :: float
    %t4344 = load_input "income" :: float
    %t4345 = const 250000.0 :: float
    %t4346 = call core.sub(%t4344, %t4345) :: float
    %t4347 = const 0 :: integer
    %t4348 = make_tuple(%t4346, %t4347) :: tuple<float, integer>
    %t4349 = fold %t4348 fn="agg.max" :: float
    %t4350 = const 0.009 :: float
    %t4351 = call core.mul(%t4349, %t4350) :: float
    %t4332 = call core.add(%t4330, %t4351) :: float
    %t4264 = call core.add(%t4279, %t4332) :: float
    %t4352 = load_input "income" :: float
    %t4353 = load_input "state_rate" :: float
    %t4354 = call core.mul(%t4352, %t4353) :: float
    %t4266 = call core.add(%t4264, %t4354) :: float
    %t4355 = load_input "income" :: float
    %t4356 = load_input "local_rate" :: float
    %t4357 = call core.mul(%t4355, %t4356) :: float
    %t4268 = call core.add(%t4266, %t4357) :: float
    %t578 = make_object{effective: %t4165, tax: %t4268} :: object
    %t4358 = load_input "income" :: float
    %acc4369 = decl_acc :: float
    %t4370 = load_input "fed" :: array
    %t4371 = load_field t4370["married_joint"] :: any
    %t4372 = load_field t4371["rates"] :: any
    loop rates id=L65 in %t4372 as el=%t4373, idx=%t4374
      %t4390 = load_input "income" :: float
      %t4391 = load_input "fed" :: any
      %t4392 = load_field t4391["married_joint"] :: any
      %t4393 = load_field t4392["std"] :: float
      %t4394 = call core.sub(%t4390, %t4393) :: float
      %t4395 = const 0 :: integer
      %t4396 = make_tuple(%t4394, %t4395) :: tuple<float, integer>
      %t4397 = fold %t4396 fn="agg.max" :: float
      %t4379 = load_input "fed" :: array
      %t4380 = load_field t4379["married_joint"] :: any
      %t4381 = load_field t4380["rates"] :: any
      %t4398 = load_input "fed" :: array
      %t4399 = load_field t4398["married_joint"] :: any
      %t4400 = load_field t4399["rates"] :: any
      %t4401 = load_field t4373["lo"] :: float
      %t4384 = call core.sub(%t4397, %t4401) :: float
      %t4385 = const 0 :: integer
      %t4402 = load_input "fed" :: array
      %t4403 = load_field t4402["married_joint"] :: any
      %t4404 = load_field t4403["rates"] :: any
      %t4411 = load_input "fed" :: array
      %t4412 = load_field t4411["married_joint"] :: any
      %t4413 = load_field t4412["rates"] :: any
      %t4414 = load_field t4373["hi"] :: float
      %t4406 = const -1 :: integer
      %t4407 = call core.eq(%t4414, %t4406) :: boolean
      %t4408 = const 100000000000.0 :: float
      %t4415 = load_input "fed" :: array
      %t4416 = load_field t4415["married_joint"] :: any
      %t4417 = load_field t4416["rates"] :: any
      %t4418 = load_field t4373["hi"] :: float
      %t4410 = select %t4407, %t4408, %t4418 :: float
      %t4419 = load_input "fed" :: array
      %t4420 = load_field t4419["married_joint"] :: any
      %t4421 = load_field t4420["rates"] :: any
      %t4422 = load_field t4373["lo"] :: float
      %t4388 = call core.sub(%t4410, %t4422) :: float
      %t4389 = call core.clamp(%t4384, %t4385, %t4388) :: float
      %t4423 = load_input "fed" :: array
      %t4424 = load_field t4423["married_joint"] :: any
      %t4425 = load_field t4424["rates"] :: any
      %t4426 = load_field t4373["rate"] :: float
      %t4377 = call core.mul(%t4389, %t4426) :: float
      %acc4369 = acc_add agg.sum(%acc4369, %t4377) :: float
    end_loop
    %t4378 = acc_load %acc4369 :: float
    %t4433 = load_input "income" :: float
    %t4434 = const 168600.0 :: float
    %t4435 = make_tuple(%t4433, %t4434) :: tuple<float>
    %t4436 = fold %t4435 fn="agg.min" :: float
    %t4437 = const 0.062 :: float
    %t4438 = call core.mul(%t4436, %t4437) :: float
    %t4440 = load_input "income" :: float
    %t4441 = const 0.0145 :: float
    %t4442 = call core.mul(%t4440, %t4441) :: float
    %t4429 = call core.add(%t4438, %t4442) :: float
    %t4443 = load_input "income" :: float
    %t4444 = const 250000.0 :: float
    %t4445 = call core.sub(%t4443, %t4444) :: float
    %t4446 = const 0 :: integer
    %t4447 = make_tuple(%t4445, %t4446) :: tuple<float, integer>
    %t4448 = fold %t4447 fn="agg.max" :: float
    %t4449 = const 0.009 :: float
    %t4450 = call core.mul(%t4448, %t4449) :: float
    %t4431 = call core.add(%t4429, %t4450) :: float
    %t4363 = call core.add(%t4378, %t4431) :: float
    %t4451 = load_input "income" :: float
    %t4452 = load_input "state_rate" :: float
    %t4453 = call core.mul(%t4451, %t4452) :: float
    %t4365 = call core.add(%t4363, %t4453) :: float
    %t4454 = load_input "income" :: float
    %t4455 = load_input "local_rate" :: float
    %t4456 = call core.mul(%t4454, %t4455) :: float
    %t4367 = call core.add(%t4365, %t4456) :: float
    %t4360 = call core.sub(%t4358, %t4367) :: float
    %t580 = load_input "retirement_contrib" :: float
    %t4460 = load_input "income" :: float
    %acc4471 = decl_acc :: float
    %t4472 = load_input "fed" :: array
    %t4473 = load_field t4472["married_joint"] :: any
    %t4474 = load_field t4473["rates"] :: any
    loop rates id=L66 in %t4474 as el=%t4475, idx=%t4476
      %t4492 = load_input "income" :: float
      %t4493 = load_input "fed" :: any
      %t4494 = load_field t4493["married_joint"] :: any
      %t4495 = load_field t4494["std"] :: float
      %t4496 = call core.sub(%t4492, %t4495) :: float
      %t4497 = const 0 :: integer
      %t4498 = make_tuple(%t4496, %t4497) :: tuple<float, integer>
      %t4499 = fold %t4498 fn="agg.max" :: float
      %t4481 = load_input "fed" :: array
      %t4482 = load_field t4481["married_joint"] :: any
      %t4483 = load_field t4482["rates"] :: any
      %t4500 = load_input "fed" :: array
      %t4501 = load_field t4500["married_joint"] :: any
      %t4502 = load_field t4501["rates"] :: any
      %t4503 = load_field t4475["lo"] :: float
      %t4486 = call core.sub(%t4499, %t4503) :: float
      %t4487 = const 0 :: integer
      %t4504 = load_input "fed" :: array
      %t4505 = load_field t4504["married_joint"] :: any
      %t4506 = load_field t4505["rates"] :: any
      %t4513 = load_input "fed" :: array
      %t4514 = load_field t4513["married_joint"] :: any
      %t4515 = load_field t4514["rates"] :: any
      %t4516 = load_field t4475["hi"] :: float
      %t4508 = const -1 :: integer
      %t4509 = call core.eq(%t4516, %t4508) :: boolean
      %t4510 = const 100000000000.0 :: float
      %t4517 = load_input "fed" :: array
      %t4518 = load_field t4517["married_joint"] :: any
      %t4519 = load_field t4518["rates"] :: any
      %t4520 = load_field t4475["hi"] :: float
      %t4512 = select %t4509, %t4510, %t4520 :: float
      %t4521 = load_input "fed" :: array
      %t4522 = load_field t4521["married_joint"] :: any
      %t4523 = load_field t4522["rates"] :: any
      %t4524 = load_field t4475["lo"] :: float
      %t4490 = call core.sub(%t4512, %t4524) :: float
      %t4491 = call core.clamp(%t4486, %t4487, %t4490) :: float
      %t4525 = load_input "fed" :: array
      %t4526 = load_field t4525["married_joint"] :: any
      %t4527 = load_field t4526["rates"] :: any
      %t4528 = load_field t4475["rate"] :: float
      %t4479 = call core.mul(%t4491, %t4528) :: float
      %acc4471 = acc_add agg.sum(%acc4471, %t4479) :: float
    end_loop
    %t4480 = acc_load %acc4471 :: float
    %t4535 = load_input "income" :: float
    %t4536 = const 168600.0 :: float
    %t4537 = make_tuple(%t4535, %t4536) :: tuple<float>
    %t4538 = fold %t4537 fn="agg.min" :: float
    %t4539 = const 0.062 :: float
    %t4540 = call core.mul(%t4538, %t4539) :: float
    %t4542 = load_input "income" :: float
    %t4543 = const 0.0145 :: float
    %t4544 = call core.mul(%t4542, %t4543) :: float
    %t4531 = call core.add(%t4540, %t4544) :: float
    %t4545 = load_input "income" :: float
    %t4546 = const 250000.0 :: float
    %t4547 = call core.sub(%t4545, %t4546) :: float
    %t4548 = const 0 :: integer
    %t4549 = make_tuple(%t4547, %t4548) :: tuple<float, integer>
    %t4550 = fold %t4549 fn="agg.max" :: float
    %t4551 = const 0.009 :: float
    %t4552 = call core.mul(%t4550, %t4551) :: float
    %t4533 = call core.add(%t4531, %t4552) :: float
    %t4465 = call core.add(%t4480, %t4533) :: float
    %t4553 = load_input "income" :: float
    %t4554 = load_input "state_rate" :: float
    %t4555 = call core.mul(%t4553, %t4554) :: float
    %t4467 = call core.add(%t4465, %t4555) :: float
    %t4556 = load_input "income" :: float
    %t4557 = load_input "local_rate" :: float
    %t4558 = call core.mul(%t4556, %t4557) :: float
    %t4469 = call core.add(%t4467, %t4558) :: float
    %t4462 = call core.sub(%t4460, %t4469) :: float
    %t4458 = load_input "retirement_contrib" :: float
    %t4459 = call core.sub(%t4462, %t4458) :: float
    %t582 = make_object{federal: %t564, fica: %t567, state: %t571, local: %t575, total: %t578, after_tax: %t4360, retirement_contrib: %t580, take_home: %t4459} :: object
    %acc4560 = decl_acc :: float
    %t4561 = load_input "fed" :: array
    %t4562 = load_field t4561["married_separate"] :: any
    %t4563 = load_field t4562["rates"] :: any
    loop rates id=L67 in %t4563 as el=%t4564, idx=%t4565
      %t4581 = load_input "income" :: float
      %t4582 = load_input "fed" :: any
      %t4583 = load_field t4582["married_separate"] :: any
      %t4584 = load_field t4583["std"] :: float
      %t4585 = call core.sub(%t4581, %t4584) :: float
      %t4586 = const 0 :: integer
      %t4587 = make_tuple(%t4585, %t4586) :: tuple<float, integer>
      %t4588 = fold %t4587 fn="agg.max" :: float
      %t4589 = load_input "income" :: float
      %t4590 = load_input "fed" :: any
      %t4591 = load_field t4590["married_separate"] :: any
      %t4592 = load_field t4591["std"] :: float
      %t4593 = call core.sub(%t4589, %t4592) :: float
      %t4594 = const 0 :: integer
      %t4595 = make_tuple(%t4593, %t4594) :: tuple<float, integer>
      %t4596 = fold %t4595 fn="agg.max" :: float
      %t4571 = load_input "fed" :: array
      %t4572 = load_field t4571["married_separate"] :: any
      %t4573 = load_field t4572["rates"] :: any
      %t4597 = load_input "fed" :: array
      %t4598 = load_field t4597["married_separate"] :: any
      %t4599 = load_field t4598["rates"] :: any
      %t4600 = load_field t4564["lo"] :: float
      %t4577 = call core.gte(%t4588, %t4600) :: boolean
      %t4601 = load_input "fed" :: array
      %t4602 = load_field t4601["married_separate"] :: any
      %t4603 = load_field t4602["rates"] :: any
      %t4610 = load_input "fed" :: array
      %t4611 = load_field t4610["married_separate"] :: any
      %t4612 = load_field t4611["rates"] :: any
      %t4613 = load_field t4564["hi"] :: float
      %t4605 = const -1 :: integer
      %t4606 = call core.eq(%t4613, %t4605) :: boolean
      %t4607 = const 100000000000.0 :: float
      %t4614 = load_input "fed" :: array
      %t4615 = load_field t4614["married_separate"] :: any
      %t4616 = load_field t4615["rates"] :: any
      %t4617 = load_field t4564["hi"] :: float
      %t4609 = select %t4606, %t4607, %t4617 :: float
      %t4579 = call core.lt(%t4596, %t4609) :: boolean
      %t4580 = call core.and(%t4577, %t4579) :: boolean
      %t4618 = load_input "fed" :: array
      %t4619 = load_field t4618["married_separate"] :: any
      %t4620 = load_field t4619["rates"] :: any
      %t4621 = load_field t4564["rate"] :: float
      %t4568 = const 0 :: integer
      %t4569 = select %t4580, %t4621, %t4568 :: float
      %acc4560 = acc_add agg.sum(%acc4560, %t4569) :: float
    end_loop
    %t4570 = acc_load %acc4560 :: float
    %acc4629 = decl_acc :: float
    %t4630 = load_input "fed" :: array
    %t4631 = load_field t4630["married_separate"] :: any
    %t4632 = load_field t4631["rates"] :: any
    loop rates id=L68 in %t4632 as el=%t4633, idx=%t4634
      %t4650 = load_input "income" :: float
      %t4651 = load_input "fed" :: any
      %t4652 = load_field t4651["married_separate"] :: any
      %t4653 = load_field t4652["std"] :: float
      %t4654 = call core.sub(%t4650, %t4653) :: float
      %t4655 = const 0 :: integer
      %t4656 = make_tuple(%t4654, %t4655) :: tuple<float, integer>
      %t4657 = fold %t4656 fn="agg.max" :: float
      %t4639 = load_input "fed" :: array
      %t4640 = load_field t4639["married_separate"] :: any
      %t4641 = load_field t4640["rates"] :: any
      %t4658 = load_input "fed" :: array
      %t4659 = load_field t4658["married_separate"] :: any
      %t4660 = load_field t4659["rates"] :: any
      %t4661 = load_field t4633["lo"] :: float
      %t4644 = call core.sub(%t4657, %t4661) :: float
      %t4645 = const 0 :: integer
      %t4662 = load_input "fed" :: array
      %t4663 = load_field t4662["married_separate"] :: any
      %t4664 = load_field t4663["rates"] :: any
      %t4671 = load_input "fed" :: array
      %t4672 = load_field t4671["married_separate"] :: any
      %t4673 = load_field t4672["rates"] :: any
      %t4674 = load_field t4633["hi"] :: float
      %t4666 = const -1 :: integer
      %t4667 = call core.eq(%t4674, %t4666) :: boolean
      %t4668 = const 100000000000.0 :: float
      %t4675 = load_input "fed" :: array
      %t4676 = load_field t4675["married_separate"] :: any
      %t4677 = load_field t4676["rates"] :: any
      %t4678 = load_field t4633["hi"] :: float
      %t4670 = select %t4667, %t4668, %t4678 :: float
      %t4679 = load_input "fed" :: array
      %t4680 = load_field t4679["married_separate"] :: any
      %t4681 = load_field t4680["rates"] :: any
      %t4682 = load_field t4633["lo"] :: float
      %t4648 = call core.sub(%t4670, %t4682) :: float
      %t4649 = call core.clamp(%t4644, %t4645, %t4648) :: float
      %t4683 = load_input "fed" :: array
      %t4684 = load_field t4683["married_separate"] :: any
      %t4685 = load_field t4684["rates"] :: any
      %t4686 = load_field t4633["rate"] :: float
      %t4637 = call core.mul(%t4649, %t4686) :: float
      %acc4629 = acc_add agg.sum(%acc4629, %t4637) :: float
    end_loop
    %t4638 = acc_load %acc4629 :: float
    %t4623 = load_input "income" :: float
    %t4624 = const 1.0 :: float
    %t4625 = make_tuple(%t4623, %t4624) :: tuple<float>
    %t4626 = fold %t4625 fn="agg.max" :: float
    %t4627 = call core.div(%t4638, %t4626) :: float
    %acc4688 = decl_acc :: float
    %t4689 = load_input "fed" :: array
    %t4690 = load_field t4689["married_separate"] :: any
    %t4691 = load_field t4690["rates"] :: any
    loop rates id=L69 in %t4691 as el=%t4692, idx=%t4693
      %t4709 = load_input "income" :: float
      %t4710 = load_input "fed" :: any
      %t4711 = load_field t4710["married_separate"] :: any
      %t4712 = load_field t4711["std"] :: float
      %t4713 = call core.sub(%t4709, %t4712) :: float
      %t4714 = const 0 :: integer
      %t4715 = make_tuple(%t4713, %t4714) :: tuple<float, integer>
      %t4716 = fold %t4715 fn="agg.max" :: float
      %t4698 = load_input "fed" :: array
      %t4699 = load_field t4698["married_separate"] :: any
      %t4700 = load_field t4699["rates"] :: any
      %t4717 = load_input "fed" :: array
      %t4718 = load_field t4717["married_separate"] :: any
      %t4719 = load_field t4718["rates"] :: any
      %t4720 = load_field t4692["lo"] :: float
      %t4703 = call core.sub(%t4716, %t4720) :: float
      %t4704 = const 0 :: integer
      %t4721 = load_input "fed" :: array
      %t4722 = load_field t4721["married_separate"] :: any
      %t4723 = load_field t4722["rates"] :: any
      %t4730 = load_input "fed" :: array
      %t4731 = load_field t4730["married_separate"] :: any
      %t4732 = load_field t4731["rates"] :: any
      %t4733 = load_field t4692["hi"] :: float
      %t4725 = const -1 :: integer
      %t4726 = call core.eq(%t4733, %t4725) :: boolean
      %t4727 = const 100000000000.0 :: float
      %t4734 = load_input "fed" :: array
      %t4735 = load_field t4734["married_separate"] :: any
      %t4736 = load_field t4735["rates"] :: any
      %t4737 = load_field t4692["hi"] :: float
      %t4729 = select %t4726, %t4727, %t4737 :: float
      %t4738 = load_input "fed" :: array
      %t4739 = load_field t4738["married_separate"] :: any
      %t4740 = load_field t4739["rates"] :: any
      %t4741 = load_field t4692["lo"] :: float
      %t4707 = call core.sub(%t4729, %t4741) :: float
      %t4708 = call core.clamp(%t4703, %t4704, %t4707) :: float
      %t4742 = load_input "fed" :: array
      %t4743 = load_field t4742["married_separate"] :: any
      %t4744 = load_field t4743["rates"] :: any
      %t4745 = load_field t4692["rate"] :: float
      %t4696 = call core.mul(%t4708, %t4745) :: float
      %acc4688 = acc_add agg.sum(%acc4688, %t4696) :: float
    end_loop
    %t4697 = acc_load %acc4688 :: float
    %t586 = make_object{marginal: %t4570, effective: %t4627, tax: %t4697} :: object
    %t4758 = load_input "income" :: float
    %t4759 = const 168600.0 :: float
    %t4760 = make_tuple(%t4758, %t4759) :: tuple<float>
    %t4761 = fold %t4760 fn="agg.min" :: float
    %t4762 = const 0.062 :: float
    %t4763 = call core.mul(%t4761, %t4762) :: float
    %t4765 = load_input "income" :: float
    %t4766 = const 0.0145 :: float
    %t4767 = call core.mul(%t4765, %t4766) :: float
    %t4754 = call core.add(%t4763, %t4767) :: float
    %t4768 = load_input "income" :: float
    %t4769 = const 125000.0 :: float
    %t4770 = call core.sub(%t4768, %t4769) :: float
    %t4771 = const 0 :: integer
    %t4772 = make_tuple(%t4770, %t4771) :: tuple<float, integer>
    %t4773 = fold %t4772 fn="agg.max" :: float
    %t4774 = const 0.009 :: float
    %t4775 = call core.mul(%t4773, %t4774) :: float
    %t4756 = call core.add(%t4754, %t4775) :: float
    %t4747 = load_input "income" :: float
    %t4748 = const 1.0 :: float
    %t4749 = make_tuple(%t4747, %t4748) :: tuple<float>
    %t4750 = fold %t4749 fn="agg.max" :: float
    %t4751 = call core.div(%t4756, %t4750) :: float
    %t4782 = load_input "income" :: float
    %t4783 = const 168600.0 :: float
    %t4784 = make_tuple(%t4782, %t4783) :: tuple<float>
    %t4785 = fold %t4784 fn="agg.min" :: float
    %t4786 = const 0.062 :: float
    %t4787 = call core.mul(%t4785, %t4786) :: float
    %t4789 = load_input "income" :: float
    %t4790 = const 0.0145 :: float
    %t4791 = call core.mul(%t4789, %t4790) :: float
    %t4778 = call core.add(%t4787, %t4791) :: float
    %t4792 = load_input "income" :: float
    %t4793 = const 125000.0 :: float
    %t4794 = call core.sub(%t4792, %t4793) :: float
    %t4795 = const 0 :: integer
    %t4796 = make_tuple(%t4794, %t4795) :: tuple<float, integer>
    %t4797 = fold %t4796 fn="agg.max" :: float
    %t4798 = const 0.009 :: float
    %t4799 = call core.mul(%t4797, %t4798) :: float
    %t4780 = call core.add(%t4778, %t4799) :: float
    %t589 = make_object{effective: %t4751, tax: %t4780} :: object
    %t590 = load_input "state_rate" :: float
    %t591 = load_input "state_rate" :: float
    %t4800 = load_input "income" :: float
    %t4801 = load_input "state_rate" :: float
    %t4802 = call core.mul(%t4800, %t4801) :: float
    %t593 = make_object{marginal: %t590, effective: %t591, tax: %t4802} :: object
    %t594 = load_input "local_rate" :: float
    %t595 = load_input "local_rate" :: float
    %t4803 = load_input "income" :: float
    %t4804 = load_input "local_rate" :: float
    %t4805 = call core.mul(%t4803, %t4804) :: float
    %t597 = make_object{marginal: %t594, effective: %t595, tax: %t4805} :: object
    %acc4820 = decl_acc :: float
    %t4821 = load_input "fed" :: array
    %t4822 = load_field t4821["married_separate"] :: any
    %t4823 = load_field t4822["rates"] :: any
    loop rates id=L70 in %t4823 as el=%t4824, idx=%t4825
      %t4841 = load_input "income" :: float
      %t4842 = load_input "fed" :: any
      %t4843 = load_field t4842["married_separate"] :: any
      %t4844 = load_field t4843["std"] :: float
      %t4845 = call core.sub(%t4841, %t4844) :: float
      %t4846 = const 0 :: integer
      %t4847 = make_tuple(%t4845, %t4846) :: tuple<float, integer>
      %t4848 = fold %t4847 fn="agg.max" :: float
      %t4830 = load_input "fed" :: array
      %t4831 = load_field t4830["married_separate"] :: any
      %t4832 = load_field t4831["rates"] :: any
      %t4849 = load_input "fed" :: array
      %t4850 = load_field t4849["married_separate"] :: any
      %t4851 = load_field t4850["rates"] :: any
      %t4852 = load_field t4824["lo"] :: float
      %t4835 = call core.sub(%t4848, %t4852) :: float
      %t4836 = const 0 :: integer
      %t4853 = load_input "fed" :: array
      %t4854 = load_field t4853["married_separate"] :: any
      %t4855 = load_field t4854["rates"] :: any
      %t4862 = load_input "fed" :: array
      %t4863 = load_field t4862["married_separate"] :: any
      %t4864 = load_field t4863["rates"] :: any
      %t4865 = load_field t4824["hi"] :: float
      %t4857 = const -1 :: integer
      %t4858 = call core.eq(%t4865, %t4857) :: boolean
      %t4859 = const 100000000000.0 :: float
      %t4866 = load_input "fed" :: array
      %t4867 = load_field t4866["married_separate"] :: any
      %t4868 = load_field t4867["rates"] :: any
      %t4869 = load_field t4824["hi"] :: float
      %t4861 = select %t4858, %t4859, %t4869 :: float
      %t4870 = load_input "fed" :: array
      %t4871 = load_field t4870["married_separate"] :: any
      %t4872 = load_field t4871["rates"] :: any
      %t4873 = load_field t4824["lo"] :: float
      %t4839 = call core.sub(%t4861, %t4873) :: float
      %t4840 = call core.clamp(%t4835, %t4836, %t4839) :: float
      %t4874 = load_input "fed" :: array
      %t4875 = load_field t4874["married_separate"] :: any
      %t4876 = load_field t4875["rates"] :: any
      %t4877 = load_field t4824["rate"] :: float
      %t4828 = call core.mul(%t4840, %t4877) :: float
      %acc4820 = acc_add agg.sum(%acc4820, %t4828) :: float
    end_loop
    %t4829 = acc_load %acc4820 :: float
    %t4884 = load_input "income" :: float
    %t4885 = const 168600.0 :: float
    %t4886 = make_tuple(%t4884, %t4885) :: tuple<float>
    %t4887 = fold %t4886 fn="agg.min" :: float
    %t4888 = const 0.062 :: float
    %t4889 = call core.mul(%t4887, %t4888) :: float
    %t4891 = load_input "income" :: float
    %t4892 = const 0.0145 :: float
    %t4893 = call core.mul(%t4891, %t4892) :: float
    %t4880 = call core.add(%t4889, %t4893) :: float
    %t4894 = load_input "income" :: float
    %t4895 = const 125000.0 :: float
    %t4896 = call core.sub(%t4894, %t4895) :: float
    %t4897 = const 0 :: integer
    %t4898 = make_tuple(%t4896, %t4897) :: tuple<float, integer>
    %t4899 = fold %t4898 fn="agg.max" :: float
    %t4900 = const 0.009 :: float
    %t4901 = call core.mul(%t4899, %t4900) :: float
    %t4882 = call core.add(%t4880, %t4901) :: float
    %t4814 = call core.add(%t4829, %t4882) :: float
    %t4902 = load_input "income" :: float
    %t4903 = load_input "state_rate" :: float
    %t4904 = call core.mul(%t4902, %t4903) :: float
    %t4816 = call core.add(%t4814, %t4904) :: float
    %t4905 = load_input "income" :: float
    %t4906 = load_input "local_rate" :: float
    %t4907 = call core.mul(%t4905, %t4906) :: float
    %t4818 = call core.add(%t4816, %t4907) :: float
    %t4807 = load_input "income" :: float
    %t4808 = const 1.0 :: float
    %t4809 = make_tuple(%t4807, %t4808) :: tuple<float>
    %t4810 = fold %t4809 fn="agg.max" :: float
    %t4811 = call core.div(%t4818, %t4810) :: float
    %acc4916 = decl_acc :: float
    %t4917 = load_input "fed" :: array
    %t4918 = load_field t4917["married_separate"] :: any
    %t4919 = load_field t4918["rates"] :: any
    loop rates id=L71 in %t4919 as el=%t4920, idx=%t4921
      %t4937 = load_input "income" :: float
      %t4938 = load_input "fed" :: any
      %t4939 = load_field t4938["married_separate"] :: any
      %t4940 = load_field t4939["std"] :: float
      %t4941 = call core.sub(%t4937, %t4940) :: float
      %t4942 = const 0 :: integer
      %t4943 = make_tuple(%t4941, %t4942) :: tuple<float, integer>
      %t4944 = fold %t4943 fn="agg.max" :: float
      %t4926 = load_input "fed" :: array
      %t4927 = load_field t4926["married_separate"] :: any
      %t4928 = load_field t4927["rates"] :: any
      %t4945 = load_input "fed" :: array
      %t4946 = load_field t4945["married_separate"] :: any
      %t4947 = load_field t4946["rates"] :: any
      %t4948 = load_field t4920["lo"] :: float
      %t4931 = call core.sub(%t4944, %t4948) :: float
      %t4932 = const 0 :: integer
      %t4949 = load_input "fed" :: array
      %t4950 = load_field t4949["married_separate"] :: any
      %t4951 = load_field t4950["rates"] :: any
      %t4958 = load_input "fed" :: array
      %t4959 = load_field t4958["married_separate"] :: any
      %t4960 = load_field t4959["rates"] :: any
      %t4961 = load_field t4920["hi"] :: float
      %t4953 = const -1 :: integer
      %t4954 = call core.eq(%t4961, %t4953) :: boolean
      %t4955 = const 100000000000.0 :: float
      %t4962 = load_input "fed" :: array
      %t4963 = load_field t4962["married_separate"] :: any
      %t4964 = load_field t4963["rates"] :: any
      %t4965 = load_field t4920["hi"] :: float
      %t4957 = select %t4954, %t4955, %t4965 :: float
      %t4966 = load_input "fed" :: array
      %t4967 = load_field t4966["married_separate"] :: any
      %t4968 = load_field t4967["rates"] :: any
      %t4969 = load_field t4920["lo"] :: float
      %t4935 = call core.sub(%t4957, %t4969) :: float
      %t4936 = call core.clamp(%t4931, %t4932, %t4935) :: float
      %t4970 = load_input "fed" :: array
      %t4971 = load_field t4970["married_separate"] :: any
      %t4972 = load_field t4971["rates"] :: any
      %t4973 = load_field t4920["rate"] :: float
      %t4924 = call core.mul(%t4936, %t4973) :: float
      %acc4916 = acc_add agg.sum(%acc4916, %t4924) :: float
    end_loop
    %t4925 = acc_load %acc4916 :: float
    %t4980 = load_input "income" :: float
    %t4981 = const 168600.0 :: float
    %t4982 = make_tuple(%t4980, %t4981) :: tuple<float>
    %t4983 = fold %t4982 fn="agg.min" :: float
    %t4984 = const 0.062 :: float
    %t4985 = call core.mul(%t4983, %t4984) :: float
    %t4987 = load_input "income" :: float
    %t4988 = const 0.0145 :: float
    %t4989 = call core.mul(%t4987, %t4988) :: float
    %t4976 = call core.add(%t4985, %t4989) :: float
    %t4990 = load_input "income" :: float
    %t4991 = const 125000.0 :: float
    %t4992 = call core.sub(%t4990, %t4991) :: float
    %t4993 = const 0 :: integer
    %t4994 = make_tuple(%t4992, %t4993) :: tuple<float, integer>
    %t4995 = fold %t4994 fn="agg.max" :: float
    %t4996 = const 0.009 :: float
    %t4997 = call core.mul(%t4995, %t4996) :: float
    %t4978 = call core.add(%t4976, %t4997) :: float
    %t4910 = call core.add(%t4925, %t4978) :: float
    %t4998 = load_input "income" :: float
    %t4999 = load_input "state_rate" :: float
    %t5000 = call core.mul(%t4998, %t4999) :: float
    %t4912 = call core.add(%t4910, %t5000) :: float
    %t5001 = load_input "income" :: float
    %t5002 = load_input "local_rate" :: float
    %t5003 = call core.mul(%t5001, %t5002) :: float
    %t4914 = call core.add(%t4912, %t5003) :: float
    %t600 = make_object{effective: %t4811, tax: %t4914} :: object
    %t5004 = load_input "income" :: float
    %acc5015 = decl_acc :: float
    %t5016 = load_input "fed" :: array
    %t5017 = load_field t5016["married_separate"] :: any
    %t5018 = load_field t5017["rates"] :: any
    loop rates id=L72 in %t5018 as el=%t5019, idx=%t5020
      %t5036 = load_input "income" :: float
      %t5037 = load_input "fed" :: any
      %t5038 = load_field t5037["married_separate"] :: any
      %t5039 = load_field t5038["std"] :: float
      %t5040 = call core.sub(%t5036, %t5039) :: float
      %t5041 = const 0 :: integer
      %t5042 = make_tuple(%t5040, %t5041) :: tuple<float, integer>
      %t5043 = fold %t5042 fn="agg.max" :: float
      %t5025 = load_input "fed" :: array
      %t5026 = load_field t5025["married_separate"] :: any
      %t5027 = load_field t5026["rates"] :: any
      %t5044 = load_input "fed" :: array
      %t5045 = load_field t5044["married_separate"] :: any
      %t5046 = load_field t5045["rates"] :: any
      %t5047 = load_field t5019["lo"] :: float
      %t5030 = call core.sub(%t5043, %t5047) :: float
      %t5031 = const 0 :: integer
      %t5048 = load_input "fed" :: array
      %t5049 = load_field t5048["married_separate"] :: any
      %t5050 = load_field t5049["rates"] :: any
      %t5057 = load_input "fed" :: array
      %t5058 = load_field t5057["married_separate"] :: any
      %t5059 = load_field t5058["rates"] :: any
      %t5060 = load_field t5019["hi"] :: float
      %t5052 = const -1 :: integer
      %t5053 = call core.eq(%t5060, %t5052) :: boolean
      %t5054 = const 100000000000.0 :: float
      %t5061 = load_input "fed" :: array
      %t5062 = load_field t5061["married_separate"] :: any
      %t5063 = load_field t5062["rates"] :: any
      %t5064 = load_field t5019["hi"] :: float
      %t5056 = select %t5053, %t5054, %t5064 :: float
      %t5065 = load_input "fed" :: array
      %t5066 = load_field t5065["married_separate"] :: any
      %t5067 = load_field t5066["rates"] :: any
      %t5068 = load_field t5019["lo"] :: float
      %t5034 = call core.sub(%t5056, %t5068) :: float
      %t5035 = call core.clamp(%t5030, %t5031, %t5034) :: float
      %t5069 = load_input "fed" :: array
      %t5070 = load_field t5069["married_separate"] :: any
      %t5071 = load_field t5070["rates"] :: any
      %t5072 = load_field t5019["rate"] :: float
      %t5023 = call core.mul(%t5035, %t5072) :: float
      %acc5015 = acc_add agg.sum(%acc5015, %t5023) :: float
    end_loop
    %t5024 = acc_load %acc5015 :: float
    %t5079 = load_input "income" :: float
    %t5080 = const 168600.0 :: float
    %t5081 = make_tuple(%t5079, %t5080) :: tuple<float>
    %t5082 = fold %t5081 fn="agg.min" :: float
    %t5083 = const 0.062 :: float
    %t5084 = call core.mul(%t5082, %t5083) :: float
    %t5086 = load_input "income" :: float
    %t5087 = const 0.0145 :: float
    %t5088 = call core.mul(%t5086, %t5087) :: float
    %t5075 = call core.add(%t5084, %t5088) :: float
    %t5089 = load_input "income" :: float
    %t5090 = const 125000.0 :: float
    %t5091 = call core.sub(%t5089, %t5090) :: float
    %t5092 = const 0 :: integer
    %t5093 = make_tuple(%t5091, %t5092) :: tuple<float, integer>
    %t5094 = fold %t5093 fn="agg.max" :: float
    %t5095 = const 0.009 :: float
    %t5096 = call core.mul(%t5094, %t5095) :: float
    %t5077 = call core.add(%t5075, %t5096) :: float
    %t5009 = call core.add(%t5024, %t5077) :: float
    %t5097 = load_input "income" :: float
    %t5098 = load_input "state_rate" :: float
    %t5099 = call core.mul(%t5097, %t5098) :: float
    %t5011 = call core.add(%t5009, %t5099) :: float
    %t5100 = load_input "income" :: float
    %t5101 = load_input "local_rate" :: float
    %t5102 = call core.mul(%t5100, %t5101) :: float
    %t5013 = call core.add(%t5011, %t5102) :: float
    %t5006 = call core.sub(%t5004, %t5013) :: float
    %t602 = load_input "retirement_contrib" :: float
    %t5106 = load_input "income" :: float
    %acc5117 = decl_acc :: float
    %t5118 = load_input "fed" :: array
    %t5119 = load_field t5118["married_separate"] :: any
    %t5120 = load_field t5119["rates"] :: any
    loop rates id=L73 in %t5120 as el=%t5121, idx=%t5122
      %t5138 = load_input "income" :: float
      %t5139 = load_input "fed" :: any
      %t5140 = load_field t5139["married_separate"] :: any
      %t5141 = load_field t5140["std"] :: float
      %t5142 = call core.sub(%t5138, %t5141) :: float
      %t5143 = const 0 :: integer
      %t5144 = make_tuple(%t5142, %t5143) :: tuple<float, integer>
      %t5145 = fold %t5144 fn="agg.max" :: float
      %t5127 = load_input "fed" :: array
      %t5128 = load_field t5127["married_separate"] :: any
      %t5129 = load_field t5128["rates"] :: any
      %t5146 = load_input "fed" :: array
      %t5147 = load_field t5146["married_separate"] :: any
      %t5148 = load_field t5147["rates"] :: any
      %t5149 = load_field t5121["lo"] :: float
      %t5132 = call core.sub(%t5145, %t5149) :: float
      %t5133 = const 0 :: integer
      %t5150 = load_input "fed" :: array
      %t5151 = load_field t5150["married_separate"] :: any
      %t5152 = load_field t5151["rates"] :: any
      %t5159 = load_input "fed" :: array
      %t5160 = load_field t5159["married_separate"] :: any
      %t5161 = load_field t5160["rates"] :: any
      %t5162 = load_field t5121["hi"] :: float
      %t5154 = const -1 :: integer
      %t5155 = call core.eq(%t5162, %t5154) :: boolean
      %t5156 = const 100000000000.0 :: float
      %t5163 = load_input "fed" :: array
      %t5164 = load_field t5163["married_separate"] :: any
      %t5165 = load_field t5164["rates"] :: any
      %t5166 = load_field t5121["hi"] :: float
      %t5158 = select %t5155, %t5156, %t5166 :: float
      %t5167 = load_input "fed" :: array
      %t5168 = load_field t5167["married_separate"] :: any
      %t5169 = load_field t5168["rates"] :: any
      %t5170 = load_field t5121["lo"] :: float
      %t5136 = call core.sub(%t5158, %t5170) :: float
      %t5137 = call core.clamp(%t5132, %t5133, %t5136) :: float
      %t5171 = load_input "fed" :: array
      %t5172 = load_field t5171["married_separate"] :: any
      %t5173 = load_field t5172["rates"] :: any
      %t5174 = load_field t5121["rate"] :: float
      %t5125 = call core.mul(%t5137, %t5174) :: float
      %acc5117 = acc_add agg.sum(%acc5117, %t5125) :: float
    end_loop
    %t5126 = acc_load %acc5117 :: float
    %t5181 = load_input "income" :: float
    %t5182 = const 168600.0 :: float
    %t5183 = make_tuple(%t5181, %t5182) :: tuple<float>
    %t5184 = fold %t5183 fn="agg.min" :: float
    %t5185 = const 0.062 :: float
    %t5186 = call core.mul(%t5184, %t5185) :: float
    %t5188 = load_input "income" :: float
    %t5189 = const 0.0145 :: float
    %t5190 = call core.mul(%t5188, %t5189) :: float
    %t5177 = call core.add(%t5186, %t5190) :: float
    %t5191 = load_input "income" :: float
    %t5192 = const 125000.0 :: float
    %t5193 = call core.sub(%t5191, %t5192) :: float
    %t5194 = const 0 :: integer
    %t5195 = make_tuple(%t5193, %t5194) :: tuple<float, integer>
    %t5196 = fold %t5195 fn="agg.max" :: float
    %t5197 = const 0.009 :: float
    %t5198 = call core.mul(%t5196, %t5197) :: float
    %t5179 = call core.add(%t5177, %t5198) :: float
    %t5111 = call core.add(%t5126, %t5179) :: float
    %t5199 = load_input "income" :: float
    %t5200 = load_input "state_rate" :: float
    %t5201 = call core.mul(%t5199, %t5200) :: float
    %t5113 = call core.add(%t5111, %t5201) :: float
    %t5202 = load_input "income" :: float
    %t5203 = load_input "local_rate" :: float
    %t5204 = call core.mul(%t5202, %t5203) :: float
    %t5115 = call core.add(%t5113, %t5204) :: float
    %t5108 = call core.sub(%t5106, %t5115) :: float
    %t5104 = load_input "retirement_contrib" :: float
    %t5105 = call core.sub(%t5108, %t5104) :: float
    %t604 = make_object{federal: %t586, fica: %t589, state: %t593, local: %t597, total: %t600, after_tax: %t5006, retirement_contrib: %t602, take_home: %t5105} :: object
    %acc5206 = decl_acc :: float
    %t5207 = load_input "fed" :: array
    %t5208 = load_field t5207["head_of_household"] :: any
    %t5209 = load_field t5208["rates"] :: any
    loop rates id=L74 in %t5209 as el=%t5210, idx=%t5211
      %t5227 = load_input "income" :: float
      %t5228 = load_input "fed" :: any
      %t5229 = load_field t5228["head_of_household"] :: any
      %t5230 = load_field t5229["std"] :: float
      %t5231 = call core.sub(%t5227, %t5230) :: float
      %t5232 = const 0 :: integer
      %t5233 = make_tuple(%t5231, %t5232) :: tuple<float, integer>
      %t5234 = fold %t5233 fn="agg.max" :: float
      %t5235 = load_input "income" :: float
      %t5236 = load_input "fed" :: any
      %t5237 = load_field t5236["head_of_household"] :: any
      %t5238 = load_field t5237["std"] :: float
      %t5239 = call core.sub(%t5235, %t5238) :: float
      %t5240 = const 0 :: integer
      %t5241 = make_tuple(%t5239, %t5240) :: tuple<float, integer>
      %t5242 = fold %t5241 fn="agg.max" :: float
      %t5217 = load_input "fed" :: array
      %t5218 = load_field t5217["head_of_household"] :: any
      %t5219 = load_field t5218["rates"] :: any
      %t5243 = load_input "fed" :: array
      %t5244 = load_field t5243["head_of_household"] :: any
      %t5245 = load_field t5244["rates"] :: any
      %t5246 = load_field t5210["lo"] :: float
      %t5223 = call core.gte(%t5234, %t5246) :: boolean
      %t5247 = load_input "fed" :: array
      %t5248 = load_field t5247["head_of_household"] :: any
      %t5249 = load_field t5248["rates"] :: any
      %t5256 = load_input "fed" :: array
      %t5257 = load_field t5256["head_of_household"] :: any
      %t5258 = load_field t5257["rates"] :: any
      %t5259 = load_field t5210["hi"] :: float
      %t5251 = const -1 :: integer
      %t5252 = call core.eq(%t5259, %t5251) :: boolean
      %t5253 = const 100000000000.0 :: float
      %t5260 = load_input "fed" :: array
      %t5261 = load_field t5260["head_of_household"] :: any
      %t5262 = load_field t5261["rates"] :: any
      %t5263 = load_field t5210["hi"] :: float
      %t5255 = select %t5252, %t5253, %t5263 :: float
      %t5225 = call core.lt(%t5242, %t5255) :: boolean
      %t5226 = call core.and(%t5223, %t5225) :: boolean
      %t5264 = load_input "fed" :: array
      %t5265 = load_field t5264["head_of_household"] :: any
      %t5266 = load_field t5265["rates"] :: any
      %t5267 = load_field t5210["rate"] :: float
      %t5214 = const 0 :: integer
      %t5215 = select %t5226, %t5267, %t5214 :: float
      %acc5206 = acc_add agg.sum(%acc5206, %t5215) :: float
    end_loop
    %t5216 = acc_load %acc5206 :: float
    %acc5275 = decl_acc :: float
    %t5276 = load_input "fed" :: array
    %t5277 = load_field t5276["head_of_household"] :: any
    %t5278 = load_field t5277["rates"] :: any
    loop rates id=L75 in %t5278 as el=%t5279, idx=%t5280
      %t5296 = load_input "income" :: float
      %t5297 = load_input "fed" :: any
      %t5298 = load_field t5297["head_of_household"] :: any
      %t5299 = load_field t5298["std"] :: float
      %t5300 = call core.sub(%t5296, %t5299) :: float
      %t5301 = const 0 :: integer
      %t5302 = make_tuple(%t5300, %t5301) :: tuple<float, integer>
      %t5303 = fold %t5302 fn="agg.max" :: float
      %t5285 = load_input "fed" :: array
      %t5286 = load_field t5285["head_of_household"] :: any
      %t5287 = load_field t5286["rates"] :: any
      %t5304 = load_input "fed" :: array
      %t5305 = load_field t5304["head_of_household"] :: any
      %t5306 = load_field t5305["rates"] :: any
      %t5307 = load_field t5279["lo"] :: float
      %t5290 = call core.sub(%t5303, %t5307) :: float
      %t5291 = const 0 :: integer
      %t5308 = load_input "fed" :: array
      %t5309 = load_field t5308["head_of_household"] :: any
      %t5310 = load_field t5309["rates"] :: any
      %t5317 = load_input "fed" :: array
      %t5318 = load_field t5317["head_of_household"] :: any
      %t5319 = load_field t5318["rates"] :: any
      %t5320 = load_field t5279["hi"] :: float
      %t5312 = const -1 :: integer
      %t5313 = call core.eq(%t5320, %t5312) :: boolean
      %t5314 = const 100000000000.0 :: float
      %t5321 = load_input "fed" :: array
      %t5322 = load_field t5321["head_of_household"] :: any
      %t5323 = load_field t5322["rates"] :: any
      %t5324 = load_field t5279["hi"] :: float
      %t5316 = select %t5313, %t5314, %t5324 :: float
      %t5325 = load_input "fed" :: array
      %t5326 = load_field t5325["head_of_household"] :: any
      %t5327 = load_field t5326["rates"] :: any
      %t5328 = load_field t5279["lo"] :: float
      %t5294 = call core.sub(%t5316, %t5328) :: float
      %t5295 = call core.clamp(%t5290, %t5291, %t5294) :: float
      %t5329 = load_input "fed" :: array
      %t5330 = load_field t5329["head_of_household"] :: any
      %t5331 = load_field t5330["rates"] :: any
      %t5332 = load_field t5279["rate"] :: float
      %t5283 = call core.mul(%t5295, %t5332) :: float
      %acc5275 = acc_add agg.sum(%acc5275, %t5283) :: float
    end_loop
    %t5284 = acc_load %acc5275 :: float
    %t5269 = load_input "income" :: float
    %t5270 = const 1.0 :: float
    %t5271 = make_tuple(%t5269, %t5270) :: tuple<float>
    %t5272 = fold %t5271 fn="agg.max" :: float
    %t5273 = call core.div(%t5284, %t5272) :: float
    %acc5334 = decl_acc :: float
    %t5335 = load_input "fed" :: array
    %t5336 = load_field t5335["head_of_household"] :: any
    %t5337 = load_field t5336["rates"] :: any
    loop rates id=L76 in %t5337 as el=%t5338, idx=%t5339
      %t5355 = load_input "income" :: float
      %t5356 = load_input "fed" :: any
      %t5357 = load_field t5356["head_of_household"] :: any
      %t5358 = load_field t5357["std"] :: float
      %t5359 = call core.sub(%t5355, %t5358) :: float
      %t5360 = const 0 :: integer
      %t5361 = make_tuple(%t5359, %t5360) :: tuple<float, integer>
      %t5362 = fold %t5361 fn="agg.max" :: float
      %t5344 = load_input "fed" :: array
      %t5345 = load_field t5344["head_of_household"] :: any
      %t5346 = load_field t5345["rates"] :: any
      %t5363 = load_input "fed" :: array
      %t5364 = load_field t5363["head_of_household"] :: any
      %t5365 = load_field t5364["rates"] :: any
      %t5366 = load_field t5338["lo"] :: float
      %t5349 = call core.sub(%t5362, %t5366) :: float
      %t5350 = const 0 :: integer
      %t5367 = load_input "fed" :: array
      %t5368 = load_field t5367["head_of_household"] :: any
      %t5369 = load_field t5368["rates"] :: any
      %t5376 = load_input "fed" :: array
      %t5377 = load_field t5376["head_of_household"] :: any
      %t5378 = load_field t5377["rates"] :: any
      %t5379 = load_field t5338["hi"] :: float
      %t5371 = const -1 :: integer
      %t5372 = call core.eq(%t5379, %t5371) :: boolean
      %t5373 = const 100000000000.0 :: float
      %t5380 = load_input "fed" :: array
      %t5381 = load_field t5380["head_of_household"] :: any
      %t5382 = load_field t5381["rates"] :: any
      %t5383 = load_field t5338["hi"] :: float
      %t5375 = select %t5372, %t5373, %t5383 :: float
      %t5384 = load_input "fed" :: array
      %t5385 = load_field t5384["head_of_household"] :: any
      %t5386 = load_field t5385["rates"] :: any
      %t5387 = load_field t5338["lo"] :: float
      %t5353 = call core.sub(%t5375, %t5387) :: float
      %t5354 = call core.clamp(%t5349, %t5350, %t5353) :: float
      %t5388 = load_input "fed" :: array
      %t5389 = load_field t5388["head_of_household"] :: any
      %t5390 = load_field t5389["rates"] :: any
      %t5391 = load_field t5338["rate"] :: float
      %t5342 = call core.mul(%t5354, %t5391) :: float
      %acc5334 = acc_add agg.sum(%acc5334, %t5342) :: float
    end_loop
    %t5343 = acc_load %acc5334 :: float
    %t608 = make_object{marginal: %t5216, effective: %t5273, tax: %t5343} :: object
    %t5404 = load_input "income" :: float
    %t5405 = const 168600.0 :: float
    %t5406 = make_tuple(%t5404, %t5405) :: tuple<float>
    %t5407 = fold %t5406 fn="agg.min" :: float
    %t5408 = const 0.062 :: float
    %t5409 = call core.mul(%t5407, %t5408) :: float
    %t5411 = load_input "income" :: float
    %t5412 = const 0.0145 :: float
    %t5413 = call core.mul(%t5411, %t5412) :: float
    %t5400 = call core.add(%t5409, %t5413) :: float
    %t5414 = load_input "income" :: float
    %t5415 = const 200000.0 :: float
    %t5416 = call core.sub(%t5414, %t5415) :: float
    %t5417 = const 0 :: integer
    %t5418 = make_tuple(%t5416, %t5417) :: tuple<float, integer>
    %t5419 = fold %t5418 fn="agg.max" :: float
    %t5420 = const 0.009 :: float
    %t5421 = call core.mul(%t5419, %t5420) :: float
    %t5402 = call core.add(%t5400, %t5421) :: float
    %t5393 = load_input "income" :: float
    %t5394 = const 1.0 :: float
    %t5395 = make_tuple(%t5393, %t5394) :: tuple<float>
    %t5396 = fold %t5395 fn="agg.max" :: float
    %t5397 = call core.div(%t5402, %t5396) :: float
    %t5428 = load_input "income" :: float
    %t5429 = const 168600.0 :: float
    %t5430 = make_tuple(%t5428, %t5429) :: tuple<float>
    %t5431 = fold %t5430 fn="agg.min" :: float
    %t5432 = const 0.062 :: float
    %t5433 = call core.mul(%t5431, %t5432) :: float
    %t5435 = load_input "income" :: float
    %t5436 = const 0.0145 :: float
    %t5437 = call core.mul(%t5435, %t5436) :: float
    %t5424 = call core.add(%t5433, %t5437) :: float
    %t5438 = load_input "income" :: float
    %t5439 = const 200000.0 :: float
    %t5440 = call core.sub(%t5438, %t5439) :: float
    %t5441 = const 0 :: integer
    %t5442 = make_tuple(%t5440, %t5441) :: tuple<float, integer>
    %t5443 = fold %t5442 fn="agg.max" :: float
    %t5444 = const 0.009 :: float
    %t5445 = call core.mul(%t5443, %t5444) :: float
    %t5426 = call core.add(%t5424, %t5445) :: float
    %t611 = make_object{effective: %t5397, tax: %t5426} :: object
    %t612 = load_input "state_rate" :: float
    %t613 = load_input "state_rate" :: float
    %t5446 = load_input "income" :: float
    %t5447 = load_input "state_rate" :: float
    %t5448 = call core.mul(%t5446, %t5447) :: float
    %t615 = make_object{marginal: %t612, effective: %t613, tax: %t5448} :: object
    %t616 = load_input "local_rate" :: float
    %t617 = load_input "local_rate" :: float
    %t5449 = load_input "income" :: float
    %t5450 = load_input "local_rate" :: float
    %t5451 = call core.mul(%t5449, %t5450) :: float
    %t619 = make_object{marginal: %t616, effective: %t617, tax: %t5451} :: object
    %acc5466 = decl_acc :: float
    %t5467 = load_input "fed" :: array
    %t5468 = load_field t5467["head_of_household"] :: any
    %t5469 = load_field t5468["rates"] :: any
    loop rates id=L77 in %t5469 as el=%t5470, idx=%t5471
      %t5487 = load_input "income" :: float
      %t5488 = load_input "fed" :: any
      %t5489 = load_field t5488["head_of_household"] :: any
      %t5490 = load_field t5489["std"] :: float
      %t5491 = call core.sub(%t5487, %t5490) :: float
      %t5492 = const 0 :: integer
      %t5493 = make_tuple(%t5491, %t5492) :: tuple<float, integer>
      %t5494 = fold %t5493 fn="agg.max" :: float
      %t5476 = load_input "fed" :: array
      %t5477 = load_field t5476["head_of_household"] :: any
      %t5478 = load_field t5477["rates"] :: any
      %t5495 = load_input "fed" :: array
      %t5496 = load_field t5495["head_of_household"] :: any
      %t5497 = load_field t5496["rates"] :: any
      %t5498 = load_field t5470["lo"] :: float
      %t5481 = call core.sub(%t5494, %t5498) :: float
      %t5482 = const 0 :: integer
      %t5499 = load_input "fed" :: array
      %t5500 = load_field t5499["head_of_household"] :: any
      %t5501 = load_field t5500["rates"] :: any
      %t5508 = load_input "fed" :: array
      %t5509 = load_field t5508["head_of_household"] :: any
      %t5510 = load_field t5509["rates"] :: any
      %t5511 = load_field t5470["hi"] :: float
      %t5503 = const -1 :: integer
      %t5504 = call core.eq(%t5511, %t5503) :: boolean
      %t5505 = const 100000000000.0 :: float
      %t5512 = load_input "fed" :: array
      %t5513 = load_field t5512["head_of_household"] :: any
      %t5514 = load_field t5513["rates"] :: any
      %t5515 = load_field t5470["hi"] :: float
      %t5507 = select %t5504, %t5505, %t5515 :: float
      %t5516 = load_input "fed" :: array
      %t5517 = load_field t5516["head_of_household"] :: any
      %t5518 = load_field t5517["rates"] :: any
      %t5519 = load_field t5470["lo"] :: float
      %t5485 = call core.sub(%t5507, %t5519) :: float
      %t5486 = call core.clamp(%t5481, %t5482, %t5485) :: float
      %t5520 = load_input "fed" :: array
      %t5521 = load_field t5520["head_of_household"] :: any
      %t5522 = load_field t5521["rates"] :: any
      %t5523 = load_field t5470["rate"] :: float
      %t5474 = call core.mul(%t5486, %t5523) :: float
      %acc5466 = acc_add agg.sum(%acc5466, %t5474) :: float
    end_loop
    %t5475 = acc_load %acc5466 :: float
    %t5530 = load_input "income" :: float
    %t5531 = const 168600.0 :: float
    %t5532 = make_tuple(%t5530, %t5531) :: tuple<float>
    %t5533 = fold %t5532 fn="agg.min" :: float
    %t5534 = const 0.062 :: float
    %t5535 = call core.mul(%t5533, %t5534) :: float
    %t5537 = load_input "income" :: float
    %t5538 = const 0.0145 :: float
    %t5539 = call core.mul(%t5537, %t5538) :: float
    %t5526 = call core.add(%t5535, %t5539) :: float
    %t5540 = load_input "income" :: float
    %t5541 = const 200000.0 :: float
    %t5542 = call core.sub(%t5540, %t5541) :: float
    %t5543 = const 0 :: integer
    %t5544 = make_tuple(%t5542, %t5543) :: tuple<float, integer>
    %t5545 = fold %t5544 fn="agg.max" :: float
    %t5546 = const 0.009 :: float
    %t5547 = call core.mul(%t5545, %t5546) :: float
    %t5528 = call core.add(%t5526, %t5547) :: float
    %t5460 = call core.add(%t5475, %t5528) :: float
    %t5548 = load_input "income" :: float
    %t5549 = load_input "state_rate" :: float
    %t5550 = call core.mul(%t5548, %t5549) :: float
    %t5462 = call core.add(%t5460, %t5550) :: float
    %t5551 = load_input "income" :: float
    %t5552 = load_input "local_rate" :: float
    %t5553 = call core.mul(%t5551, %t5552) :: float
    %t5464 = call core.add(%t5462, %t5553) :: float
    %t5453 = load_input "income" :: float
    %t5454 = const 1.0 :: float
    %t5455 = make_tuple(%t5453, %t5454) :: tuple<float>
    %t5456 = fold %t5455 fn="agg.max" :: float
    %t5457 = call core.div(%t5464, %t5456) :: float
    %acc5562 = decl_acc :: float
    %t5563 = load_input "fed" :: array
    %t5564 = load_field t5563["head_of_household"] :: any
    %t5565 = load_field t5564["rates"] :: any
    loop rates id=L78 in %t5565 as el=%t5566, idx=%t5567
      %t5583 = load_input "income" :: float
      %t5584 = load_input "fed" :: any
      %t5585 = load_field t5584["head_of_household"] :: any
      %t5586 = load_field t5585["std"] :: float
      %t5587 = call core.sub(%t5583, %t5586) :: float
      %t5588 = const 0 :: integer
      %t5589 = make_tuple(%t5587, %t5588) :: tuple<float, integer>
      %t5590 = fold %t5589 fn="agg.max" :: float
      %t5572 = load_input "fed" :: array
      %t5573 = load_field t5572["head_of_household"] :: any
      %t5574 = load_field t5573["rates"] :: any
      %t5591 = load_input "fed" :: array
      %t5592 = load_field t5591["head_of_household"] :: any
      %t5593 = load_field t5592["rates"] :: any
      %t5594 = load_field t5566["lo"] :: float
      %t5577 = call core.sub(%t5590, %t5594) :: float
      %t5578 = const 0 :: integer
      %t5595 = load_input "fed" :: array
      %t5596 = load_field t5595["head_of_household"] :: any
      %t5597 = load_field t5596["rates"] :: any
      %t5604 = load_input "fed" :: array
      %t5605 = load_field t5604["head_of_household"] :: any
      %t5606 = load_field t5605["rates"] :: any
      %t5607 = load_field t5566["hi"] :: float
      %t5599 = const -1 :: integer
      %t5600 = call core.eq(%t5607, %t5599) :: boolean
      %t5601 = const 100000000000.0 :: float
      %t5608 = load_input "fed" :: array
      %t5609 = load_field t5608["head_of_household"] :: any
      %t5610 = load_field t5609["rates"] :: any
      %t5611 = load_field t5566["hi"] :: float
      %t5603 = select %t5600, %t5601, %t5611 :: float
      %t5612 = load_input "fed" :: array
      %t5613 = load_field t5612["head_of_household"] :: any
      %t5614 = load_field t5613["rates"] :: any
      %t5615 = load_field t5566["lo"] :: float
      %t5581 = call core.sub(%t5603, %t5615) :: float
      %t5582 = call core.clamp(%t5577, %t5578, %t5581) :: float
      %t5616 = load_input "fed" :: array
      %t5617 = load_field t5616["head_of_household"] :: any
      %t5618 = load_field t5617["rates"] :: any
      %t5619 = load_field t5566["rate"] :: float
      %t5570 = call core.mul(%t5582, %t5619) :: float
      %acc5562 = acc_add agg.sum(%acc5562, %t5570) :: float
    end_loop
    %t5571 = acc_load %acc5562 :: float
    %t5626 = load_input "income" :: float
    %t5627 = const 168600.0 :: float
    %t5628 = make_tuple(%t5626, %t5627) :: tuple<float>
    %t5629 = fold %t5628 fn="agg.min" :: float
    %t5630 = const 0.062 :: float
    %t5631 = call core.mul(%t5629, %t5630) :: float
    %t5633 = load_input "income" :: float
    %t5634 = const 0.0145 :: float
    %t5635 = call core.mul(%t5633, %t5634) :: float
    %t5622 = call core.add(%t5631, %t5635) :: float
    %t5636 = load_input "income" :: float
    %t5637 = const 200000.0 :: float
    %t5638 = call core.sub(%t5636, %t5637) :: float
    %t5639 = const 0 :: integer
    %t5640 = make_tuple(%t5638, %t5639) :: tuple<float, integer>
    %t5641 = fold %t5640 fn="agg.max" :: float
    %t5642 = const 0.009 :: float
    %t5643 = call core.mul(%t5641, %t5642) :: float
    %t5624 = call core.add(%t5622, %t5643) :: float
    %t5556 = call core.add(%t5571, %t5624) :: float
    %t5644 = load_input "income" :: float
    %t5645 = load_input "state_rate" :: float
    %t5646 = call core.mul(%t5644, %t5645) :: float
    %t5558 = call core.add(%t5556, %t5646) :: float
    %t5647 = load_input "income" :: float
    %t5648 = load_input "local_rate" :: float
    %t5649 = call core.mul(%t5647, %t5648) :: float
    %t5560 = call core.add(%t5558, %t5649) :: float
    %t622 = make_object{effective: %t5457, tax: %t5560} :: object
    %t5650 = load_input "income" :: float
    %acc5661 = decl_acc :: float
    %t5662 = load_input "fed" :: array
    %t5663 = load_field t5662["head_of_household"] :: any
    %t5664 = load_field t5663["rates"] :: any
    loop rates id=L79 in %t5664 as el=%t5665, idx=%t5666
      %t5682 = load_input "income" :: float
      %t5683 = load_input "fed" :: any
      %t5684 = load_field t5683["head_of_household"] :: any
      %t5685 = load_field t5684["std"] :: float
      %t5686 = call core.sub(%t5682, %t5685) :: float
      %t5687 = const 0 :: integer
      %t5688 = make_tuple(%t5686, %t5687) :: tuple<float, integer>
      %t5689 = fold %t5688 fn="agg.max" :: float
      %t5671 = load_input "fed" :: array
      %t5672 = load_field t5671["head_of_household"] :: any
      %t5673 = load_field t5672["rates"] :: any
      %t5690 = load_input "fed" :: array
      %t5691 = load_field t5690["head_of_household"] :: any
      %t5692 = load_field t5691["rates"] :: any
      %t5693 = load_field t5665["lo"] :: float
      %t5676 = call core.sub(%t5689, %t5693) :: float
      %t5677 = const 0 :: integer
      %t5694 = load_input "fed" :: array
      %t5695 = load_field t5694["head_of_household"] :: any
      %t5696 = load_field t5695["rates"] :: any
      %t5703 = load_input "fed" :: array
      %t5704 = load_field t5703["head_of_household"] :: any
      %t5705 = load_field t5704["rates"] :: any
      %t5706 = load_field t5665["hi"] :: float
      %t5698 = const -1 :: integer
      %t5699 = call core.eq(%t5706, %t5698) :: boolean
      %t5700 = const 100000000000.0 :: float
      %t5707 = load_input "fed" :: array
      %t5708 = load_field t5707["head_of_household"] :: any
      %t5709 = load_field t5708["rates"] :: any
      %t5710 = load_field t5665["hi"] :: float
      %t5702 = select %t5699, %t5700, %t5710 :: float
      %t5711 = load_input "fed" :: array
      %t5712 = load_field t5711["head_of_household"] :: any
      %t5713 = load_field t5712["rates"] :: any
      %t5714 = load_field t5665["lo"] :: float
      %t5680 = call core.sub(%t5702, %t5714) :: float
      %t5681 = call core.clamp(%t5676, %t5677, %t5680) :: float
      %t5715 = load_input "fed" :: array
      %t5716 = load_field t5715["head_of_household"] :: any
      %t5717 = load_field t5716["rates"] :: any
      %t5718 = load_field t5665["rate"] :: float
      %t5669 = call core.mul(%t5681, %t5718) :: float
      %acc5661 = acc_add agg.sum(%acc5661, %t5669) :: float
    end_loop
    %t5670 = acc_load %acc5661 :: float
    %t5725 = load_input "income" :: float
    %t5726 = const 168600.0 :: float
    %t5727 = make_tuple(%t5725, %t5726) :: tuple<float>
    %t5728 = fold %t5727 fn="agg.min" :: float
    %t5729 = const 0.062 :: float
    %t5730 = call core.mul(%t5728, %t5729) :: float
    %t5732 = load_input "income" :: float
    %t5733 = const 0.0145 :: float
    %t5734 = call core.mul(%t5732, %t5733) :: float
    %t5721 = call core.add(%t5730, %t5734) :: float
    %t5735 = load_input "income" :: float
    %t5736 = const 200000.0 :: float
    %t5737 = call core.sub(%t5735, %t5736) :: float
    %t5738 = const 0 :: integer
    %t5739 = make_tuple(%t5737, %t5738) :: tuple<float, integer>
    %t5740 = fold %t5739 fn="agg.max" :: float
    %t5741 = const 0.009 :: float
    %t5742 = call core.mul(%t5740, %t5741) :: float
    %t5723 = call core.add(%t5721, %t5742) :: float
    %t5655 = call core.add(%t5670, %t5723) :: float
    %t5743 = load_input "income" :: float
    %t5744 = load_input "state_rate" :: float
    %t5745 = call core.mul(%t5743, %t5744) :: float
    %t5657 = call core.add(%t5655, %t5745) :: float
    %t5746 = load_input "income" :: float
    %t5747 = load_input "local_rate" :: float
    %t5748 = call core.mul(%t5746, %t5747) :: float
    %t5659 = call core.add(%t5657, %t5748) :: float
    %t5652 = call core.sub(%t5650, %t5659) :: float
    %t624 = load_input "retirement_contrib" :: float
    %t5752 = load_input "income" :: float
    %acc5763 = decl_acc :: float
    %t5764 = load_input "fed" :: array
    %t5765 = load_field t5764["head_of_household"] :: any
    %t5766 = load_field t5765["rates"] :: any
    loop rates id=L80 in %t5766 as el=%t5767, idx=%t5768
      %t5784 = load_input "income" :: float
      %t5785 = load_input "fed" :: any
      %t5786 = load_field t5785["head_of_household"] :: any
      %t5787 = load_field t5786["std"] :: float
      %t5788 = call core.sub(%t5784, %t5787) :: float
      %t5789 = const 0 :: integer
      %t5790 = make_tuple(%t5788, %t5789) :: tuple<float, integer>
      %t5791 = fold %t5790 fn="agg.max" :: float
      %t5773 = load_input "fed" :: array
      %t5774 = load_field t5773["head_of_household"] :: any
      %t5775 = load_field t5774["rates"] :: any
      %t5792 = load_input "fed" :: array
      %t5793 = load_field t5792["head_of_household"] :: any
      %t5794 = load_field t5793["rates"] :: any
      %t5795 = load_field t5767["lo"] :: float
      %t5778 = call core.sub(%t5791, %t5795) :: float
      %t5779 = const 0 :: integer
      %t5796 = load_input "fed" :: array
      %t5797 = load_field t5796["head_of_household"] :: any
      %t5798 = load_field t5797["rates"] :: any
      %t5805 = load_input "fed" :: array
      %t5806 = load_field t5805["head_of_household"] :: any
      %t5807 = load_field t5806["rates"] :: any
      %t5808 = load_field t5767["hi"] :: float
      %t5800 = const -1 :: integer
      %t5801 = call core.eq(%t5808, %t5800) :: boolean
      %t5802 = const 100000000000.0 :: float
      %t5809 = load_input "fed" :: array
      %t5810 = load_field t5809["head_of_household"] :: any
      %t5811 = load_field t5810["rates"] :: any
      %t5812 = load_field t5767["hi"] :: float
      %t5804 = select %t5801, %t5802, %t5812 :: float
      %t5813 = load_input "fed" :: array
      %t5814 = load_field t5813["head_of_household"] :: any
      %t5815 = load_field t5814["rates"] :: any
      %t5816 = load_field t5767["lo"] :: float
      %t5782 = call core.sub(%t5804, %t5816) :: float
      %t5783 = call core.clamp(%t5778, %t5779, %t5782) :: float
      %t5817 = load_input "fed" :: array
      %t5818 = load_field t5817["head_of_household"] :: any
      %t5819 = load_field t5818["rates"] :: any
      %t5820 = load_field t5767["rate"] :: float
      %t5771 = call core.mul(%t5783, %t5820) :: float
      %acc5763 = acc_add agg.sum(%acc5763, %t5771) :: float
    end_loop
    %t5772 = acc_load %acc5763 :: float
    %t5827 = load_input "income" :: float
    %t5828 = const 168600.0 :: float
    %t5829 = make_tuple(%t5827, %t5828) :: tuple<float>
    %t5830 = fold %t5829 fn="agg.min" :: float
    %t5831 = const 0.062 :: float
    %t5832 = call core.mul(%t5830, %t5831) :: float
    %t5834 = load_input "income" :: float
    %t5835 = const 0.0145 :: float
    %t5836 = call core.mul(%t5834, %t5835) :: float
    %t5823 = call core.add(%t5832, %t5836) :: float
    %t5837 = load_input "income" :: float
    %t5838 = const 200000.0 :: float
    %t5839 = call core.sub(%t5837, %t5838) :: float
    %t5840 = const 0 :: integer
    %t5841 = make_tuple(%t5839, %t5840) :: tuple<float, integer>
    %t5842 = fold %t5841 fn="agg.max" :: float
    %t5843 = const 0.009 :: float
    %t5844 = call core.mul(%t5842, %t5843) :: float
    %t5825 = call core.add(%t5823, %t5844) :: float
    %t5757 = call core.add(%t5772, %t5825) :: float
    %t5845 = load_input "income" :: float
    %t5846 = load_input "state_rate" :: float
    %t5847 = call core.mul(%t5845, %t5846) :: float
    %t5759 = call core.add(%t5757, %t5847) :: float
    %t5848 = load_input "income" :: float
    %t5849 = load_input "local_rate" :: float
    %t5850 = call core.mul(%t5848, %t5849) :: float
    %t5761 = call core.add(%t5759, %t5850) :: float
    %t5754 = call core.sub(%t5752, %t5761) :: float
    %t5750 = load_input "retirement_contrib" :: float
    %t5751 = call core.sub(%t5754, %t5750) :: float
    %t626 = make_object{federal: %t608, fica: %t611, state: %t615, local: %t619, total: %t622, after_tax: %t5652, retirement_contrib: %t624, take_home: %t5751} :: object
    %t627 = make_object{single: %t560, married_joint: %t582, married_separate: %t604, head_of_household: %t626} :: object
    yield %t627
  )
)
