(LIR
  (Declaration state_tax
    %t1 = load_input "income" :: float
    %t2 = load_input "state_rate" :: float
    %t3 = call core.mul:numeric(%t1, %t2) :: float
    yield %t3
  )
  (Declaration local_tax
    %t4 = load_input "income" :: float
    %t5 = load_input "local_rate" :: float
    %t6 = call core.mul:numeric(%t4, %t5) :: float
    yield %t6
  )
  (Declaration taxable
    %t7 = load_input "statuses" :: array
    loop statuses id=L1 in %t7 as el=%statuses_el_8, idx=%statuses_i_9
      %t10 = load_input "income" :: float
      %t11 = load_field statuses_el_8["std"] :: float
      %t12 = call core.sub(%t10, %t11) :: float
      %t13 = const 0 :: integer
      %t14 = make_tuple(%t12, %t13) :: tuple<float, integer>
      %t15 = fold %t14 fn="agg.max" :: float
      yield %t15
    end_loop
  )
  (Declaration lo
    %t16 = load_input "statuses" :: array
    loop statuses id=L2 in %t16 as el=%statuses_el_17, idx=%statuses_i_18
      %t19 = load_field statuses_el_17["rates"] :: any
      loop rates id=L3 in %t19 as el=%rates_el_20, idx=%rates_i_21
        %t22 = load_field rates_el_20["lo"] :: float
        yield %t22
      end_loop
    end_loop
  )
  (Declaration hi
    %t23 = load_input "statuses" :: array
    loop statuses id=L4 in %t23 as el=%statuses_el_24, idx=%statuses_i_25
      %t26 = load_field statuses_el_24["rates"] :: any
      loop rates id=L5 in %t26 as el=%rates_el_27, idx=%rates_i_28
        %t29 = load_field rates_el_27["hi"] :: float
        yield %t29
      end_loop
    end_loop
  )
  (Declaration rate
    %t30 = load_input "statuses" :: array
    loop statuses id=L6 in %t30 as el=%statuses_el_31, idx=%statuses_i_32
      %t33 = load_field statuses_el_31["rates"] :: any
      loop rates id=L7 in %t33 as el=%rates_el_34, idx=%rates_i_35
        %t36 = load_field rates_el_34["rate"] :: float
        yield %t36
      end_loop
    end_loop
  )
  (Declaration big_hi
    %t37 = const 100000000000.0 :: float
    yield %t37
  )
  (Declaration hi_eff
    %t38 = load_input "statuses" :: array
    loop statuses id=L8 in %t38 as el=%statuses_el_39, idx=%statuses_i_40
      %t41 = load_field statuses_el_39["rates"] :: any
      loop rates id=L9 in %t41 as el=%rates_el_42, idx=%rates_i_43
        %t44 = load_decl hi axes=[statuses, rates] :: float
        %t45 = const -1 :: integer
        %t46 = call core.eq(%t44, %t45) :: boolean
        %t47 = const 100000000000.0 :: float
        %t48 = load_decl hi axes=[statuses, rates] :: float
        %t49 = select %t46, %t47, %t48 :: float
        yield %t49
      end_loop
    end_loop
  )
  (Declaration amt
    %t50 = load_input "statuses" :: array
    loop statuses id=L10 in %t50 as el=%statuses_el_51, idx=%statuses_i_52
      %t53 = load_field statuses_el_51["rates"] :: any
      loop rates id=L11 in %t53 as el=%rates_el_54, idx=%rates_i_55
        %t56 = load_decl taxable axes=[statuses] :: float
        %t57 = load_decl lo axes=[statuses, rates] :: float
        %t58 = call core.sub(%t56, %t57) :: float
        %t59 = const 0 :: integer
        %t60 = load_decl hi_eff axes=[statuses, rates] :: float
        %t61 = load_decl lo axes=[statuses, rates] :: float
        %t62 = call core.sub(%t60, %t61) :: float
        %t63 = call core.clamp(%t58, %t59, %t62) :: float
        yield %t63
      end_loop
    end_loop
  )
  (Declaration fed_tax
    %t64 = load_input "statuses" :: array
    loop statuses id=L12 in %t64 as el=%statuses_el_65, idx=%statuses_i_66
      %acc_67 = decl_acc :: float
      %t68 = load_field statuses_el_65["rates"] :: any
      loop rates id=L13 in %t68 as el=%rates_el_69, idx=%rates_i_70
        %t71 = load_decl amt axes=[statuses, rates] :: float
        %t72 = load_decl rate axes=[statuses, rates] :: float
        %t73 = call core.mul:numeric(%t71, %t72) :: float
        %acc_67 = acc_add agg.sum(%acc_67, %t73) :: float
      end_loop
      %t74 = acc_load %acc_67 :: float
      yield %t74
    end_loop
  )
  (Declaration in_br
    %t75 = load_input "statuses" :: array
    loop statuses id=L14 in %t75 as el=%statuses_el_76, idx=%statuses_i_77
      %t78 = load_field statuses_el_76["rates"] :: any
      loop rates id=L15 in %t78 as el=%rates_el_79, idx=%rates_i_80
        %t81 = load_decl taxable axes=[statuses] :: float
        %t82 = load_decl lo axes=[statuses, rates] :: float
        %t83 = call core.gte(%t81, %t82) :: boolean
        %t84 = load_decl taxable axes=[statuses] :: float
        %t85 = load_decl hi_eff axes=[statuses, rates] :: float
        %t86 = call core.lt(%t84, %t85) :: boolean
        %t87 = call core.and(%t83, %t86) :: boolean
        yield %t87
      end_loop
    end_loop
  )
  (Declaration fed_marg
    %t88 = load_input "statuses" :: array
    loop statuses id=L16 in %t88 as el=%statuses_el_89, idx=%statuses_i_90
      %acc_91 = decl_acc :: float
      %t92 = load_field statuses_el_89["rates"] :: any
      loop rates id=L17 in %t92 as el=%rates_el_93, idx=%rates_i_94
        %t95 = load_decl in_br axes=[statuses, rates] :: boolean
        %t96 = load_decl rate axes=[statuses, rates] :: float
        %t97 = const 0 :: integer
        %t98 = select %t95, %t96, %t97 :: float
        %acc_91 = acc_add agg.sum(%acc_91, %t98) :: float
      end_loop
      %t99 = acc_load %acc_91 :: float
      yield %t99
    end_loop
  )
  (Declaration fed_eff
    %t100 = load_input "statuses" :: array
    loop statuses id=L18 in %t100 as el=%statuses_el_101, idx=%statuses_i_102
      %t103 = load_decl fed_tax axes=[statuses] :: float
      %t104 = load_input "income" :: float
      %t105 = const 1.0 :: float
      %t106 = make_tuple(%t104, %t105) :: tuple<float, float>
      %t107 = fold %t106 fn="agg.max" :: float
      %t108 = call core.div(%t103, %t107) :: float
      yield %t108
    end_loop
  )
  (Declaration ss_wage_base
    %t109 = const 168600.0 :: float
    yield %t109
  )
  (Declaration ss_rate
    %t110 = const 0.062 :: float
    yield %t110
  )
  (Declaration ss_tax
    %t111 = load_input "income" :: float
    %t112 = const 168600.0 :: float
    %t113 = make_tuple(%t111, %t112) :: tuple<float, float>
    %t114 = fold %t113 fn="agg.min" :: float
    %t115 = const 0.062 :: float
    %t116 = call core.mul:numeric(%t114, %t115) :: float
    yield %t116
  )
  (Declaration med_base_rate
    %t117 = const 0.0145 :: float
    yield %t117
  )
  (Declaration med_tax
    %t118 = load_input "income" :: float
    %t119 = const 0.0145 :: float
    %t120 = call core.mul:numeric(%t118, %t119) :: float
    yield %t120
  )
  (Declaration addl_med_rate
    %t121 = const 0.009 :: float
    yield %t121
  )
  (Declaration addl_med_tax
    %t122 = load_input "statuses" :: array
    loop statuses id=L19 in %t122 as el=%statuses_el_123, idx=%statuses_i_124
      %t125 = load_input "income" :: float
      %t126 = load_field statuses_el_123["addl_threshold"] :: float
      %t127 = call core.sub(%t125, %t126) :: float
      %t128 = const 0 :: integer
      %t129 = make_tuple(%t127, %t128) :: tuple<float, integer>
      %t130 = fold %t129 fn="agg.max" :: float
      %t131 = const 0.009 :: float
      %t132 = call core.mul:numeric(%t130, %t131) :: float
      yield %t132
    end_loop
  )
  (Declaration fica_tax
    %t133 = load_input "statuses" :: array
    %t136 = load_decl ss_tax :: float
    %t137 = load_decl med_tax :: float
    loop statuses id=L20 in %t133 as el=%statuses_el_134, idx=%statuses_i_135
      %t138 = call core.add(%t136, %t137) :: float
      %t139 = load_decl addl_med_tax axes=[statuses] :: float
      %t140 = call core.add(%t138, %t139) :: float
      yield %t140
    end_loop
  )
  (Declaration fica_eff
    %t141 = load_input "statuses" :: array
    loop statuses id=L21 in %t141 as el=%statuses_el_142, idx=%statuses_i_143
      %t144 = load_decl fica_tax axes=[statuses] :: float
      %t145 = load_input "income" :: float
      %t146 = const 1.0 :: float
      %t147 = make_tuple(%t145, %t146) :: tuple<float, float>
      %t148 = fold %t147 fn="agg.max" :: float
      %t149 = call core.div(%t144, %t148) :: float
      yield %t149
    end_loop
  )
  (Declaration total_tax
    %t150 = load_input "statuses" :: array
    %t156 = load_decl state_tax :: float
    %t158 = load_decl local_tax :: float
    loop statuses id=L22 in %t150 as el=%statuses_el_151, idx=%statuses_i_152
      %t153 = load_decl fed_tax axes=[statuses] :: float
      %t154 = load_decl fica_tax axes=[statuses] :: float
      %t155 = call core.add(%t153, %t154) :: float
      %t157 = call core.add(%t155, %t156) :: float
      %t159 = call core.add(%t157, %t158) :: float
      yield %t159
    end_loop
  )
  (Declaration total_eff
    %t160 = load_input "statuses" :: array
    loop statuses id=L23 in %t160 as el=%statuses_el_161, idx=%statuses_i_162
      %t163 = load_decl total_tax axes=[statuses] :: float
      %t164 = load_input "income" :: float
      %t165 = const 1.0 :: float
      %t166 = make_tuple(%t164, %t165) :: tuple<float, float>
      %t167 = fold %t166 fn="agg.max" :: float
      %t168 = call core.div(%t163, %t167) :: float
      yield %t168
    end_loop
  )
  (Declaration after_tax
    %t169 = load_input "statuses" :: array
    loop statuses id=L24 in %t169 as el=%statuses_el_170, idx=%statuses_i_171
      %t172 = load_input "income" :: float
      %t173 = load_decl total_tax axes=[statuses] :: float
      %t174 = call core.sub(%t172, %t173) :: float
      yield %t174
    end_loop
  )
  (Declaration take_home
    %t175 = load_input "statuses" :: array
    loop statuses id=L25 in %t175 as el=%statuses_el_176, idx=%statuses_i_177
      %t178 = load_decl after_tax axes=[statuses] :: float
      %t179 = load_input "retirement_contrib" :: float
      %t180 = call core.sub(%t178, %t179) :: float
      yield %t180
    end_loop
  )
  (Declaration summary
    %t181 = load_input "statuses" :: array
    %t194 = load_decl state_tax :: float
    %t198 = load_decl local_tax :: float
    loop statuses id=L26 in %t181 as el=%statuses_el_182, idx=%statuses_i_183
      %t184 = load_field statuses_el_182["name"] :: string
      %t185 = load_decl fed_marg axes=[statuses] :: float
      %t186 = load_decl fed_eff axes=[statuses] :: float
      %t187 = load_decl fed_tax axes=[statuses] :: float
      %t188 = make_object{marginal: %t185, effective: %t186, tax: %t187} :: object
      %t189 = load_decl fica_eff axes=[statuses] :: float
      %t190 = load_decl fica_tax axes=[statuses] :: float
      %t191 = make_object{effective: %t189, tax: %t190} :: object
      %t192 = load_input "state_rate" :: float
      %t193 = load_input "state_rate" :: float
      %t195 = make_object{marginal: %t192, effective: %t193, tax: %t194} :: object
      %t196 = load_input "local_rate" :: float
      %t197 = load_input "local_rate" :: float
      %t199 = make_object{marginal: %t196, effective: %t197, tax: %t198} :: object
      %t200 = load_decl total_eff axes=[statuses] :: float
      %t201 = load_decl total_tax axes=[statuses] :: float
      %t202 = make_object{effective: %t200, tax: %t201} :: object
      %t203 = load_decl after_tax axes=[statuses] :: float
      %t204 = load_input "retirement_contrib" :: float
      %t205 = load_decl take_home axes=[statuses] :: float
      %t206 = make_object{filing_status: %t184, federal: %t188, fica: %t191, state: %t195, local: %t199, total: %t202, after_tax: %t203, retirement_contrib: %t204, take_home: %t205} :: object
      yield %t206
    end_loop
  )
)
