(Root
  inputs: [
    (InputDeclaration :income :float)
    (InputDeclaration :state_rate :float)
    (InputDeclaration :local_rate :float)
    (InputDeclaration :retirement_contrib :float)
    (InputDeclaration :filing_status :string)
    (InputDeclaration :statuses :array
      [
        (InputDeclaration :status :hash
          [
            (InputDeclaration :name :string)
            (InputDeclaration :std :float)
            (InputDeclaration :addl_threshold :float)
            (InputDeclaration :rates :array
              [
                (InputDeclaration :bracket :hash
                  [
                    (InputDeclaration :lo :float)
                    (InputDeclaration :hi :float)
                    (InputDeclaration :rate :float)
                  ]
                )
              ]
            )
          ]
        )
      ]
    )
  ]
  values: [
    (ValueDeclaration :big_hi
      (Literal 100000000000.0)
    )
    (ValueDeclaration :state_tax
      (CallExpression :multiply
        (InputReference :income)
        (InputReference :state_rate)
      )
    )
    (ValueDeclaration :local_tax
      (CallExpression :multiply
        (InputReference :income)
        (InputReference :local_rate)
      )
    )
    (ValueDeclaration :ss_wage_base
      (Literal 168600.0)
    )
    (ValueDeclaration :ss_rate
      (Literal 0.062)
    )
    (ValueDeclaration :med_base_rate
      (Literal 0.0145)
    )
    (ValueDeclaration :addl_med_rate
      (Literal 0.009)
    )
    (ValueDeclaration :taxable
      (CallExpression :max
        (ArrayExpression
          (CallExpression :subtract
            (InputReference :income)
            (InputElementReference statuses.status.std)
          )
          (Literal 0)
        )
      )
    )
    (ValueDeclaration :lo
      (InputElementReference statuses.status.rates.bracket.lo)
    )
    (ValueDeclaration :hi
      (InputElementReference statuses.status.rates.bracket.hi)
    )
    (ValueDeclaration :rate
      (InputElementReference statuses.status.rates.bracket.rate)
    )
    (ValueDeclaration :hi_eff
      (CallExpression :select
        (CallExpression :==
          (DeclarationReference :hi)
          (Literal -1)
        )
        (DeclarationReference :big_hi)
        (DeclarationReference :hi)
      )
    )
    (ValueDeclaration :amt
      (CallExpression :clamp
        (CallExpression :subtract
          (DeclarationReference :taxable)
          (DeclarationReference :lo)
        )
        (Literal 0)
        (CallExpression :subtract
          (DeclarationReference :hi_eff)
          (DeclarationReference :lo)
        )
      )
    )
    (ValueDeclaration :fed_tax
      (CallExpression :sum
        (CallExpression :multiply
          (DeclarationReference :amt)
          (DeclarationReference :rate)
        )
      )
    )
    (ValueDeclaration :in_br
      (CallExpression :and
        (CallExpression :>=
          (DeclarationReference :taxable)
          (DeclarationReference :lo)
        )
        (CallExpression :<
          (DeclarationReference :taxable)
          (DeclarationReference :hi_eff)
        )
      )
    )
    (ValueDeclaration :fed_marg
      (CallExpression :sum_if
        (DeclarationReference :rate)
        (DeclarationReference :in_br)
      )
    )
    (ValueDeclaration :fed_eff
      (CallExpression :divide
        (DeclarationReference :fed_tax)
        (CallExpression :max
          (ArrayExpression
            (InputReference :income)
            (Literal 1.0)
          )
        )
      )
    )
    (ValueDeclaration :ss_tax
      (CallExpression :multiply
        (CallExpression :min
          (ArrayExpression
            (InputReference :income)
            (DeclarationReference :ss_wage_base)
          )
        )
        (DeclarationReference :ss_rate)
      )
    )
    (ValueDeclaration :med_tax
      (CallExpression :multiply
        (InputReference :income)
        (DeclarationReference :med_base_rate)
      )
    )
    (ValueDeclaration :addl_med_tax
      (CallExpression :multiply
        (CallExpression :max
          (ArrayExpression
            (CallExpression :subtract
              (InputReference :income)
              (InputElementReference statuses.status.addl_threshold)
            )
            (Literal 0)
          )
        )
        (DeclarationReference :addl_med_rate)
      )
    )
    (ValueDeclaration :fica_tax
      (CallExpression :add
        (CallExpression :add
          (DeclarationReference :ss_tax)
          (DeclarationReference :med_tax)
        )
        (DeclarationReference :addl_med_tax)
      )
    )
    (ValueDeclaration :fica_eff
      (CallExpression :divide
        (DeclarationReference :fica_tax)
        (CallExpression :max
          (ArrayExpression
            (InputReference :income)
            (Literal 1.0)
          )
        )
      )
    )
    (ValueDeclaration :total_tax
      (CallExpression :add
        (CallExpression :add
          (CallExpression :add
            (DeclarationReference :fed_tax)
            (DeclarationReference :fica_tax)
          )
          (DeclarationReference :state_tax)
        )
        (DeclarationReference :local_tax)
      )
    )
    (ValueDeclaration :total_eff
      (CallExpression :divide
        (DeclarationReference :total_tax)
        (CallExpression :max
          (ArrayExpression
            (InputReference :income)
            (Literal 1.0)
          )
        )
      )
    )
    (ValueDeclaration :after_tax
      (CallExpression :subtract
        (InputReference :income)
        (DeclarationReference :total_tax)
      )
    )
    (ValueDeclaration :take_home
      (CallExpression :subtract
        (DeclarationReference :after_tax)
        (InputReference :retirement_contrib)
      )
    )
    (ValueDeclaration :summary
      (HashExpression
        ((Literal :filing_status) (InputElementReference statuses.status.name))
        ((Literal :federal) (HashExpression
        ((Literal :marginal) (DeclarationReference :fed_marg))
        ((Literal :effective) (DeclarationReference :fed_eff))
        ((Literal :tax) (DeclarationReference :fed_tax))
      ))
        ((Literal :fica) (HashExpression
        ((Literal :effective) (DeclarationReference :fica_eff))
        ((Literal :tax) (DeclarationReference :fica_tax))
      ))
        ((Literal :state) (HashExpression
        ((Literal :marginal) (InputReference :state_rate))
        ((Literal :effective) (InputReference :state_rate))
        ((Literal :tax) (DeclarationReference :state_tax))
      ))
        ((Literal :local) (HashExpression
        ((Literal :marginal) (InputReference :local_rate))
        ((Literal :effective) (InputReference :local_rate))
        ((Literal :tax) (DeclarationReference :local_tax))
      ))
        ((Literal :total) (HashExpression
        ((Literal :effective) (DeclarationReference :total_eff))
        ((Literal :tax) (DeclarationReference :total_tax))
      ))
        ((Literal :after_tax) (DeclarationReference :after_tax))
        ((Literal :retirement_contrib) (InputReference :retirement_contrib))
        ((Literal :take_home) (DeclarationReference :take_home))
      )
    )
  ]
  traits: []
)