# Autogenerated by Kumi Codegen
module Kumi::Compiled::KUMI_fbbd9524e89735c5dbaf290442b7ae9b51c1aeedcbe116ad99c5af17605a99ee
  def self.from(input_data = nil)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def self.__kumi_executable__
    instance = Object.new
    instance.extend(self)
    instance
  end

  def update(input_data)
    @input = @input.merge(input_data)
    self
  end

  def [](name)
    case name
    when :roll_right then _roll_right
    when :roll_left then _roll_left
    when :roll_right_clamp then _roll_right_clamp
    when :roll_left_clamp then _roll_left_clamp
    else raise KeyError, "Unknown declaration"
    end
  end

  def _roll_right(input = @input)
    out = []
    t1 = input["cells"] || input[:cells]
    t4 = t1.length
    t5 = 1
    t1.each_with_index do |cells_el_2, cells_i_3|
      t6 = cells_i_3 - t5
      t7 = t6 % t4
      t8 = t7 + t4
      t9 = t8 % t4
      t10 = t1[t9]
      out << t10
    end
    out
  end

  def _roll_left(input = @input)
    out = []
    t11 = input["cells"] || input[:cells]
    t14 = t11.length
    t15 = -1
    t11.each_with_index do |cells_el_12, cells_i_13|
      t16 = cells_i_13 - t15
      t17 = t16 % t14
      t18 = t17 + t14
      t19 = t18 % t14
      t20 = t11[t19]
      out << t20
    end
    out
  end

  def _roll_right_clamp(input = @input)
    out = []
    t21 = input["cells"] || input[:cells]
    t24 = t21.length
    t25 = 1
    t29 = 0
    t28 = t24 - t25
    t21.each_with_index do |cells_el_22, cells_i_23|
      t26 = cells_i_23 - t25
      t30 = [[ t26, t29 ].max, t28 ].min
      t31 = t21[t30]
      out << t31
    end
    out
  end

  def _roll_left_clamp(input = @input)
    out = []
    t32 = input["cells"] || input[:cells]
    t35 = t32.length
    t36 = -1
    t38 = 1
    t40 = 0
    t39 = t35 - t38
    t32.each_with_index do |cells_el_33, cells_i_34|
      t37 = cells_i_34 - t36
      t41 = [[ t37, t40 ].max, t39 ].min
      t42 = t32[t41]
      out << t42
    end
    out
  end
end
