# Autogenerated by Kumi Codegen
module SchemaModule
  def self.from(input_data)
      instance = Object.new
      instance.extend(self)
      instance.instance_variable_set(:@input, input_data)
      instance
  end

  def [](name)
      case name
        when :sum_numbers then _eval_sum_numbers
        when :matrix_sums then _eval_matrix_sums
        when :mixed_array then _eval_mixed_array
        when :constant then _eval_constant
        else raise KeyError, "Unknown declaration"
      end
  end

  def _eval_sum_numbers
    out = nil
    acc_1 = 0
    t2 = @input["numbers"]
    t2.each_with_index do |numbers_el_3, numbers_i_4|
      t5 = numbers_el_3["value"]
      acc_1 = __sum(acc_1, t5)
    end
    t6 = acc_1
    out = t6
    out
  end

  def _eval_matrix_sums
    out = []
    t7 = @input["matrix"]
    t7.each_with_index do |matrix_el_8, matrix_i_9|
      acc_10 = 0.0
      t11 = matrix_el_8["row"]
      t11.each_with_index do |row_el_12, row_i_13|
        t14 = row_el_12["cell"]
        acc_10 = __sum(acc_10, t14)
      end
      t15 = acc_10
      out << t15
    end
    out
  end

  def _eval_mixed_array
    out = []
    t16 = @input["matrix"]
    t16.each_with_index do |matrix_el_17, matrix_i_18|
      out_1 = []
      t19 = matrix_el_17["row"]
      t19.each_with_index do |row_el_20, row_i_21|
        t22 = @input["scalar_val"]
        acc_1_1 = 0
        t2 = @input["numbers"]
        t2.each_with_index do |numbers_el_3, numbers_i_4|
          t3 = numbers_el_3["value"]
          acc_1_1 = __sum(acc_1_1, t3)
        end
        t4 = acc_1_1
        t24 = row_el_20["cell"]
        t25 = [t22, t4, t24]
        out_1 << t25
      end
      out << out_1
    end
    out
  end

  def _eval_constant
    out = nil
    t26 = 42
    out = t26
    out
  end

  private

    def __count(a,b)
      a + b
    end

    def __sum(a,b)
      a + b
    end

    def __add(a, b)
      a + b
    end

    def __and(a, b)
      a && b
    end

    def __concat(a, b)
      a.to_s + b.to_s
    end

    def __div(a, b)
      a / b
    end

    def __eq(a, b)
      a == b
    end

    def __gt(a, b)
      a > b
    end

    def __gte(a, b)
      a >= b
    end

    def __length(collection)
      collection.size
    end

    def __mul(a, b)
      a * b
    end

    def __or(a, b)
      a || b
    end

    def __pow(a, b)
      a ** b
    end

    def __select(condition, true_val, false_val)
      condition ? true_val : false_val
    end

    def __sub(a, b)
      a - b
    end

end
