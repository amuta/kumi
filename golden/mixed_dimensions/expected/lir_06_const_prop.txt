(LIR
  (Declaration sum_numbers
    %acc_1 = decl_acc :: integer
    %t2 = load_input "numbers" :: array
    loop numbers id=L1 in %t2 as el=%numbers_el_3, idx=%numbers_i_4
      %acc_1 = acc_add agg.sum(%acc_1, %numbers_el_3) :: integer
    end_loop
    %t5 = acc_load %acc_1 :: integer
    yield %t5
  )
  (Declaration matrix_sums
    %t6 = load_input "matrix" :: array
    loop matrix id=L2 in %t6 as el=%matrix_el_7, idx=%matrix_i_8
      %acc_9 = decl_acc :: float
      loop row id=L3 in %matrix_el_7 as el=%row_el_10, idx=%row_i_11
        %acc_9 = acc_add agg.sum(%acc_9, %row_el_10) :: float
      end_loop
      %t12 = acc_load %acc_9 :: float
      yield %t12
    end_loop
  )
  (Declaration mixed_array
    %t13 = load_input "matrix" :: array
    %acc23 = decl_acc :: integer
    %t24 = load_input "numbers" :: array
    loop numbers id=L6 in %t24 as el=%numbers_el_3, idx=%numbers_i_4
      %acc23 = acc_add agg.sum(%acc23, %numbers_el_3) :: integer
    end_loop
    %t25 = acc_load %acc23 :: integer
    %t18 = load_input "scalar_val" :: integer
    loop matrix id=L4 in %t13 as el=%matrix_el_14, idx=%matrix_i_15
      loop row id=L5 in %matrix_el_14 as el=%row_el_16, idx=%row_i_17
        %t20 = make_tuple(%t18, %t25, %row_el_16) :: tuple<integer, integer, float>
        yield %t20
      end_loop
    end_loop
  )
  (Declaration constant
    %t21 = const 42 :: integer
    yield %t21
  )
)
