// Autogenerated by Kumi Codegen for schema KUMI_f42b18a419f908e37d818eddd3b634a5805faa58c299668c3a8106fd65d033b0
export class KumiCompiledModule {
  constructor(inputData = {}) {
    this.input = inputData;
  }

  static from(inputData = {}) {
    return new KumiCompiledModule(inputData);
  }

  update(inputData) {
    this.input = { ...this.input, ...inputData };
    return this;
  }

  get(name) {
    switch (name) {
      case 'x_is_large': return this._x_is_large();
      case 'selected_value': return this._selected_value();
      case 'final_value_per_point': return this._final_value_per_point();
      case 'grand_total': return this._grand_total();
      default: throw new Error(`Unknown declaration: ${name}`);
    }
  }

  _x_is_large(input = this.input) {
    let out = [];
    let t1 = input["points"];
    t1?.forEach((points_el_2, points_i_3) => {
      let t4 = points_el_2?.x;
      let t6 = t4 > 100;
      out.push(t6);
    });
    return out;
  }

  _selected_value(input = this.input) {
    let out = [];
    let t7 = input["points"];
    t7?.forEach((points_el_8, points_i_9) => {
      let t28 = points_el_8?.x;
      let t12 = points_el_8?.y;
      let t30 = t28 > 100;
      let t13 = t30 ? t28 : t12;
      out.push(t13);
    });
    return out;
  }

  _final_value_per_point(input = this.input) {
    let out = [];
    let t14 = input["points"];
    t14?.forEach((points_el_15, points_i_16) => {
      let t42 = points_el_15?.x;
      let t34 = points_el_15?.y;
      let t44 = t42 > 100;
      let t35 = t44 ? t42 : t34;
      let t19 = [t35, t42];
      let t20 = Math.max(...t19);
      out.push(t20);
    });
    return out;
  }

  _grand_total(input = this.input) {
    let acc_21 = 0;
    let t22 = input["points"];
    t22?.forEach((points_el_23, points_i_24) => {
      let t47 = points_el_23?.x;
      let t51 = points_el_23?.y;
      let t49 = t47 > 100;
      let t52 = t49 ? t47 : t51;
      let t39 = [t52, t47];
      let t40 = Math.max(...t39);
      acc_21 += t40;
    });
    return acc_21;
  }

}
