(LIR
  (Declaration max_y
    %acc_1 = decl_acc :: integer
    %t2 = load_input "x" :: array
    loop x id=L1 in %t2 as el=%x_el_3, idx=%x_i_4
      %acc_1 = acc_add agg.max(%acc_1, %x_el_3) :: integer
    end_loop
    %t5 = acc_load %acc_1 :: integer
    yield %t5
  )
  (Declaration tuple
    %t6 = const 1 :: integer
    %t7 = const 2 :: integer
    %t8 = const 3 :: integer
    %t29 = decl_acc :: integer
    %t31 = load_input "x" :: array
    loop x id=L2 in %t31 as el=%x_el_3, idx=%x_i_4
      %t29 = acc_add agg.max(%t29, %x_el_3) :: integer
    end_loop
    %t32 = acc_load %t29 :: integer
    %t10 = make_tuple(%__immediate_placeholder__, %__immediate_placeholder__, %__immediate_placeholder__, %t32) :: tuple<integer, integer, integer, integer>
    yield %t10
  )
  (Declaration max_1
    %t33 = const 1 :: integer
    %t34 = const 2 :: integer
    %t35 = const 3 :: integer
    %t51 = decl_acc :: integer
    %t53 = load_input "x" :: array
    loop x id=L5 in %t53 as el=%x_el_3, idx=%x_i_4
      %t51 = acc_add agg.max(%t51, %x_el_3) :: integer
    end_loop
    %t54 = acc_load %t51 :: integer
    %t37 = make_tuple(%__immediate_placeholder__, %__immediate_placeholder__, %__immediate_placeholder__, %t54) :: tuple<integer, integer, integer, integer>
    %t12 = Fold %t37 fn="agg.max" :: integer
    yield %t12
  )
  (Declaration max_2
    %t13 = const 1 :: integer
    %t14 = const 2 :: integer
    %t15 = const 3 :: integer
    %t38 = decl_acc :: integer
    %t40 = load_input "x" :: array
    loop x id=L3 in %t40 as el=%x_el_3, idx=%x_i_4
      %t38 = acc_add agg.max(%t38, %x_el_3) :: integer
    end_loop
    %t41 = acc_load %t38 :: integer
    %t17 = const 1000 :: integer
    %t18 = make_tuple(%__immediate_placeholder__, %__immediate_placeholder__, %__immediate_placeholder__, %t41, %__immediate_placeholder__) :: tuple<integer, integer, integer, integer, integer>
    %t19 = Fold %t18 fn="agg.max" :: integer
    yield %t19
  )
  (Declaration min_1
    %t42 = const 1 :: integer
    %t43 = const 2 :: integer
    %t44 = const 3 :: integer
    %t55 = decl_acc :: integer
    %t57 = load_input "x" :: array
    loop x id=L6 in %t57 as el=%x_el_3, idx=%x_i_4
      %t55 = acc_add agg.max(%t55, %x_el_3) :: integer
    end_loop
    %t58 = acc_load %t55 :: integer
    %t46 = make_tuple(%__immediate_placeholder__, %__immediate_placeholder__, %__immediate_placeholder__, %t58) :: tuple<integer, integer, integer, integer>
    %t21 = Fold %t46 fn="agg.min" :: integer
    yield %t21
  )
  (Declaration min_2
    %t22 = const 1 :: integer
    %t23 = const 2 :: integer
    %t24 = const 3 :: integer
    %t47 = decl_acc :: integer
    %t49 = load_input "x" :: array
    loop x id=L4 in %t49 as el=%x_el_3, idx=%x_i_4
      %t47 = acc_add agg.max(%t47, %x_el_3) :: integer
    end_loop
    %t50 = acc_load %t47 :: integer
    %t26 = const -100 :: integer
    %t27 = make_tuple(%__immediate_placeholder__, %__immediate_placeholder__, %__immediate_placeholder__, %t50, %__immediate_placeholder__) :: tuple<integer, integer, integer, integer, integer>
    %t28 = Fold %t27 fn="agg.min" :: integer
    yield %t28
  )
)
