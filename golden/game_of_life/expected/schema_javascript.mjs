export function _next_state(input) {
  let out = [];
  let t285 = input["rows"];
  let t1548 = t285.length;
  const t1549 = -1;
  const t1551 = 0;
  const t1555 = 1;
  const t1534 = 3;
  const t1745 = 2;
  const t1952 = 0;
  const t291 = 1;
  let t1556 = t1548 - t1555;
  t285.forEach((rows_el_286, rows_i_287) => {
    let out_1 = [];
    let t1550 = rows_i_287 - t1549;
    let t1570 = rows_i_287 - t1555;
    let t1589 = ((rows_i_287 % t1548) + t1548) % t1548;
    let t1552 = t1550 >= t1551;
    let t1553 = t1550 < t1548;
    let t1558 = Math.min(Math.max(t1550, t1551), t1556);
    let t1572 = t1570 >= t1551;
    let t1573 = t1570 < t1548;
    let t1578 = Math.min(Math.max(t1570, t1551), t1556);
    let t1590 = t1589 + t1548;
    let t1554 = t1552 && t1553;
    let t1559 = t285[t1558];
    let t1574 = t1572 && t1573;
    let t1579 = t285[t1578];
    let t1591 = ((t1590 % t1548) + t1548) % t1548;
    let t1560 = t1559.length;
    let t1580 = t1579.length;
    let t1592 = t285[t1591];
    let t1593 = t1592.length;
    let t1649 = t1560 - t1555;
    let t1705 = t1580 - t1555;
    let t1601 = t1593 - t1555;
    rows_el_286.forEach((col_el_288, col_i_289) => {
      let t1561 = ((col_i_289 % t1560) + t1560) % t1560;
      let t1562 = t1561 + t1560;
      let t1563 = ((t1562 % t1560) + t1560) % t1560;
      let t1564 = t1559[t1563];
      let t1566 = t1554 ? t1564 : t1551;
      let t1581 = ((col_i_289 % t1580) + t1580) % t1580;
      let t1582 = t1581 + t1580;
      let t1583 = ((t1582 % t1580) + t1580) % t1580;
      let t1584 = t1579[t1583];
      let t1586 = t1574 ? t1584 : t1551;
      let t1595 = col_i_289 - t1549;
      let t1597 = t1595 >= t1551;
      let t1598 = t1595 < t1593;
      let t1599 = t1597 && t1598;
      let t1603 = Math.min(Math.max(t1595, t1551), t1601);
      let t1604 = t1592[t1603];
      let t1606 = t1599 ? t1604 : t1551;
      let t1615 = col_i_289 - t1555;
      let t1617 = t1615 >= t1551;
      let t1618 = t1615 < t1593;
      let t1619 = t1617 && t1618;
      let t1623 = Math.min(Math.max(t1615, t1551), t1601);
      let t1624 = t1592[t1623];
      let t1626 = t1619 ? t1624 : t1551;
      let t1645 = t1595 < t1560;
      let t1646 = t1597 && t1645;
      let t1647 = t1554 && t1646;
      let t1651 = Math.min(Math.max(t1595, t1551), t1649);
      let t1652 = t1559[t1651];
      let t1654 = t1647 ? t1652 : t1551;
      let t1673 = t1615 < t1560;
      let t1674 = t1617 && t1673;
      let t1675 = t1554 && t1674;
      let t1679 = Math.min(Math.max(t1615, t1551), t1649);
      let t1680 = t1559[t1679];
      let t1682 = t1675 ? t1680 : t1551;
      let t1701 = t1595 < t1580;
      let t1702 = t1597 && t1701;
      let t1703 = t1574 && t1702;
      let t1707 = Math.min(Math.max(t1595, t1551), t1705);
      let t1708 = t1579[t1707];
      let t1710 = t1703 ? t1708 : t1551;
      let t1729 = t1615 < t1580;
      let t1730 = t1617 && t1729;
      let t1731 = t1574 && t1730;
      let t1735 = Math.min(Math.max(t1615, t1551), t1705);
      let t1736 = t1579[t1735];
      let t1738 = t1731 ? t1736 : t1551;
      let t1545 = [t1566, t1586, t1606, t1626, t1654, t1682, t1710, t1738];
      let t1546 = t1545.reduce((a, b) => a + b, 0);
      let t1535 = t1546 == t1534;
      let t1746 = t1546 == t1745;
      let t1953 = col_el_288 > t1952;
      let t1742 = t1746 && t1953;
      let t1531 = t1535 || t1742;
      let t293 = t1531 ? t291 : t1952;
      out_1.push(t293);
    });
    out.push(out_1);
  });
  return out;
}

