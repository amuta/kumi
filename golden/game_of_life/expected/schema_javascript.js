// Autogenerated by Kumi Codegen for schema KUMI_63891484c21343587e5bfed707bd1de5fa48b1f9543d2c21300ec466f8e6a9b2
export class KumiCompiledModule {
  constructor(inputData = {}) {
    this.input = inputData;
  }

  static from(inputData = {}) {
    return new KumiCompiledModule(inputData);
  }

  update(inputData) {
    this.input = { ...this.input, ...inputData };
    return this;
  }

  get(name) {
    switch (name) {
      case 'a': return this._a();
      case 'n': return this._n();
      case 's': return this._s();
      case 'w': return this._w();
      case 'e': return this._e();
      case 'nw': return this._nw();
      case 'ne': return this._ne();
      case 'sw': return this._sw();
      case 'se': return this._se();
      case 'neighbors': return this._neighbors();
      case 'alive': return this._alive();
      case 'n3_alive': return this._n3_alive();
      case 'n2_alive': return this._n2_alive();
      case 'keep_alive': return this._keep_alive();
      case 'next_alive': return this._next_alive();
      case 'next_state': return this._next_state();
      default: throw new Error(`Unknown declaration: ${name}`);
    }
  }

  _a(input = this.input) {
    let out = [];
    let t1 = input["rows"];
    t1.forEach((rows_el_2, rows_i_3) => {
      let out_1 = [];
      rows_el_2.forEach((col_el_4, col_i_5) => {
        out_1.push(col_el_4);
      });
      out.push(out_1);
    });
    return out;
  }

  _n(input = this.input) {
    let out = [];
    let t6 = input["rows"];
    let t11 = t6.length
    const t12 = -1;
    t6.forEach((rows_el_7, rows_i_8) => {
      let out_1 = [];
      let t13 = rows_i_8 - t12;
      let t14 = t13 % t11;
      let t15 = t14 + t11;
      let t16 = t15 % t11;
      let t17 = t6[t16]
      let t18 = t17.length
      rows_el_7.forEach((col_el_9, col_i_10) => {
        let t19 = col_i_10 % t18;
        let t20 = t19 + t18;
        let t21 = t20 % t18;
        let t22 = t17[t21]
        out_1.push(t22);
      });
      out.push(out_1);
    });
    return out;
  }

  _s(input = this.input) {
    let out = [];
    let t23 = input["rows"];
    let t28 = t23.length
    const t29 = 1;
    t23.forEach((rows_el_24, rows_i_25) => {
      let out_1 = [];
      let t30 = rows_i_25 - t29;
      let t31 = t30 % t28;
      let t32 = t31 + t28;
      let t33 = t32 % t28;
      let t34 = t23[t33]
      let t35 = t34.length
      rows_el_24.forEach((col_el_26, col_i_27) => {
        let t36 = col_i_27 % t35;
        let t37 = t36 + t35;
        let t38 = t37 % t35;
        let t39 = t34[t38]
        out_1.push(t39);
      });
      out.push(out_1);
    });
    return out;
  }

  _w(input = this.input) {
    let out = [];
    let t40 = input["rows"];
    let t45 = t40.length
    const t51 = -1;
    t40.forEach((rows_el_41, rows_i_42) => {
      let out_1 = [];
      let t46 = rows_i_42 % t45;
      let t47 = t46 + t45;
      let t48 = t47 % t45;
      let t49 = t40[t48]
      let t50 = t49.length
      rows_el_41.forEach((col_el_43, col_i_44) => {
        let t52 = col_i_44 - t51;
        let t53 = t52 % t50;
        let t54 = t53 + t50;
        let t55 = t54 % t50;
        let t56 = t49[t55]
        out_1.push(t56);
      });
      out.push(out_1);
    });
    return out;
  }

  _e(input = this.input) {
    let out = [];
    let t57 = input["rows"];
    let t62 = t57.length
    const t68 = 1;
    t57.forEach((rows_el_58, rows_i_59) => {
      let out_1 = [];
      let t63 = rows_i_59 % t62;
      let t64 = t63 + t62;
      let t65 = t64 % t62;
      let t66 = t57[t65]
      let t67 = t66.length
      rows_el_58.forEach((col_el_60, col_i_61) => {
        let t69 = col_i_61 - t68;
        let t70 = t69 % t67;
        let t71 = t70 + t67;
        let t72 = t71 % t67;
        let t73 = t66[t72]
        out_1.push(t73);
      });
      out.push(out_1);
    });
    return out;
  }

  _nw(input = this.input) {
    let out = [];
    let t74 = input["rows"];
    let t79 = t74.length
    const t80 = -1;
    t74.forEach((rows_el_75, rows_i_76) => {
      let out_1 = [];
      let t81 = rows_i_76 - t80;
      let t82 = t81 % t79;
      let t83 = t82 + t79;
      let t84 = t83 % t79;
      let t85 = t74[t84]
      let t86 = t85.length
      rows_el_75.forEach((col_el_77, col_i_78) => {
        let t88 = col_i_78 - t80;
        let t89 = t88 % t86;
        let t90 = t89 + t86;
        let t91 = t90 % t86;
        let t92 = t85[t91]
        out_1.push(t92);
      });
      out.push(out_1);
    });
    return out;
  }

  _ne(input = this.input) {
    let out = [];
    let t93 = input["rows"];
    let t98 = t93.length
    const t99 = -1;
    const t106 = 1;
    t93.forEach((rows_el_94, rows_i_95) => {
      let out_1 = [];
      let t100 = rows_i_95 - t99;
      let t101 = t100 % t98;
      let t102 = t101 + t98;
      let t103 = t102 % t98;
      let t104 = t93[t103]
      let t105 = t104.length
      rows_el_94.forEach((col_el_96, col_i_97) => {
        let t107 = col_i_97 - t106;
        let t108 = t107 % t105;
        let t109 = t108 + t105;
        let t110 = t109 % t105;
        let t111 = t104[t110]
        out_1.push(t111);
      });
      out.push(out_1);
    });
    return out;
  }

  _sw(input = this.input) {
    let out = [];
    let t112 = input["rows"];
    let t117 = t112.length
    const t118 = 1;
    const t125 = -1;
    t112.forEach((rows_el_113, rows_i_114) => {
      let out_1 = [];
      let t119 = rows_i_114 - t118;
      let t120 = t119 % t117;
      let t121 = t120 + t117;
      let t122 = t121 % t117;
      let t123 = t112[t122]
      let t124 = t123.length
      rows_el_113.forEach((col_el_115, col_i_116) => {
        let t126 = col_i_116 - t125;
        let t127 = t126 % t124;
        let t128 = t127 + t124;
        let t129 = t128 % t124;
        let t130 = t123[t129]
        out_1.push(t130);
      });
      out.push(out_1);
    });
    return out;
  }

  _se(input = this.input) {
    let out = [];
    let t131 = input["rows"];
    let t136 = t131.length
    const t137 = 1;
    t131.forEach((rows_el_132, rows_i_133) => {
      let out_1 = [];
      let t138 = rows_i_133 - t137;
      let t139 = t138 % t136;
      let t140 = t139 + t136;
      let t141 = t140 % t136;
      let t142 = t131[t141]
      let t143 = t142.length
      rows_el_132.forEach((col_el_134, col_i_135) => {
        let t145 = col_i_135 - t137;
        let t146 = t145 % t143;
        let t147 = t146 + t143;
        let t148 = t147 % t143;
        let t149 = t142[t148]
        out_1.push(t149);
      });
      out.push(out_1);
    });
    return out;
  }

  _neighbors(input = this.input) {
    let out = [];
    let t150 = input["rows"];
    let t215 = t150.length
    const t216 = -1;
    const t229 = 1;
    t150.forEach((rows_el_151, rows_i_152) => {
      let out_1 = [];
      let t217 = rows_i_152 - t216;
      let t230 = rows_i_152 - t229;
      let t242 = rows_i_152 % t215;
      let t218 = t217 % t215;
      let t231 = t230 % t215;
      let t243 = t242 + t215;
      let t219 = t218 + t215;
      let t232 = t231 + t215;
      let t244 = t243 % t215;
      let t220 = t219 % t215;
      let t233 = t232 % t215;
      let t245 = t150[t244]
      let t221 = t150[t220]
      let t234 = t150[t233]
      let t246 = t245.length
      let t222 = t221.length
      let t235 = t234.length
      rows_el_151.forEach((col_el_153, col_i_154) => {
        let t223 = col_i_154 % t222;
        let t224 = t223 + t222;
        let t225 = t224 % t222;
        let t226 = t221[t225]
        let t236 = col_i_154 % t235;
        let t237 = t236 + t235;
        let t238 = t237 % t235;
        let t239 = t234[t238]
        let t248 = col_i_154 - t216;
        let t249 = t248 % t246;
        let t250 = t249 + t246;
        let t251 = t250 % t246;
        let t252 = t245[t251]
        let t261 = col_i_154 - t229;
        let t262 = t261 % t246;
        let t263 = t262 + t246;
        let t264 = t263 % t246;
        let t265 = t245[t264]
        let t277 = t248 % t222;
        let t278 = t277 + t222;
        let t279 = t278 % t222;
        let t280 = t221[t279]
        let t292 = t261 % t222;
        let t293 = t292 + t222;
        let t294 = t293 % t222;
        let t295 = t221[t294]
        let t307 = t248 % t235;
        let t308 = t307 + t235;
        let t309 = t308 % t235;
        let t310 = t234[t309]
        let t322 = t261 % t235;
        let t323 = t322 + t235;
        let t324 = t323 % t235;
        let t325 = t234[t324]
        let t163 = [t226, t239, t252, t265, t280, t295, t310, t325];
        let t164 = t163.reduce((a, b) => a + b, 0);
        out_1.push(t164);
      });
      out.push(out_1);
    });
    return out;
  }

  _alive(input = this.input) {
    let out = [];
    let t165 = input["rows"];
    const t171 = 0;
    t165.forEach((rows_el_166, rows_i_167) => {
      let out_1 = [];
      rows_el_166.forEach((col_el_168, col_i_169) => {
        let t172 = col_el_168 > t171;
        out_1.push(t172);
      });
      out.push(out_1);
    });
    return out;
  }

  _n3_alive(input = this.input) {
    let out = [];
    let t173 = input["rows"];
    let t370 = t173.length
    const t371 = -1;
    const t384 = 1;
    const t179 = 3;
    t173.forEach((rows_el_174, rows_i_175) => {
      let out_1 = [];
      let t372 = rows_i_175 - t371;
      let t385 = rows_i_175 - t384;
      let t397 = rows_i_175 % t370;
      let t373 = t372 % t370;
      let t386 = t385 % t370;
      let t398 = t397 + t370;
      let t374 = t373 + t370;
      let t387 = t386 + t370;
      let t399 = t398 % t370;
      let t375 = t374 % t370;
      let t388 = t387 % t370;
      let t400 = t173[t399]
      let t376 = t173[t375]
      let t389 = t173[t388]
      let t401 = t400.length
      let t377 = t376.length
      let t390 = t389.length
      rows_el_174.forEach((col_el_176, col_i_177) => {
        let t378 = col_i_177 % t377;
        let t379 = t378 + t377;
        let t380 = t379 % t377;
        let t381 = t376[t380]
        let t391 = col_i_177 % t390;
        let t392 = t391 + t390;
        let t393 = t392 % t390;
        let t394 = t389[t393]
        let t403 = col_i_177 - t371;
        let t404 = t403 % t401;
        let t405 = t404 + t401;
        let t406 = t405 % t401;
        let t407 = t400[t406]
        let t416 = col_i_177 - t384;
        let t417 = t416 % t401;
        let t418 = t417 + t401;
        let t419 = t418 % t401;
        let t420 = t400[t419]
        let t432 = t403 % t377;
        let t433 = t432 + t377;
        let t434 = t433 % t377;
        let t435 = t376[t434]
        let t447 = t416 % t377;
        let t448 = t447 + t377;
        let t449 = t448 % t377;
        let t450 = t376[t449]
        let t462 = t403 % t390;
        let t463 = t462 + t390;
        let t464 = t463 % t390;
        let t465 = t389[t464]
        let t477 = t416 % t390;
        let t478 = t477 + t390;
        let t479 = t478 % t390;
        let t480 = t389[t479]
        let t336 = [t381, t394, t407, t420, t435, t450, t465, t480];
        let t337 = t336.reduce((a, b) => a + b, 0);
        let t180 = t337 == t179;
        out_1.push(t180);
      });
      out.push(out_1);
    });
    return out;
  }

  _n2_alive(input = this.input) {
    let out = [];
    let t181 = input["rows"];
    let t482 = t181.length
    const t483 = -1;
    const t496 = 1;
    const t187 = 2;
    t181.forEach((rows_el_182, rows_i_183) => {
      let out_1 = [];
      let t484 = rows_i_183 - t483;
      let t497 = rows_i_183 - t496;
      let t509 = rows_i_183 % t482;
      let t485 = t484 % t482;
      let t498 = t497 % t482;
      let t510 = t509 + t482;
      let t486 = t485 + t482;
      let t499 = t498 + t482;
      let t511 = t510 % t482;
      let t487 = t486 % t482;
      let t500 = t499 % t482;
      let t512 = t181[t511]
      let t488 = t181[t487]
      let t501 = t181[t500]
      let t513 = t512.length
      let t489 = t488.length
      let t502 = t501.length
      rows_el_182.forEach((col_el_184, col_i_185) => {
        let t490 = col_i_185 % t489;
        let t491 = t490 + t489;
        let t492 = t491 % t489;
        let t493 = t488[t492]
        let t503 = col_i_185 % t502;
        let t504 = t503 + t502;
        let t505 = t504 % t502;
        let t506 = t501[t505]
        let t515 = col_i_185 - t483;
        let t516 = t515 % t513;
        let t517 = t516 + t513;
        let t518 = t517 % t513;
        let t519 = t512[t518]
        let t528 = col_i_185 - t496;
        let t529 = t528 % t513;
        let t530 = t529 + t513;
        let t531 = t530 % t513;
        let t532 = t512[t531]
        let t544 = t515 % t489;
        let t545 = t544 + t489;
        let t546 = t545 % t489;
        let t547 = t488[t546]
        let t559 = t528 % t489;
        let t560 = t559 + t489;
        let t561 = t560 % t489;
        let t562 = t488[t561]
        let t574 = t515 % t502;
        let t575 = t574 + t502;
        let t576 = t575 % t502;
        let t577 = t501[t576]
        let t589 = t528 % t502;
        let t590 = t589 + t502;
        let t591 = t590 % t502;
        let t592 = t501[t591]
        let t347 = [t493, t506, t519, t532, t547, t562, t577, t592];
        let t348 = t347.reduce((a, b) => a + b, 0);
        let t188 = t348 == t187;
        out_1.push(t188);
      });
      out.push(out_1);
    });
    return out;
  }

  _keep_alive(input = this.input) {
    let out = [];
    let t189 = input["rows"];
    let t595 = t189.length
    const t596 = -1;
    const t609 = 1;
    const t351 = 2;
    const t355 = 0;
    t189.forEach((rows_el_190, rows_i_191) => {
      let out_1 = [];
      let t597 = rows_i_191 - t596;
      let t610 = rows_i_191 - t609;
      let t622 = rows_i_191 % t595;
      let t598 = t597 % t595;
      let t611 = t610 % t595;
      let t623 = t622 + t595;
      let t599 = t598 + t595;
      let t612 = t611 + t595;
      let t624 = t623 % t595;
      let t600 = t599 % t595;
      let t613 = t612 % t595;
      let t625 = t189[t624]
      let t601 = t189[t600]
      let t614 = t189[t613]
      let t626 = t625.length
      let t602 = t601.length
      let t615 = t614.length
      rows_el_190.forEach((col_el_192, col_i_193) => {
        let t603 = col_i_193 % t602;
        let t604 = t603 + t602;
        let t605 = t604 % t602;
        let t606 = t601[t605]
        let t616 = col_i_193 % t615;
        let t617 = t616 + t615;
        let t618 = t617 % t615;
        let t619 = t614[t618]
        let t628 = col_i_193 - t596;
        let t629 = t628 % t626;
        let t630 = t629 + t626;
        let t631 = t630 % t626;
        let t632 = t625[t631]
        let t641 = col_i_193 - t609;
        let t642 = t641 % t626;
        let t643 = t642 + t626;
        let t644 = t643 % t626;
        let t645 = t625[t644]
        let t657 = t628 % t602;
        let t658 = t657 + t602;
        let t659 = t658 % t602;
        let t660 = t601[t659]
        let t672 = t641 % t602;
        let t673 = t672 + t602;
        let t674 = t673 % t602;
        let t675 = t601[t674]
        let t687 = t628 % t615;
        let t688 = t687 + t615;
        let t689 = t688 % t615;
        let t690 = t614[t689]
        let t702 = t641 % t615;
        let t703 = t702 + t615;
        let t704 = t703 % t615;
        let t705 = t614[t704]
        let t706 = [t606, t619, t632, t645, t660, t675, t690, t705];
        let t707 = t706.reduce((a, b) => a + b, 0);
        let t352 = t707 == t351;
        let t356 = col_el_192 > t355;
        let t196 = t352 && t356;
        out_1.push(t196);
      });
      out.push(out_1);
    });
    return out;
  }

  _next_alive(input = this.input) {
    let out = [];
    let t197 = input["rows"];
    let t711 = t197.length
    const t712 = -1;
    const t725 = 1;
    const t359 = 3;
    const t836 = 2;
    const t840 = 0;
    t197.forEach((rows_el_198, rows_i_199) => {
      let out_1 = [];
      let t713 = rows_i_199 - t712;
      let t726 = rows_i_199 - t725;
      let t738 = rows_i_199 % t711;
      let t714 = t713 % t711;
      let t727 = t726 % t711;
      let t739 = t738 + t711;
      let t715 = t714 + t711;
      let t728 = t727 + t711;
      let t740 = t739 % t711;
      let t716 = t715 % t711;
      let t729 = t728 % t711;
      let t741 = t197[t740]
      let t717 = t197[t716]
      let t730 = t197[t729]
      let t742 = t741.length
      let t718 = t717.length
      let t731 = t730.length
      rows_el_198.forEach((col_el_200, col_i_201) => {
        let t719 = col_i_201 % t718;
        let t720 = t719 + t718;
        let t721 = t720 % t718;
        let t722 = t717[t721]
        let t732 = col_i_201 % t731;
        let t733 = t732 + t731;
        let t734 = t733 % t731;
        let t735 = t730[t734]
        let t744 = col_i_201 - t712;
        let t745 = t744 % t742;
        let t746 = t745 + t742;
        let t747 = t746 % t742;
        let t748 = t741[t747]
        let t757 = col_i_201 - t725;
        let t758 = t757 % t742;
        let t759 = t758 + t742;
        let t760 = t759 % t742;
        let t761 = t741[t760]
        let t773 = t744 % t718;
        let t774 = t773 + t718;
        let t775 = t774 % t718;
        let t776 = t717[t775]
        let t788 = t757 % t718;
        let t789 = t788 + t718;
        let t790 = t789 % t718;
        let t791 = t717[t790]
        let t803 = t744 % t731;
        let t804 = t803 + t731;
        let t805 = t804 % t731;
        let t806 = t730[t805]
        let t818 = t757 % t731;
        let t819 = t818 + t731;
        let t820 = t819 % t731;
        let t821 = t730[t820]
        let t822 = [t722, t735, t748, t761, t776, t791, t806, t821];
        let t823 = t822.reduce((a, b) => a + b, 0);
        let t360 = t823 == t359;
        let t837 = t823 == t836;
        let t841 = col_el_200 > t840;
        let t364 = t837 && t841;
        let t204 = t360 || t364;
        out_1.push(t204);
      });
      out.push(out_1);
    });
    return out;
  }

  _next_state(input = this.input) {
    let out = [];
    let t205 = input["rows"];
    let t979 = t205.length
    const t980 = -1;
    const t993 = 1;
    const t854 = 3;
    const t859 = 2;
    const t863 = 0;
    t205.forEach((rows_el_206, rows_i_207) => {
      let out_1 = [];
      let t981 = rows_i_207 - t980;
      let t994 = rows_i_207 - t993;
      let t1006 = rows_i_207 % t979;
      let t982 = t981 % t979;
      let t995 = t994 % t979;
      let t1007 = t1006 + t979;
      let t983 = t982 + t979;
      let t996 = t995 + t979;
      let t1008 = t1007 % t979;
      let t984 = t983 % t979;
      let t997 = t996 % t979;
      let t1009 = t205[t1008]
      let t985 = t205[t984]
      let t998 = t205[t997]
      let t1010 = t1009.length
      let t986 = t985.length
      let t999 = t998.length
      rows_el_206.forEach((col_el_208, col_i_209) => {
        let t987 = col_i_209 % t986;
        let t988 = t987 + t986;
        let t989 = t988 % t986;
        let t990 = t985[t989]
        let t1000 = col_i_209 % t999;
        let t1001 = t1000 + t999;
        let t1002 = t1001 % t999;
        let t1003 = t998[t1002]
        let t1012 = col_i_209 - t980;
        let t1013 = t1012 % t1010;
        let t1014 = t1013 + t1010;
        let t1015 = t1014 % t1010;
        let t1016 = t1009[t1015]
        let t1025 = col_i_209 - t993;
        let t1026 = t1025 % t1010;
        let t1027 = t1026 + t1010;
        let t1028 = t1027 % t1010;
        let t1029 = t1009[t1028]
        let t1041 = t1012 % t986;
        let t1042 = t1041 + t986;
        let t1043 = t1042 % t986;
        let t1044 = t985[t1043]
        let t1056 = t1025 % t986;
        let t1057 = t1056 + t986;
        let t1058 = t1057 % t986;
        let t1059 = t985[t1058]
        let t1071 = t1012 % t999;
        let t1072 = t1071 + t999;
        let t1073 = t1072 % t999;
        let t1074 = t998[t1073]
        let t1086 = t1025 % t999;
        let t1087 = t1086 + t999;
        let t1088 = t1087 % t999;
        let t1089 = t998[t1088]
        let t852 = [t990, t1003, t1016, t1029, t1044, t1059, t1074, t1089];
        let t853 = t852.reduce((a, b) => a + b, 0);
        let t855 = t853 == t854;
        let t860 = t853 == t859;
        let t864 = col_el_208 > t863;
        let t865 = t860 && t864;
        let t368 = t855 || t865;
        let t213 = t368 ? t993 : t863;
        out_1.push(t213);
      });
      out.push(out_1);
    });
    return out;
  }

}
