(LIR
  (Declaration a
    %t1 = load_input "rows" :: array
    loop rows id=L1 in %t1 as el=%rows_el_2, idx=%rows_i_3
      loop col id=L2 in %rows_el_2 as el=%col_el_4, idx=%col_i_5
        yield %col_el_4
      end_loop
    end_loop
  )
  (Declaration n
    %t6 = load_input "rows" :: array
    loop rows id=L3 in %t6 as el=%rows_el_7, idx=%rows_i_8
      loop col id=L4 in %rows_el_7 as el=%col_el_9, idx=%col_i_10
        %t11 = length %t6 :: integer
        %t12 = const -1 :: integer
        %t13 = call core.sub(%rows_i_8, %t12) :: integer
        %t14 = const 0 :: integer
        %t15 = call core.gte(%t13, %t14) :: boolean
        %t16 = call core.lt(%t13, %t11) :: boolean
        %t17 = call core.and(%t15, %t16) :: boolean
        %t18 = const 1 :: integer
        %t19 = call core.sub(%t11, %t18) :: integer
        %t20 = const 0 :: integer
        %t21 = call core.clamp(%t13, %t20, %t19) :: integer
        %t22 = gather %t6, %t21 :: any
        %t23 = length %t22 :: integer
        %t24 = call core.mod(%col_i_10, %t23) :: integer
        %t25 = call core.add(%t24, %t23) :: integer
        %t26 = call core.mod(%t25, %t23) :: integer
        %t27 = gather %t22, %t26 :: integer
        %t28 = const 0 :: integer
        %t29 = select %t17, %t27, %t28 :: integer
        yield %t29
      end_loop
    end_loop
  )
  (Declaration s
    %t30 = load_input "rows" :: array
    loop rows id=L5 in %t30 as el=%rows_el_31, idx=%rows_i_32
      loop col id=L6 in %rows_el_31 as el=%col_el_33, idx=%col_i_34
        %t35 = length %t30 :: integer
        %t36 = const 1 :: integer
        %t37 = call core.sub(%rows_i_32, %t36) :: integer
        %t38 = const 0 :: integer
        %t39 = call core.gte(%t37, %t38) :: boolean
        %t40 = call core.lt(%t37, %t35) :: boolean
        %t41 = call core.and(%t39, %t40) :: boolean
        %t42 = const 1 :: integer
        %t43 = call core.sub(%t35, %t42) :: integer
        %t44 = const 0 :: integer
        %t45 = call core.clamp(%t37, %t44, %t43) :: integer
        %t46 = gather %t30, %t45 :: any
        %t47 = length %t46 :: integer
        %t48 = call core.mod(%col_i_34, %t47) :: integer
        %t49 = call core.add(%t48, %t47) :: integer
        %t50 = call core.mod(%t49, %t47) :: integer
        %t51 = gather %t46, %t50 :: integer
        %t52 = const 0 :: integer
        %t53 = select %t41, %t51, %t52 :: integer
        yield %t53
      end_loop
    end_loop
  )
  (Declaration w
    %t54 = load_input "rows" :: array
    loop rows id=L7 in %t54 as el=%rows_el_55, idx=%rows_i_56
      loop col id=L8 in %rows_el_55 as el=%col_el_57, idx=%col_i_58
        %t59 = length %t54 :: integer
        %t60 = call core.mod(%rows_i_56, %t59) :: integer
        %t61 = call core.add(%t60, %t59) :: integer
        %t62 = call core.mod(%t61, %t59) :: integer
        %t63 = gather %t54, %t62 :: any
        %t64 = length %t63 :: integer
        %t65 = const -1 :: integer
        %t66 = call core.sub(%col_i_58, %t65) :: integer
        %t67 = const 0 :: integer
        %t68 = call core.gte(%t66, %t67) :: boolean
        %t69 = call core.lt(%t66, %t64) :: boolean
        %t70 = call core.and(%t68, %t69) :: boolean
        %t71 = const 1 :: integer
        %t72 = call core.sub(%t64, %t71) :: integer
        %t73 = const 0 :: integer
        %t74 = call core.clamp(%t66, %t73, %t72) :: integer
        %t75 = gather %t63, %t74 :: integer
        %t76 = const 0 :: integer
        %t77 = select %t70, %t75, %t76 :: integer
        yield %t77
      end_loop
    end_loop
  )
  (Declaration e
    %t78 = load_input "rows" :: array
    loop rows id=L9 in %t78 as el=%rows_el_79, idx=%rows_i_80
      loop col id=L10 in %rows_el_79 as el=%col_el_81, idx=%col_i_82
        %t83 = length %t78 :: integer
        %t84 = call core.mod(%rows_i_80, %t83) :: integer
        %t85 = call core.add(%t84, %t83) :: integer
        %t86 = call core.mod(%t85, %t83) :: integer
        %t87 = gather %t78, %t86 :: any
        %t88 = length %t87 :: integer
        %t89 = const 1 :: integer
        %t90 = call core.sub(%col_i_82, %t89) :: integer
        %t91 = const 0 :: integer
        %t92 = call core.gte(%t90, %t91) :: boolean
        %t93 = call core.lt(%t90, %t88) :: boolean
        %t94 = call core.and(%t92, %t93) :: boolean
        %t95 = const 1 :: integer
        %t96 = call core.sub(%t88, %t95) :: integer
        %t97 = const 0 :: integer
        %t98 = call core.clamp(%t90, %t97, %t96) :: integer
        %t99 = gather %t87, %t98 :: integer
        %t100 = const 0 :: integer
        %t101 = select %t94, %t99, %t100 :: integer
        yield %t101
      end_loop
    end_loop
  )
  (Declaration nw
    %t102 = load_input "rows" :: array
    loop rows id=L11 in %t102 as el=%rows_el_103, idx=%rows_i_104
      loop col id=L12 in %rows_el_103 as el=%col_el_105, idx=%col_i_106
        %t107 = length %t102 :: integer
        %t108 = const -1 :: integer
        %t109 = call core.sub(%rows_i_104, %t108) :: integer
        %t110 = const 0 :: integer
        %t111 = call core.gte(%t109, %t110) :: boolean
        %t112 = call core.lt(%t109, %t107) :: boolean
        %t113 = call core.and(%t111, %t112) :: boolean
        %t114 = const 1 :: integer
        %t115 = call core.sub(%t107, %t114) :: integer
        %t116 = const 0 :: integer
        %t117 = call core.clamp(%t109, %t116, %t115) :: integer
        %t118 = gather %t102, %t117 :: any
        %t119 = length %t118 :: integer
        %t120 = const -1 :: integer
        %t121 = call core.sub(%col_i_106, %t120) :: integer
        %t122 = const 0 :: integer
        %t123 = call core.gte(%t121, %t122) :: boolean
        %t124 = call core.lt(%t121, %t119) :: boolean
        %t125 = call core.and(%t123, %t124) :: boolean
        %t126 = call core.and(%t113, %t125) :: boolean
        %t127 = const 1 :: integer
        %t128 = call core.sub(%t119, %t127) :: integer
        %t129 = const 0 :: integer
        %t130 = call core.clamp(%t121, %t129, %t128) :: integer
        %t131 = gather %t118, %t130 :: integer
        %t132 = const 0 :: integer
        %t133 = select %t126, %t131, %t132 :: integer
        yield %t133
      end_loop
    end_loop
  )
  (Declaration ne
    %t134 = load_input "rows" :: array
    loop rows id=L13 in %t134 as el=%rows_el_135, idx=%rows_i_136
      loop col id=L14 in %rows_el_135 as el=%col_el_137, idx=%col_i_138
        %t139 = length %t134 :: integer
        %t140 = const -1 :: integer
        %t141 = call core.sub(%rows_i_136, %t140) :: integer
        %t142 = const 0 :: integer
        %t143 = call core.gte(%t141, %t142) :: boolean
        %t144 = call core.lt(%t141, %t139) :: boolean
        %t145 = call core.and(%t143, %t144) :: boolean
        %t146 = const 1 :: integer
        %t147 = call core.sub(%t139, %t146) :: integer
        %t148 = const 0 :: integer
        %t149 = call core.clamp(%t141, %t148, %t147) :: integer
        %t150 = gather %t134, %t149 :: any
        %t151 = length %t150 :: integer
        %t152 = const 1 :: integer
        %t153 = call core.sub(%col_i_138, %t152) :: integer
        %t154 = const 0 :: integer
        %t155 = call core.gte(%t153, %t154) :: boolean
        %t156 = call core.lt(%t153, %t151) :: boolean
        %t157 = call core.and(%t155, %t156) :: boolean
        %t158 = call core.and(%t145, %t157) :: boolean
        %t159 = const 1 :: integer
        %t160 = call core.sub(%t151, %t159) :: integer
        %t161 = const 0 :: integer
        %t162 = call core.clamp(%t153, %t161, %t160) :: integer
        %t163 = gather %t150, %t162 :: integer
        %t164 = const 0 :: integer
        %t165 = select %t158, %t163, %t164 :: integer
        yield %t165
      end_loop
    end_loop
  )
  (Declaration sw
    %t166 = load_input "rows" :: array
    loop rows id=L15 in %t166 as el=%rows_el_167, idx=%rows_i_168
      loop col id=L16 in %rows_el_167 as el=%col_el_169, idx=%col_i_170
        %t171 = length %t166 :: integer
        %t172 = const 1 :: integer
        %t173 = call core.sub(%rows_i_168, %t172) :: integer
        %t174 = const 0 :: integer
        %t175 = call core.gte(%t173, %t174) :: boolean
        %t176 = call core.lt(%t173, %t171) :: boolean
        %t177 = call core.and(%t175, %t176) :: boolean
        %t178 = const 1 :: integer
        %t179 = call core.sub(%t171, %t178) :: integer
        %t180 = const 0 :: integer
        %t181 = call core.clamp(%t173, %t180, %t179) :: integer
        %t182 = gather %t166, %t181 :: any
        %t183 = length %t182 :: integer
        %t184 = const -1 :: integer
        %t185 = call core.sub(%col_i_170, %t184) :: integer
        %t186 = const 0 :: integer
        %t187 = call core.gte(%t185, %t186) :: boolean
        %t188 = call core.lt(%t185, %t183) :: boolean
        %t189 = call core.and(%t187, %t188) :: boolean
        %t190 = call core.and(%t177, %t189) :: boolean
        %t191 = const 1 :: integer
        %t192 = call core.sub(%t183, %t191) :: integer
        %t193 = const 0 :: integer
        %t194 = call core.clamp(%t185, %t193, %t192) :: integer
        %t195 = gather %t182, %t194 :: integer
        %t196 = const 0 :: integer
        %t197 = select %t190, %t195, %t196 :: integer
        yield %t197
      end_loop
    end_loop
  )
  (Declaration se
    %t198 = load_input "rows" :: array
    loop rows id=L17 in %t198 as el=%rows_el_199, idx=%rows_i_200
      loop col id=L18 in %rows_el_199 as el=%col_el_201, idx=%col_i_202
        %t203 = length %t198 :: integer
        %t204 = const 1 :: integer
        %t205 = call core.sub(%rows_i_200, %t204) :: integer
        %t206 = const 0 :: integer
        %t207 = call core.gte(%t205, %t206) :: boolean
        %t208 = call core.lt(%t205, %t203) :: boolean
        %t209 = call core.and(%t207, %t208) :: boolean
        %t210 = const 1 :: integer
        %t211 = call core.sub(%t203, %t210) :: integer
        %t212 = const 0 :: integer
        %t213 = call core.clamp(%t205, %t212, %t211) :: integer
        %t214 = gather %t198, %t213 :: any
        %t215 = length %t214 :: integer
        %t216 = const 1 :: integer
        %t217 = call core.sub(%col_i_202, %t216) :: integer
        %t218 = const 0 :: integer
        %t219 = call core.gte(%t217, %t218) :: boolean
        %t220 = call core.lt(%t217, %t215) :: boolean
        %t221 = call core.and(%t219, %t220) :: boolean
        %t222 = call core.and(%t209, %t221) :: boolean
        %t223 = const 1 :: integer
        %t224 = call core.sub(%t215, %t223) :: integer
        %t225 = const 0 :: integer
        %t226 = call core.clamp(%t217, %t225, %t224) :: integer
        %t227 = gather %t214, %t226 :: integer
        %t228 = const 0 :: integer
        %t229 = select %t222, %t227, %t228 :: integer
        yield %t229
      end_loop
    end_loop
  )
  (Declaration neighbors
    %t230 = load_input "rows" :: array
    loop rows id=L19 in %t230 as el=%rows_el_231, idx=%rows_i_232
      loop col id=L20 in %rows_el_231 as el=%col_el_233, idx=%col_i_234
        %t294 = load_input "rows" :: array
        %t295 = length %t294 :: integer
        %t296 = const -1 :: integer
        %t297 = call core.sub(%rows_i_232, %t296) :: integer
        %t298 = const 0 :: integer
        %t299 = call core.gte(%t297, %t298) :: boolean
        %t300 = call core.lt(%t297, %t295) :: boolean
        %t301 = call core.and(%t299, %t300) :: boolean
        %t302 = const 1 :: integer
        %t303 = call core.sub(%t295, %t302) :: integer
        %t304 = const 0 :: integer
        %t305 = call core.clamp(%t297, %t304, %t303) :: integer
        %t306 = gather %t294, %t305 :: any
        %t307 = length %t306 :: integer
        %t308 = call core.mod(%col_i_234, %t307) :: integer
        %t309 = call core.add(%t308, %t307) :: integer
        %t310 = call core.mod(%t309, %t307) :: integer
        %t311 = gather %t306, %t310 :: integer
        %t312 = const 0 :: integer
        %t313 = select %t301, %t311, %t312 :: integer
        %t314 = load_input "rows" :: array
        %t315 = length %t314 :: integer
        %t316 = const 1 :: integer
        %t317 = call core.sub(%rows_i_232, %t316) :: integer
        %t318 = const 0 :: integer
        %t319 = call core.gte(%t317, %t318) :: boolean
        %t320 = call core.lt(%t317, %t315) :: boolean
        %t321 = call core.and(%t319, %t320) :: boolean
        %t322 = const 1 :: integer
        %t323 = call core.sub(%t315, %t322) :: integer
        %t324 = const 0 :: integer
        %t325 = call core.clamp(%t317, %t324, %t323) :: integer
        %t326 = gather %t314, %t325 :: any
        %t327 = length %t326 :: integer
        %t328 = call core.mod(%col_i_234, %t327) :: integer
        %t329 = call core.add(%t328, %t327) :: integer
        %t330 = call core.mod(%t329, %t327) :: integer
        %t331 = gather %t326, %t330 :: integer
        %t332 = const 0 :: integer
        %t333 = select %t321, %t331, %t332 :: integer
        %t334 = load_input "rows" :: array
        %t335 = length %t334 :: integer
        %t336 = call core.mod(%rows_i_232, %t335) :: integer
        %t337 = call core.add(%t336, %t335) :: integer
        %t338 = call core.mod(%t337, %t335) :: integer
        %t339 = gather %t334, %t338 :: any
        %t340 = length %t339 :: integer
        %t341 = const -1 :: integer
        %t342 = call core.sub(%col_i_234, %t341) :: integer
        %t343 = const 0 :: integer
        %t344 = call core.gte(%t342, %t343) :: boolean
        %t345 = call core.lt(%t342, %t340) :: boolean
        %t346 = call core.and(%t344, %t345) :: boolean
        %t347 = const 1 :: integer
        %t348 = call core.sub(%t340, %t347) :: integer
        %t349 = const 0 :: integer
        %t350 = call core.clamp(%t342, %t349, %t348) :: integer
        %t351 = gather %t339, %t350 :: integer
        %t352 = const 0 :: integer
        %t353 = select %t346, %t351, %t352 :: integer
        %t354 = load_input "rows" :: array
        %t355 = length %t354 :: integer
        %t356 = call core.mod(%rows_i_232, %t355) :: integer
        %t357 = call core.add(%t356, %t355) :: integer
        %t358 = call core.mod(%t357, %t355) :: integer
        %t359 = gather %t354, %t358 :: any
        %t360 = length %t359 :: integer
        %t361 = const 1 :: integer
        %t362 = call core.sub(%col_i_234, %t361) :: integer
        %t363 = const 0 :: integer
        %t364 = call core.gte(%t362, %t363) :: boolean
        %t365 = call core.lt(%t362, %t360) :: boolean
        %t366 = call core.and(%t364, %t365) :: boolean
        %t367 = const 1 :: integer
        %t368 = call core.sub(%t360, %t367) :: integer
        %t369 = const 0 :: integer
        %t370 = call core.clamp(%t362, %t369, %t368) :: integer
        %t371 = gather %t359, %t370 :: integer
        %t372 = const 0 :: integer
        %t373 = select %t366, %t371, %t372 :: integer
        %t374 = load_input "rows" :: array
        %t375 = length %t374 :: integer
        %t376 = const -1 :: integer
        %t377 = call core.sub(%rows_i_232, %t376) :: integer
        %t378 = const 0 :: integer
        %t379 = call core.gte(%t377, %t378) :: boolean
        %t380 = call core.lt(%t377, %t375) :: boolean
        %t381 = call core.and(%t379, %t380) :: boolean
        %t382 = const 1 :: integer
        %t383 = call core.sub(%t375, %t382) :: integer
        %t384 = const 0 :: integer
        %t385 = call core.clamp(%t377, %t384, %t383) :: integer
        %t386 = gather %t374, %t385 :: any
        %t387 = length %t386 :: integer
        %t388 = const -1 :: integer
        %t389 = call core.sub(%col_i_234, %t388) :: integer
        %t390 = const 0 :: integer
        %t391 = call core.gte(%t389, %t390) :: boolean
        %t392 = call core.lt(%t389, %t387) :: boolean
        %t393 = call core.and(%t391, %t392) :: boolean
        %t394 = call core.and(%t381, %t393) :: boolean
        %t395 = const 1 :: integer
        %t396 = call core.sub(%t387, %t395) :: integer
        %t397 = const 0 :: integer
        %t398 = call core.clamp(%t389, %t397, %t396) :: integer
        %t399 = gather %t386, %t398 :: integer
        %t400 = const 0 :: integer
        %t401 = select %t394, %t399, %t400 :: integer
        %t402 = load_input "rows" :: array
        %t403 = length %t402 :: integer
        %t404 = const -1 :: integer
        %t405 = call core.sub(%rows_i_232, %t404) :: integer
        %t406 = const 0 :: integer
        %t407 = call core.gte(%t405, %t406) :: boolean
        %t408 = call core.lt(%t405, %t403) :: boolean
        %t409 = call core.and(%t407, %t408) :: boolean
        %t410 = const 1 :: integer
        %t411 = call core.sub(%t403, %t410) :: integer
        %t412 = const 0 :: integer
        %t413 = call core.clamp(%t405, %t412, %t411) :: integer
        %t414 = gather %t402, %t413 :: any
        %t415 = length %t414 :: integer
        %t416 = const 1 :: integer
        %t417 = call core.sub(%col_i_234, %t416) :: integer
        %t418 = const 0 :: integer
        %t419 = call core.gte(%t417, %t418) :: boolean
        %t420 = call core.lt(%t417, %t415) :: boolean
        %t421 = call core.and(%t419, %t420) :: boolean
        %t422 = call core.and(%t409, %t421) :: boolean
        %t423 = const 1 :: integer
        %t424 = call core.sub(%t415, %t423) :: integer
        %t425 = const 0 :: integer
        %t426 = call core.clamp(%t417, %t425, %t424) :: integer
        %t427 = gather %t414, %t426 :: integer
        %t428 = const 0 :: integer
        %t429 = select %t422, %t427, %t428 :: integer
        %t430 = load_input "rows" :: array
        %t431 = length %t430 :: integer
        %t432 = const 1 :: integer
        %t433 = call core.sub(%rows_i_232, %t432) :: integer
        %t434 = const 0 :: integer
        %t435 = call core.gte(%t433, %t434) :: boolean
        %t436 = call core.lt(%t433, %t431) :: boolean
        %t437 = call core.and(%t435, %t436) :: boolean
        %t438 = const 1 :: integer
        %t439 = call core.sub(%t431, %t438) :: integer
        %t440 = const 0 :: integer
        %t441 = call core.clamp(%t433, %t440, %t439) :: integer
        %t442 = gather %t430, %t441 :: any
        %t443 = length %t442 :: integer
        %t444 = const -1 :: integer
        %t445 = call core.sub(%col_i_234, %t444) :: integer
        %t446 = const 0 :: integer
        %t447 = call core.gte(%t445, %t446) :: boolean
        %t448 = call core.lt(%t445, %t443) :: boolean
        %t449 = call core.and(%t447, %t448) :: boolean
        %t450 = call core.and(%t437, %t449) :: boolean
        %t451 = const 1 :: integer
        %t452 = call core.sub(%t443, %t451) :: integer
        %t453 = const 0 :: integer
        %t454 = call core.clamp(%t445, %t453, %t452) :: integer
        %t455 = gather %t442, %t454 :: integer
        %t456 = const 0 :: integer
        %t457 = select %t450, %t455, %t456 :: integer
        %t458 = load_input "rows" :: array
        %t459 = length %t458 :: integer
        %t460 = const 1 :: integer
        %t461 = call core.sub(%rows_i_232, %t460) :: integer
        %t462 = const 0 :: integer
        %t463 = call core.gte(%t461, %t462) :: boolean
        %t464 = call core.lt(%t461, %t459) :: boolean
        %t465 = call core.and(%t463, %t464) :: boolean
        %t466 = const 1 :: integer
        %t467 = call core.sub(%t459, %t466) :: integer
        %t468 = const 0 :: integer
        %t469 = call core.clamp(%t461, %t468, %t467) :: integer
        %t470 = gather %t458, %t469 :: any
        %t471 = length %t470 :: integer
        %t472 = const 1 :: integer
        %t473 = call core.sub(%col_i_234, %t472) :: integer
        %t474 = const 0 :: integer
        %t475 = call core.gte(%t473, %t474) :: boolean
        %t476 = call core.lt(%t473, %t471) :: boolean
        %t477 = call core.and(%t475, %t476) :: boolean
        %t478 = call core.and(%t465, %t477) :: boolean
        %t479 = const 1 :: integer
        %t480 = call core.sub(%t471, %t479) :: integer
        %t481 = const 0 :: integer
        %t482 = call core.clamp(%t473, %t481, %t480) :: integer
        %t483 = gather %t470, %t482 :: integer
        %t484 = const 0 :: integer
        %t485 = select %t478, %t483, %t484 :: integer
        %t243 = make_tuple(%t313, %t333, %t353, %t373, %t401, %t429, %t457, %t485) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t244 = fold %t243 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        yield %t244
      end_loop
    end_loop
  )
  (Declaration alive
    %t245 = load_input "rows" :: array
    loop rows id=L21 in %t245 as el=%rows_el_246, idx=%rows_i_247
      loop col id=L22 in %rows_el_246 as el=%col_el_248, idx=%col_i_249
        %t486 = load_input "rows" :: array
        %t251 = const 0 :: integer
        %t252 = call core.gt(%col_el_248, %t251) :: boolean
        yield %t252
      end_loop
    end_loop
  )
  (Declaration n3_alive
    %t253 = load_input "rows" :: array
    loop rows id=L23 in %t253 as el=%rows_el_254, idx=%rows_i_255
      loop col id=L24 in %rows_el_254 as el=%col_el_256, idx=%col_i_257
        %t487 = load_input "rows" :: array
        %t498 = load_input "rows" :: array
        %t499 = length %t498 :: integer
        %t500 = const -1 :: integer
        %t501 = call core.sub(%rows_i_255, %t500) :: integer
        %t502 = const 0 :: integer
        %t503 = call core.gte(%t501, %t502) :: boolean
        %t504 = call core.lt(%t501, %t499) :: boolean
        %t505 = call core.and(%t503, %t504) :: boolean
        %t506 = const 1 :: integer
        %t507 = call core.sub(%t499, %t506) :: integer
        %t508 = const 0 :: integer
        %t509 = call core.clamp(%t501, %t508, %t507) :: integer
        %t510 = gather %t498, %t509 :: any
        %t511 = length %t510 :: integer
        %t512 = call core.mod(%col_i_257, %t511) :: integer
        %t513 = call core.add(%t512, %t511) :: integer
        %t514 = call core.mod(%t513, %t511) :: integer
        %t515 = gather %t510, %t514 :: integer
        %t516 = const 0 :: integer
        %t517 = select %t505, %t515, %t516 :: integer
        %t518 = load_input "rows" :: array
        %t519 = length %t518 :: integer
        %t520 = const 1 :: integer
        %t521 = call core.sub(%rows_i_255, %t520) :: integer
        %t522 = const 0 :: integer
        %t523 = call core.gte(%t521, %t522) :: boolean
        %t524 = call core.lt(%t521, %t519) :: boolean
        %t525 = call core.and(%t523, %t524) :: boolean
        %t526 = const 1 :: integer
        %t527 = call core.sub(%t519, %t526) :: integer
        %t528 = const 0 :: integer
        %t529 = call core.clamp(%t521, %t528, %t527) :: integer
        %t530 = gather %t518, %t529 :: any
        %t531 = length %t530 :: integer
        %t532 = call core.mod(%col_i_257, %t531) :: integer
        %t533 = call core.add(%t532, %t531) :: integer
        %t534 = call core.mod(%t533, %t531) :: integer
        %t535 = gather %t530, %t534 :: integer
        %t536 = const 0 :: integer
        %t537 = select %t525, %t535, %t536 :: integer
        %t538 = load_input "rows" :: array
        %t539 = length %t538 :: integer
        %t540 = call core.mod(%rows_i_255, %t539) :: integer
        %t541 = call core.add(%t540, %t539) :: integer
        %t542 = call core.mod(%t541, %t539) :: integer
        %t543 = gather %t538, %t542 :: any
        %t544 = length %t543 :: integer
        %t545 = const -1 :: integer
        %t546 = call core.sub(%col_i_257, %t545) :: integer
        %t547 = const 0 :: integer
        %t548 = call core.gte(%t546, %t547) :: boolean
        %t549 = call core.lt(%t546, %t544) :: boolean
        %t550 = call core.and(%t548, %t549) :: boolean
        %t551 = const 1 :: integer
        %t552 = call core.sub(%t544, %t551) :: integer
        %t553 = const 0 :: integer
        %t554 = call core.clamp(%t546, %t553, %t552) :: integer
        %t555 = gather %t543, %t554 :: integer
        %t556 = const 0 :: integer
        %t557 = select %t550, %t555, %t556 :: integer
        %t558 = load_input "rows" :: array
        %t559 = length %t558 :: integer
        %t560 = call core.mod(%rows_i_255, %t559) :: integer
        %t561 = call core.add(%t560, %t559) :: integer
        %t562 = call core.mod(%t561, %t559) :: integer
        %t563 = gather %t558, %t562 :: any
        %t564 = length %t563 :: integer
        %t565 = const 1 :: integer
        %t566 = call core.sub(%col_i_257, %t565) :: integer
        %t567 = const 0 :: integer
        %t568 = call core.gte(%t566, %t567) :: boolean
        %t569 = call core.lt(%t566, %t564) :: boolean
        %t570 = call core.and(%t568, %t569) :: boolean
        %t571 = const 1 :: integer
        %t572 = call core.sub(%t564, %t571) :: integer
        %t573 = const 0 :: integer
        %t574 = call core.clamp(%t566, %t573, %t572) :: integer
        %t575 = gather %t563, %t574 :: integer
        %t576 = const 0 :: integer
        %t577 = select %t570, %t575, %t576 :: integer
        %t578 = load_input "rows" :: array
        %t579 = length %t578 :: integer
        %t580 = const -1 :: integer
        %t581 = call core.sub(%rows_i_255, %t580) :: integer
        %t582 = const 0 :: integer
        %t583 = call core.gte(%t581, %t582) :: boolean
        %t584 = call core.lt(%t581, %t579) :: boolean
        %t585 = call core.and(%t583, %t584) :: boolean
        %t586 = const 1 :: integer
        %t587 = call core.sub(%t579, %t586) :: integer
        %t588 = const 0 :: integer
        %t589 = call core.clamp(%t581, %t588, %t587) :: integer
        %t590 = gather %t578, %t589 :: any
        %t591 = length %t590 :: integer
        %t592 = const -1 :: integer
        %t593 = call core.sub(%col_i_257, %t592) :: integer
        %t594 = const 0 :: integer
        %t595 = call core.gte(%t593, %t594) :: boolean
        %t596 = call core.lt(%t593, %t591) :: boolean
        %t597 = call core.and(%t595, %t596) :: boolean
        %t598 = call core.and(%t585, %t597) :: boolean
        %t599 = const 1 :: integer
        %t600 = call core.sub(%t591, %t599) :: integer
        %t601 = const 0 :: integer
        %t602 = call core.clamp(%t593, %t601, %t600) :: integer
        %t603 = gather %t590, %t602 :: integer
        %t604 = const 0 :: integer
        %t605 = select %t598, %t603, %t604 :: integer
        %t606 = load_input "rows" :: array
        %t607 = length %t606 :: integer
        %t608 = const -1 :: integer
        %t609 = call core.sub(%rows_i_255, %t608) :: integer
        %t610 = const 0 :: integer
        %t611 = call core.gte(%t609, %t610) :: boolean
        %t612 = call core.lt(%t609, %t607) :: boolean
        %t613 = call core.and(%t611, %t612) :: boolean
        %t614 = const 1 :: integer
        %t615 = call core.sub(%t607, %t614) :: integer
        %t616 = const 0 :: integer
        %t617 = call core.clamp(%t609, %t616, %t615) :: integer
        %t618 = gather %t606, %t617 :: any
        %t619 = length %t618 :: integer
        %t620 = const 1 :: integer
        %t621 = call core.sub(%col_i_257, %t620) :: integer
        %t622 = const 0 :: integer
        %t623 = call core.gte(%t621, %t622) :: boolean
        %t624 = call core.lt(%t621, %t619) :: boolean
        %t625 = call core.and(%t623, %t624) :: boolean
        %t626 = call core.and(%t613, %t625) :: boolean
        %t627 = const 1 :: integer
        %t628 = call core.sub(%t619, %t627) :: integer
        %t629 = const 0 :: integer
        %t630 = call core.clamp(%t621, %t629, %t628) :: integer
        %t631 = gather %t618, %t630 :: integer
        %t632 = const 0 :: integer
        %t633 = select %t626, %t631, %t632 :: integer
        %t634 = load_input "rows" :: array
        %t635 = length %t634 :: integer
        %t636 = const 1 :: integer
        %t637 = call core.sub(%rows_i_255, %t636) :: integer
        %t638 = const 0 :: integer
        %t639 = call core.gte(%t637, %t638) :: boolean
        %t640 = call core.lt(%t637, %t635) :: boolean
        %t641 = call core.and(%t639, %t640) :: boolean
        %t642 = const 1 :: integer
        %t643 = call core.sub(%t635, %t642) :: integer
        %t644 = const 0 :: integer
        %t645 = call core.clamp(%t637, %t644, %t643) :: integer
        %t646 = gather %t634, %t645 :: any
        %t647 = length %t646 :: integer
        %t648 = const -1 :: integer
        %t649 = call core.sub(%col_i_257, %t648) :: integer
        %t650 = const 0 :: integer
        %t651 = call core.gte(%t649, %t650) :: boolean
        %t652 = call core.lt(%t649, %t647) :: boolean
        %t653 = call core.and(%t651, %t652) :: boolean
        %t654 = call core.and(%t641, %t653) :: boolean
        %t655 = const 1 :: integer
        %t656 = call core.sub(%t647, %t655) :: integer
        %t657 = const 0 :: integer
        %t658 = call core.clamp(%t649, %t657, %t656) :: integer
        %t659 = gather %t646, %t658 :: integer
        %t660 = const 0 :: integer
        %t661 = select %t654, %t659, %t660 :: integer
        %t662 = load_input "rows" :: array
        %t663 = length %t662 :: integer
        %t664 = const 1 :: integer
        %t665 = call core.sub(%rows_i_255, %t664) :: integer
        %t666 = const 0 :: integer
        %t667 = call core.gte(%t665, %t666) :: boolean
        %t668 = call core.lt(%t665, %t663) :: boolean
        %t669 = call core.and(%t667, %t668) :: boolean
        %t670 = const 1 :: integer
        %t671 = call core.sub(%t663, %t670) :: integer
        %t672 = const 0 :: integer
        %t673 = call core.clamp(%t665, %t672, %t671) :: integer
        %t674 = gather %t662, %t673 :: any
        %t675 = length %t674 :: integer
        %t676 = const 1 :: integer
        %t677 = call core.sub(%col_i_257, %t676) :: integer
        %t678 = const 0 :: integer
        %t679 = call core.gte(%t677, %t678) :: boolean
        %t680 = call core.lt(%t677, %t675) :: boolean
        %t681 = call core.and(%t679, %t680) :: boolean
        %t682 = call core.and(%t669, %t681) :: boolean
        %t683 = const 1 :: integer
        %t684 = call core.sub(%t675, %t683) :: integer
        %t685 = const 0 :: integer
        %t686 = call core.clamp(%t677, %t685, %t684) :: integer
        %t687 = gather %t674, %t686 :: integer
        %t688 = const 0 :: integer
        %t689 = select %t682, %t687, %t688 :: integer
        %t496 = make_tuple(%t517, %t537, %t557, %t577, %t605, %t633, %t661, %t689) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t497 = fold %t496 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t259 = const 3 :: integer
        %t260 = call core.eq(%t497, %t259) :: boolean
        yield %t260
      end_loop
    end_loop
  )
  (Declaration n2_alive
    %t261 = load_input "rows" :: array
    loop rows id=L25 in %t261 as el=%rows_el_262, idx=%rows_i_263
      loop col id=L26 in %rows_el_262 as el=%col_el_264, idx=%col_i_265
        %t690 = load_input "rows" :: array
        %t701 = load_input "rows" :: array
        %t702 = length %t701 :: integer
        %t703 = const -1 :: integer
        %t704 = call core.sub(%rows_i_263, %t703) :: integer
        %t705 = const 0 :: integer
        %t706 = call core.gte(%t704, %t705) :: boolean
        %t707 = call core.lt(%t704, %t702) :: boolean
        %t708 = call core.and(%t706, %t707) :: boolean
        %t709 = const 1 :: integer
        %t710 = call core.sub(%t702, %t709) :: integer
        %t711 = const 0 :: integer
        %t712 = call core.clamp(%t704, %t711, %t710) :: integer
        %t713 = gather %t701, %t712 :: any
        %t714 = length %t713 :: integer
        %t715 = call core.mod(%col_i_265, %t714) :: integer
        %t716 = call core.add(%t715, %t714) :: integer
        %t717 = call core.mod(%t716, %t714) :: integer
        %t718 = gather %t713, %t717 :: integer
        %t719 = const 0 :: integer
        %t720 = select %t708, %t718, %t719 :: integer
        %t721 = load_input "rows" :: array
        %t722 = length %t721 :: integer
        %t723 = const 1 :: integer
        %t724 = call core.sub(%rows_i_263, %t723) :: integer
        %t725 = const 0 :: integer
        %t726 = call core.gte(%t724, %t725) :: boolean
        %t727 = call core.lt(%t724, %t722) :: boolean
        %t728 = call core.and(%t726, %t727) :: boolean
        %t729 = const 1 :: integer
        %t730 = call core.sub(%t722, %t729) :: integer
        %t731 = const 0 :: integer
        %t732 = call core.clamp(%t724, %t731, %t730) :: integer
        %t733 = gather %t721, %t732 :: any
        %t734 = length %t733 :: integer
        %t735 = call core.mod(%col_i_265, %t734) :: integer
        %t736 = call core.add(%t735, %t734) :: integer
        %t737 = call core.mod(%t736, %t734) :: integer
        %t738 = gather %t733, %t737 :: integer
        %t739 = const 0 :: integer
        %t740 = select %t728, %t738, %t739 :: integer
        %t741 = load_input "rows" :: array
        %t742 = length %t741 :: integer
        %t743 = call core.mod(%rows_i_263, %t742) :: integer
        %t744 = call core.add(%t743, %t742) :: integer
        %t745 = call core.mod(%t744, %t742) :: integer
        %t746 = gather %t741, %t745 :: any
        %t747 = length %t746 :: integer
        %t748 = const -1 :: integer
        %t749 = call core.sub(%col_i_265, %t748) :: integer
        %t750 = const 0 :: integer
        %t751 = call core.gte(%t749, %t750) :: boolean
        %t752 = call core.lt(%t749, %t747) :: boolean
        %t753 = call core.and(%t751, %t752) :: boolean
        %t754 = const 1 :: integer
        %t755 = call core.sub(%t747, %t754) :: integer
        %t756 = const 0 :: integer
        %t757 = call core.clamp(%t749, %t756, %t755) :: integer
        %t758 = gather %t746, %t757 :: integer
        %t759 = const 0 :: integer
        %t760 = select %t753, %t758, %t759 :: integer
        %t761 = load_input "rows" :: array
        %t762 = length %t761 :: integer
        %t763 = call core.mod(%rows_i_263, %t762) :: integer
        %t764 = call core.add(%t763, %t762) :: integer
        %t765 = call core.mod(%t764, %t762) :: integer
        %t766 = gather %t761, %t765 :: any
        %t767 = length %t766 :: integer
        %t768 = const 1 :: integer
        %t769 = call core.sub(%col_i_265, %t768) :: integer
        %t770 = const 0 :: integer
        %t771 = call core.gte(%t769, %t770) :: boolean
        %t772 = call core.lt(%t769, %t767) :: boolean
        %t773 = call core.and(%t771, %t772) :: boolean
        %t774 = const 1 :: integer
        %t775 = call core.sub(%t767, %t774) :: integer
        %t776 = const 0 :: integer
        %t777 = call core.clamp(%t769, %t776, %t775) :: integer
        %t778 = gather %t766, %t777 :: integer
        %t779 = const 0 :: integer
        %t780 = select %t773, %t778, %t779 :: integer
        %t781 = load_input "rows" :: array
        %t782 = length %t781 :: integer
        %t783 = const -1 :: integer
        %t784 = call core.sub(%rows_i_263, %t783) :: integer
        %t785 = const 0 :: integer
        %t786 = call core.gte(%t784, %t785) :: boolean
        %t787 = call core.lt(%t784, %t782) :: boolean
        %t788 = call core.and(%t786, %t787) :: boolean
        %t789 = const 1 :: integer
        %t790 = call core.sub(%t782, %t789) :: integer
        %t791 = const 0 :: integer
        %t792 = call core.clamp(%t784, %t791, %t790) :: integer
        %t793 = gather %t781, %t792 :: any
        %t794 = length %t793 :: integer
        %t795 = const -1 :: integer
        %t796 = call core.sub(%col_i_265, %t795) :: integer
        %t797 = const 0 :: integer
        %t798 = call core.gte(%t796, %t797) :: boolean
        %t799 = call core.lt(%t796, %t794) :: boolean
        %t800 = call core.and(%t798, %t799) :: boolean
        %t801 = call core.and(%t788, %t800) :: boolean
        %t802 = const 1 :: integer
        %t803 = call core.sub(%t794, %t802) :: integer
        %t804 = const 0 :: integer
        %t805 = call core.clamp(%t796, %t804, %t803) :: integer
        %t806 = gather %t793, %t805 :: integer
        %t807 = const 0 :: integer
        %t808 = select %t801, %t806, %t807 :: integer
        %t809 = load_input "rows" :: array
        %t810 = length %t809 :: integer
        %t811 = const -1 :: integer
        %t812 = call core.sub(%rows_i_263, %t811) :: integer
        %t813 = const 0 :: integer
        %t814 = call core.gte(%t812, %t813) :: boolean
        %t815 = call core.lt(%t812, %t810) :: boolean
        %t816 = call core.and(%t814, %t815) :: boolean
        %t817 = const 1 :: integer
        %t818 = call core.sub(%t810, %t817) :: integer
        %t819 = const 0 :: integer
        %t820 = call core.clamp(%t812, %t819, %t818) :: integer
        %t821 = gather %t809, %t820 :: any
        %t822 = length %t821 :: integer
        %t823 = const 1 :: integer
        %t824 = call core.sub(%col_i_265, %t823) :: integer
        %t825 = const 0 :: integer
        %t826 = call core.gte(%t824, %t825) :: boolean
        %t827 = call core.lt(%t824, %t822) :: boolean
        %t828 = call core.and(%t826, %t827) :: boolean
        %t829 = call core.and(%t816, %t828) :: boolean
        %t830 = const 1 :: integer
        %t831 = call core.sub(%t822, %t830) :: integer
        %t832 = const 0 :: integer
        %t833 = call core.clamp(%t824, %t832, %t831) :: integer
        %t834 = gather %t821, %t833 :: integer
        %t835 = const 0 :: integer
        %t836 = select %t829, %t834, %t835 :: integer
        %t837 = load_input "rows" :: array
        %t838 = length %t837 :: integer
        %t839 = const 1 :: integer
        %t840 = call core.sub(%rows_i_263, %t839) :: integer
        %t841 = const 0 :: integer
        %t842 = call core.gte(%t840, %t841) :: boolean
        %t843 = call core.lt(%t840, %t838) :: boolean
        %t844 = call core.and(%t842, %t843) :: boolean
        %t845 = const 1 :: integer
        %t846 = call core.sub(%t838, %t845) :: integer
        %t847 = const 0 :: integer
        %t848 = call core.clamp(%t840, %t847, %t846) :: integer
        %t849 = gather %t837, %t848 :: any
        %t850 = length %t849 :: integer
        %t851 = const -1 :: integer
        %t852 = call core.sub(%col_i_265, %t851) :: integer
        %t853 = const 0 :: integer
        %t854 = call core.gte(%t852, %t853) :: boolean
        %t855 = call core.lt(%t852, %t850) :: boolean
        %t856 = call core.and(%t854, %t855) :: boolean
        %t857 = call core.and(%t844, %t856) :: boolean
        %t858 = const 1 :: integer
        %t859 = call core.sub(%t850, %t858) :: integer
        %t860 = const 0 :: integer
        %t861 = call core.clamp(%t852, %t860, %t859) :: integer
        %t862 = gather %t849, %t861 :: integer
        %t863 = const 0 :: integer
        %t864 = select %t857, %t862, %t863 :: integer
        %t865 = load_input "rows" :: array
        %t866 = length %t865 :: integer
        %t867 = const 1 :: integer
        %t868 = call core.sub(%rows_i_263, %t867) :: integer
        %t869 = const 0 :: integer
        %t870 = call core.gte(%t868, %t869) :: boolean
        %t871 = call core.lt(%t868, %t866) :: boolean
        %t872 = call core.and(%t870, %t871) :: boolean
        %t873 = const 1 :: integer
        %t874 = call core.sub(%t866, %t873) :: integer
        %t875 = const 0 :: integer
        %t876 = call core.clamp(%t868, %t875, %t874) :: integer
        %t877 = gather %t865, %t876 :: any
        %t878 = length %t877 :: integer
        %t879 = const 1 :: integer
        %t880 = call core.sub(%col_i_265, %t879) :: integer
        %t881 = const 0 :: integer
        %t882 = call core.gte(%t880, %t881) :: boolean
        %t883 = call core.lt(%t880, %t878) :: boolean
        %t884 = call core.and(%t882, %t883) :: boolean
        %t885 = call core.and(%t872, %t884) :: boolean
        %t886 = const 1 :: integer
        %t887 = call core.sub(%t878, %t886) :: integer
        %t888 = const 0 :: integer
        %t889 = call core.clamp(%t880, %t888, %t887) :: integer
        %t890 = gather %t877, %t889 :: integer
        %t891 = const 0 :: integer
        %t892 = select %t885, %t890, %t891 :: integer
        %t699 = make_tuple(%t720, %t740, %t760, %t780, %t808, %t836, %t864, %t892) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t700 = fold %t699 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t267 = const 2 :: integer
        %t268 = call core.eq(%t700, %t267) :: boolean
        yield %t268
      end_loop
    end_loop
  )
  (Declaration keep_alive
    %t269 = load_input "rows" :: array
    loop rows id=L27 in %t269 as el=%rows_el_270, idx=%rows_i_271
      loop col id=L28 in %rows_el_270 as el=%col_el_272, idx=%col_i_273
        %t893 = load_input "rows" :: array
        %t897 = load_input "rows" :: array
        %t908 = load_input "rows" :: array
        %t909 = length %t908 :: integer
        %t910 = const -1 :: integer
        %t911 = call core.sub(%rows_i_271, %t910) :: integer
        %t912 = const 0 :: integer
        %t913 = call core.gte(%t911, %t912) :: boolean
        %t914 = call core.lt(%t911, %t909) :: boolean
        %t915 = call core.and(%t913, %t914) :: boolean
        %t916 = const 1 :: integer
        %t917 = call core.sub(%t909, %t916) :: integer
        %t918 = const 0 :: integer
        %t919 = call core.clamp(%t911, %t918, %t917) :: integer
        %t920 = gather %t908, %t919 :: any
        %t921 = length %t920 :: integer
        %t922 = call core.mod(%col_i_273, %t921) :: integer
        %t923 = call core.add(%t922, %t921) :: integer
        %t924 = call core.mod(%t923, %t921) :: integer
        %t925 = gather %t920, %t924 :: integer
        %t926 = const 0 :: integer
        %t927 = select %t915, %t925, %t926 :: integer
        %t928 = load_input "rows" :: array
        %t929 = length %t928 :: integer
        %t930 = const 1 :: integer
        %t931 = call core.sub(%rows_i_271, %t930) :: integer
        %t932 = const 0 :: integer
        %t933 = call core.gte(%t931, %t932) :: boolean
        %t934 = call core.lt(%t931, %t929) :: boolean
        %t935 = call core.and(%t933, %t934) :: boolean
        %t936 = const 1 :: integer
        %t937 = call core.sub(%t929, %t936) :: integer
        %t938 = const 0 :: integer
        %t939 = call core.clamp(%t931, %t938, %t937) :: integer
        %t940 = gather %t928, %t939 :: any
        %t941 = length %t940 :: integer
        %t942 = call core.mod(%col_i_273, %t941) :: integer
        %t943 = call core.add(%t942, %t941) :: integer
        %t944 = call core.mod(%t943, %t941) :: integer
        %t945 = gather %t940, %t944 :: integer
        %t946 = const 0 :: integer
        %t947 = select %t935, %t945, %t946 :: integer
        %t948 = load_input "rows" :: array
        %t949 = length %t948 :: integer
        %t950 = call core.mod(%rows_i_271, %t949) :: integer
        %t951 = call core.add(%t950, %t949) :: integer
        %t952 = call core.mod(%t951, %t949) :: integer
        %t953 = gather %t948, %t952 :: any
        %t954 = length %t953 :: integer
        %t955 = const -1 :: integer
        %t956 = call core.sub(%col_i_273, %t955) :: integer
        %t957 = const 0 :: integer
        %t958 = call core.gte(%t956, %t957) :: boolean
        %t959 = call core.lt(%t956, %t954) :: boolean
        %t960 = call core.and(%t958, %t959) :: boolean
        %t961 = const 1 :: integer
        %t962 = call core.sub(%t954, %t961) :: integer
        %t963 = const 0 :: integer
        %t964 = call core.clamp(%t956, %t963, %t962) :: integer
        %t965 = gather %t953, %t964 :: integer
        %t966 = const 0 :: integer
        %t967 = select %t960, %t965, %t966 :: integer
        %t968 = load_input "rows" :: array
        %t969 = length %t968 :: integer
        %t970 = call core.mod(%rows_i_271, %t969) :: integer
        %t971 = call core.add(%t970, %t969) :: integer
        %t972 = call core.mod(%t971, %t969) :: integer
        %t973 = gather %t968, %t972 :: any
        %t974 = length %t973 :: integer
        %t975 = const 1 :: integer
        %t976 = call core.sub(%col_i_273, %t975) :: integer
        %t977 = const 0 :: integer
        %t978 = call core.gte(%t976, %t977) :: boolean
        %t979 = call core.lt(%t976, %t974) :: boolean
        %t980 = call core.and(%t978, %t979) :: boolean
        %t981 = const 1 :: integer
        %t982 = call core.sub(%t974, %t981) :: integer
        %t983 = const 0 :: integer
        %t984 = call core.clamp(%t976, %t983, %t982) :: integer
        %t985 = gather %t973, %t984 :: integer
        %t986 = const 0 :: integer
        %t987 = select %t980, %t985, %t986 :: integer
        %t988 = load_input "rows" :: array
        %t989 = length %t988 :: integer
        %t990 = const -1 :: integer
        %t991 = call core.sub(%rows_i_271, %t990) :: integer
        %t992 = const 0 :: integer
        %t993 = call core.gte(%t991, %t992) :: boolean
        %t994 = call core.lt(%t991, %t989) :: boolean
        %t995 = call core.and(%t993, %t994) :: boolean
        %t996 = const 1 :: integer
        %t997 = call core.sub(%t989, %t996) :: integer
        %t998 = const 0 :: integer
        %t999 = call core.clamp(%t991, %t998, %t997) :: integer
        %t1000 = gather %t988, %t999 :: any
        %t1001 = length %t1000 :: integer
        %t1002 = const -1 :: integer
        %t1003 = call core.sub(%col_i_273, %t1002) :: integer
        %t1004 = const 0 :: integer
        %t1005 = call core.gte(%t1003, %t1004) :: boolean
        %t1006 = call core.lt(%t1003, %t1001) :: boolean
        %t1007 = call core.and(%t1005, %t1006) :: boolean
        %t1008 = call core.and(%t995, %t1007) :: boolean
        %t1009 = const 1 :: integer
        %t1010 = call core.sub(%t1001, %t1009) :: integer
        %t1011 = const 0 :: integer
        %t1012 = call core.clamp(%t1003, %t1011, %t1010) :: integer
        %t1013 = gather %t1000, %t1012 :: integer
        %t1014 = const 0 :: integer
        %t1015 = select %t1008, %t1013, %t1014 :: integer
        %t1016 = load_input "rows" :: array
        %t1017 = length %t1016 :: integer
        %t1018 = const -1 :: integer
        %t1019 = call core.sub(%rows_i_271, %t1018) :: integer
        %t1020 = const 0 :: integer
        %t1021 = call core.gte(%t1019, %t1020) :: boolean
        %t1022 = call core.lt(%t1019, %t1017) :: boolean
        %t1023 = call core.and(%t1021, %t1022) :: boolean
        %t1024 = const 1 :: integer
        %t1025 = call core.sub(%t1017, %t1024) :: integer
        %t1026 = const 0 :: integer
        %t1027 = call core.clamp(%t1019, %t1026, %t1025) :: integer
        %t1028 = gather %t1016, %t1027 :: any
        %t1029 = length %t1028 :: integer
        %t1030 = const 1 :: integer
        %t1031 = call core.sub(%col_i_273, %t1030) :: integer
        %t1032 = const 0 :: integer
        %t1033 = call core.gte(%t1031, %t1032) :: boolean
        %t1034 = call core.lt(%t1031, %t1029) :: boolean
        %t1035 = call core.and(%t1033, %t1034) :: boolean
        %t1036 = call core.and(%t1023, %t1035) :: boolean
        %t1037 = const 1 :: integer
        %t1038 = call core.sub(%t1029, %t1037) :: integer
        %t1039 = const 0 :: integer
        %t1040 = call core.clamp(%t1031, %t1039, %t1038) :: integer
        %t1041 = gather %t1028, %t1040 :: integer
        %t1042 = const 0 :: integer
        %t1043 = select %t1036, %t1041, %t1042 :: integer
        %t1044 = load_input "rows" :: array
        %t1045 = length %t1044 :: integer
        %t1046 = const 1 :: integer
        %t1047 = call core.sub(%rows_i_271, %t1046) :: integer
        %t1048 = const 0 :: integer
        %t1049 = call core.gte(%t1047, %t1048) :: boolean
        %t1050 = call core.lt(%t1047, %t1045) :: boolean
        %t1051 = call core.and(%t1049, %t1050) :: boolean
        %t1052 = const 1 :: integer
        %t1053 = call core.sub(%t1045, %t1052) :: integer
        %t1054 = const 0 :: integer
        %t1055 = call core.clamp(%t1047, %t1054, %t1053) :: integer
        %t1056 = gather %t1044, %t1055 :: any
        %t1057 = length %t1056 :: integer
        %t1058 = const -1 :: integer
        %t1059 = call core.sub(%col_i_273, %t1058) :: integer
        %t1060 = const 0 :: integer
        %t1061 = call core.gte(%t1059, %t1060) :: boolean
        %t1062 = call core.lt(%t1059, %t1057) :: boolean
        %t1063 = call core.and(%t1061, %t1062) :: boolean
        %t1064 = call core.and(%t1051, %t1063) :: boolean
        %t1065 = const 1 :: integer
        %t1066 = call core.sub(%t1057, %t1065) :: integer
        %t1067 = const 0 :: integer
        %t1068 = call core.clamp(%t1059, %t1067, %t1066) :: integer
        %t1069 = gather %t1056, %t1068 :: integer
        %t1070 = const 0 :: integer
        %t1071 = select %t1064, %t1069, %t1070 :: integer
        %t1072 = load_input "rows" :: array
        %t1073 = length %t1072 :: integer
        %t1074 = const 1 :: integer
        %t1075 = call core.sub(%rows_i_271, %t1074) :: integer
        %t1076 = const 0 :: integer
        %t1077 = call core.gte(%t1075, %t1076) :: boolean
        %t1078 = call core.lt(%t1075, %t1073) :: boolean
        %t1079 = call core.and(%t1077, %t1078) :: boolean
        %t1080 = const 1 :: integer
        %t1081 = call core.sub(%t1073, %t1080) :: integer
        %t1082 = const 0 :: integer
        %t1083 = call core.clamp(%t1075, %t1082, %t1081) :: integer
        %t1084 = gather %t1072, %t1083 :: any
        %t1085 = length %t1084 :: integer
        %t1086 = const 1 :: integer
        %t1087 = call core.sub(%col_i_273, %t1086) :: integer
        %t1088 = const 0 :: integer
        %t1089 = call core.gte(%t1087, %t1088) :: boolean
        %t1090 = call core.lt(%t1087, %t1085) :: boolean
        %t1091 = call core.and(%t1089, %t1090) :: boolean
        %t1092 = call core.and(%t1079, %t1091) :: boolean
        %t1093 = const 1 :: integer
        %t1094 = call core.sub(%t1085, %t1093) :: integer
        %t1095 = const 0 :: integer
        %t1096 = call core.clamp(%t1087, %t1095, %t1094) :: integer
        %t1097 = gather %t1084, %t1096 :: integer
        %t1098 = const 0 :: integer
        %t1099 = select %t1092, %t1097, %t1098 :: integer
        %t906 = make_tuple(%t927, %t947, %t967, %t987, %t1015, %t1043, %t1071, %t1099) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t907 = fold %t906 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t895 = const 2 :: integer
        %t896 = call core.eq(%t907, %t895) :: boolean
        %t1100 = load_input "rows" :: array
        %t1104 = load_input "rows" :: array
        %t1102 = const 0 :: integer
        %t1103 = call core.gt(%col_el_272, %t1102) :: boolean
        %t276 = call core.and(%t896, %t1103) :: boolean
        yield %t276
      end_loop
    end_loop
  )
  (Declaration next_alive
    %t277 = load_input "rows" :: array
    loop rows id=L29 in %t277 as el=%rows_el_278, idx=%rows_i_279
      loop col id=L30 in %rows_el_278 as el=%col_el_280, idx=%col_i_281
        %t1105 = load_input "rows" :: array
        %t1109 = load_input "rows" :: array
        %t1120 = load_input "rows" :: array
        %t1121 = length %t1120 :: integer
        %t1122 = const -1 :: integer
        %t1123 = call core.sub(%rows_i_279, %t1122) :: integer
        %t1124 = const 0 :: integer
        %t1125 = call core.gte(%t1123, %t1124) :: boolean
        %t1126 = call core.lt(%t1123, %t1121) :: boolean
        %t1127 = call core.and(%t1125, %t1126) :: boolean
        %t1128 = const 1 :: integer
        %t1129 = call core.sub(%t1121, %t1128) :: integer
        %t1130 = const 0 :: integer
        %t1131 = call core.clamp(%t1123, %t1130, %t1129) :: integer
        %t1132 = gather %t1120, %t1131 :: any
        %t1133 = length %t1132 :: integer
        %t1134 = call core.mod(%col_i_281, %t1133) :: integer
        %t1135 = call core.add(%t1134, %t1133) :: integer
        %t1136 = call core.mod(%t1135, %t1133) :: integer
        %t1137 = gather %t1132, %t1136 :: integer
        %t1138 = const 0 :: integer
        %t1139 = select %t1127, %t1137, %t1138 :: integer
        %t1140 = load_input "rows" :: array
        %t1141 = length %t1140 :: integer
        %t1142 = const 1 :: integer
        %t1143 = call core.sub(%rows_i_279, %t1142) :: integer
        %t1144 = const 0 :: integer
        %t1145 = call core.gte(%t1143, %t1144) :: boolean
        %t1146 = call core.lt(%t1143, %t1141) :: boolean
        %t1147 = call core.and(%t1145, %t1146) :: boolean
        %t1148 = const 1 :: integer
        %t1149 = call core.sub(%t1141, %t1148) :: integer
        %t1150 = const 0 :: integer
        %t1151 = call core.clamp(%t1143, %t1150, %t1149) :: integer
        %t1152 = gather %t1140, %t1151 :: any
        %t1153 = length %t1152 :: integer
        %t1154 = call core.mod(%col_i_281, %t1153) :: integer
        %t1155 = call core.add(%t1154, %t1153) :: integer
        %t1156 = call core.mod(%t1155, %t1153) :: integer
        %t1157 = gather %t1152, %t1156 :: integer
        %t1158 = const 0 :: integer
        %t1159 = select %t1147, %t1157, %t1158 :: integer
        %t1160 = load_input "rows" :: array
        %t1161 = length %t1160 :: integer
        %t1162 = call core.mod(%rows_i_279, %t1161) :: integer
        %t1163 = call core.add(%t1162, %t1161) :: integer
        %t1164 = call core.mod(%t1163, %t1161) :: integer
        %t1165 = gather %t1160, %t1164 :: any
        %t1166 = length %t1165 :: integer
        %t1167 = const -1 :: integer
        %t1168 = call core.sub(%col_i_281, %t1167) :: integer
        %t1169 = const 0 :: integer
        %t1170 = call core.gte(%t1168, %t1169) :: boolean
        %t1171 = call core.lt(%t1168, %t1166) :: boolean
        %t1172 = call core.and(%t1170, %t1171) :: boolean
        %t1173 = const 1 :: integer
        %t1174 = call core.sub(%t1166, %t1173) :: integer
        %t1175 = const 0 :: integer
        %t1176 = call core.clamp(%t1168, %t1175, %t1174) :: integer
        %t1177 = gather %t1165, %t1176 :: integer
        %t1178 = const 0 :: integer
        %t1179 = select %t1172, %t1177, %t1178 :: integer
        %t1180 = load_input "rows" :: array
        %t1181 = length %t1180 :: integer
        %t1182 = call core.mod(%rows_i_279, %t1181) :: integer
        %t1183 = call core.add(%t1182, %t1181) :: integer
        %t1184 = call core.mod(%t1183, %t1181) :: integer
        %t1185 = gather %t1180, %t1184 :: any
        %t1186 = length %t1185 :: integer
        %t1187 = const 1 :: integer
        %t1188 = call core.sub(%col_i_281, %t1187) :: integer
        %t1189 = const 0 :: integer
        %t1190 = call core.gte(%t1188, %t1189) :: boolean
        %t1191 = call core.lt(%t1188, %t1186) :: boolean
        %t1192 = call core.and(%t1190, %t1191) :: boolean
        %t1193 = const 1 :: integer
        %t1194 = call core.sub(%t1186, %t1193) :: integer
        %t1195 = const 0 :: integer
        %t1196 = call core.clamp(%t1188, %t1195, %t1194) :: integer
        %t1197 = gather %t1185, %t1196 :: integer
        %t1198 = const 0 :: integer
        %t1199 = select %t1192, %t1197, %t1198 :: integer
        %t1200 = load_input "rows" :: array
        %t1201 = length %t1200 :: integer
        %t1202 = const -1 :: integer
        %t1203 = call core.sub(%rows_i_279, %t1202) :: integer
        %t1204 = const 0 :: integer
        %t1205 = call core.gte(%t1203, %t1204) :: boolean
        %t1206 = call core.lt(%t1203, %t1201) :: boolean
        %t1207 = call core.and(%t1205, %t1206) :: boolean
        %t1208 = const 1 :: integer
        %t1209 = call core.sub(%t1201, %t1208) :: integer
        %t1210 = const 0 :: integer
        %t1211 = call core.clamp(%t1203, %t1210, %t1209) :: integer
        %t1212 = gather %t1200, %t1211 :: any
        %t1213 = length %t1212 :: integer
        %t1214 = const -1 :: integer
        %t1215 = call core.sub(%col_i_281, %t1214) :: integer
        %t1216 = const 0 :: integer
        %t1217 = call core.gte(%t1215, %t1216) :: boolean
        %t1218 = call core.lt(%t1215, %t1213) :: boolean
        %t1219 = call core.and(%t1217, %t1218) :: boolean
        %t1220 = call core.and(%t1207, %t1219) :: boolean
        %t1221 = const 1 :: integer
        %t1222 = call core.sub(%t1213, %t1221) :: integer
        %t1223 = const 0 :: integer
        %t1224 = call core.clamp(%t1215, %t1223, %t1222) :: integer
        %t1225 = gather %t1212, %t1224 :: integer
        %t1226 = const 0 :: integer
        %t1227 = select %t1220, %t1225, %t1226 :: integer
        %t1228 = load_input "rows" :: array
        %t1229 = length %t1228 :: integer
        %t1230 = const -1 :: integer
        %t1231 = call core.sub(%rows_i_279, %t1230) :: integer
        %t1232 = const 0 :: integer
        %t1233 = call core.gte(%t1231, %t1232) :: boolean
        %t1234 = call core.lt(%t1231, %t1229) :: boolean
        %t1235 = call core.and(%t1233, %t1234) :: boolean
        %t1236 = const 1 :: integer
        %t1237 = call core.sub(%t1229, %t1236) :: integer
        %t1238 = const 0 :: integer
        %t1239 = call core.clamp(%t1231, %t1238, %t1237) :: integer
        %t1240 = gather %t1228, %t1239 :: any
        %t1241 = length %t1240 :: integer
        %t1242 = const 1 :: integer
        %t1243 = call core.sub(%col_i_281, %t1242) :: integer
        %t1244 = const 0 :: integer
        %t1245 = call core.gte(%t1243, %t1244) :: boolean
        %t1246 = call core.lt(%t1243, %t1241) :: boolean
        %t1247 = call core.and(%t1245, %t1246) :: boolean
        %t1248 = call core.and(%t1235, %t1247) :: boolean
        %t1249 = const 1 :: integer
        %t1250 = call core.sub(%t1241, %t1249) :: integer
        %t1251 = const 0 :: integer
        %t1252 = call core.clamp(%t1243, %t1251, %t1250) :: integer
        %t1253 = gather %t1240, %t1252 :: integer
        %t1254 = const 0 :: integer
        %t1255 = select %t1248, %t1253, %t1254 :: integer
        %t1256 = load_input "rows" :: array
        %t1257 = length %t1256 :: integer
        %t1258 = const 1 :: integer
        %t1259 = call core.sub(%rows_i_279, %t1258) :: integer
        %t1260 = const 0 :: integer
        %t1261 = call core.gte(%t1259, %t1260) :: boolean
        %t1262 = call core.lt(%t1259, %t1257) :: boolean
        %t1263 = call core.and(%t1261, %t1262) :: boolean
        %t1264 = const 1 :: integer
        %t1265 = call core.sub(%t1257, %t1264) :: integer
        %t1266 = const 0 :: integer
        %t1267 = call core.clamp(%t1259, %t1266, %t1265) :: integer
        %t1268 = gather %t1256, %t1267 :: any
        %t1269 = length %t1268 :: integer
        %t1270 = const -1 :: integer
        %t1271 = call core.sub(%col_i_281, %t1270) :: integer
        %t1272 = const 0 :: integer
        %t1273 = call core.gte(%t1271, %t1272) :: boolean
        %t1274 = call core.lt(%t1271, %t1269) :: boolean
        %t1275 = call core.and(%t1273, %t1274) :: boolean
        %t1276 = call core.and(%t1263, %t1275) :: boolean
        %t1277 = const 1 :: integer
        %t1278 = call core.sub(%t1269, %t1277) :: integer
        %t1279 = const 0 :: integer
        %t1280 = call core.clamp(%t1271, %t1279, %t1278) :: integer
        %t1281 = gather %t1268, %t1280 :: integer
        %t1282 = const 0 :: integer
        %t1283 = select %t1276, %t1281, %t1282 :: integer
        %t1284 = load_input "rows" :: array
        %t1285 = length %t1284 :: integer
        %t1286 = const 1 :: integer
        %t1287 = call core.sub(%rows_i_279, %t1286) :: integer
        %t1288 = const 0 :: integer
        %t1289 = call core.gte(%t1287, %t1288) :: boolean
        %t1290 = call core.lt(%t1287, %t1285) :: boolean
        %t1291 = call core.and(%t1289, %t1290) :: boolean
        %t1292 = const 1 :: integer
        %t1293 = call core.sub(%t1285, %t1292) :: integer
        %t1294 = const 0 :: integer
        %t1295 = call core.clamp(%t1287, %t1294, %t1293) :: integer
        %t1296 = gather %t1284, %t1295 :: any
        %t1297 = length %t1296 :: integer
        %t1298 = const 1 :: integer
        %t1299 = call core.sub(%col_i_281, %t1298) :: integer
        %t1300 = const 0 :: integer
        %t1301 = call core.gte(%t1299, %t1300) :: boolean
        %t1302 = call core.lt(%t1299, %t1297) :: boolean
        %t1303 = call core.and(%t1301, %t1302) :: boolean
        %t1304 = call core.and(%t1291, %t1303) :: boolean
        %t1305 = const 1 :: integer
        %t1306 = call core.sub(%t1297, %t1305) :: integer
        %t1307 = const 0 :: integer
        %t1308 = call core.clamp(%t1299, %t1307, %t1306) :: integer
        %t1309 = gather %t1296, %t1308 :: integer
        %t1310 = const 0 :: integer
        %t1311 = select %t1304, %t1309, %t1310 :: integer
        %t1118 = make_tuple(%t1139, %t1159, %t1179, %t1199, %t1227, %t1255, %t1283, %t1311) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t1119 = fold %t1118 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t1107 = const 3 :: integer
        %t1108 = call core.eq(%t1119, %t1107) :: boolean
        %t1312 = load_input "rows" :: array
        %t1316 = load_input "rows" :: array
        %t1320 = load_input "rows" :: array
        %t1331 = load_input "rows" :: array
        %t1332 = length %t1331 :: integer
        %t1333 = const -1 :: integer
        %t1334 = call core.sub(%rows_i_279, %t1333) :: integer
        %t1335 = const 0 :: integer
        %t1336 = call core.gte(%t1334, %t1335) :: boolean
        %t1337 = call core.lt(%t1334, %t1332) :: boolean
        %t1338 = call core.and(%t1336, %t1337) :: boolean
        %t1339 = const 1 :: integer
        %t1340 = call core.sub(%t1332, %t1339) :: integer
        %t1341 = const 0 :: integer
        %t1342 = call core.clamp(%t1334, %t1341, %t1340) :: integer
        %t1343 = gather %t1331, %t1342 :: any
        %t1344 = length %t1343 :: integer
        %t1345 = call core.mod(%col_i_281, %t1344) :: integer
        %t1346 = call core.add(%t1345, %t1344) :: integer
        %t1347 = call core.mod(%t1346, %t1344) :: integer
        %t1348 = gather %t1343, %t1347 :: integer
        %t1349 = const 0 :: integer
        %t1350 = select %t1338, %t1348, %t1349 :: integer
        %t1351 = load_input "rows" :: array
        %t1352 = length %t1351 :: integer
        %t1353 = const 1 :: integer
        %t1354 = call core.sub(%rows_i_279, %t1353) :: integer
        %t1355 = const 0 :: integer
        %t1356 = call core.gte(%t1354, %t1355) :: boolean
        %t1357 = call core.lt(%t1354, %t1352) :: boolean
        %t1358 = call core.and(%t1356, %t1357) :: boolean
        %t1359 = const 1 :: integer
        %t1360 = call core.sub(%t1352, %t1359) :: integer
        %t1361 = const 0 :: integer
        %t1362 = call core.clamp(%t1354, %t1361, %t1360) :: integer
        %t1363 = gather %t1351, %t1362 :: any
        %t1364 = length %t1363 :: integer
        %t1365 = call core.mod(%col_i_281, %t1364) :: integer
        %t1366 = call core.add(%t1365, %t1364) :: integer
        %t1367 = call core.mod(%t1366, %t1364) :: integer
        %t1368 = gather %t1363, %t1367 :: integer
        %t1369 = const 0 :: integer
        %t1370 = select %t1358, %t1368, %t1369 :: integer
        %t1371 = load_input "rows" :: array
        %t1372 = length %t1371 :: integer
        %t1373 = call core.mod(%rows_i_279, %t1372) :: integer
        %t1374 = call core.add(%t1373, %t1372) :: integer
        %t1375 = call core.mod(%t1374, %t1372) :: integer
        %t1376 = gather %t1371, %t1375 :: any
        %t1377 = length %t1376 :: integer
        %t1378 = const -1 :: integer
        %t1379 = call core.sub(%col_i_281, %t1378) :: integer
        %t1380 = const 0 :: integer
        %t1381 = call core.gte(%t1379, %t1380) :: boolean
        %t1382 = call core.lt(%t1379, %t1377) :: boolean
        %t1383 = call core.and(%t1381, %t1382) :: boolean
        %t1384 = const 1 :: integer
        %t1385 = call core.sub(%t1377, %t1384) :: integer
        %t1386 = const 0 :: integer
        %t1387 = call core.clamp(%t1379, %t1386, %t1385) :: integer
        %t1388 = gather %t1376, %t1387 :: integer
        %t1389 = const 0 :: integer
        %t1390 = select %t1383, %t1388, %t1389 :: integer
        %t1391 = load_input "rows" :: array
        %t1392 = length %t1391 :: integer
        %t1393 = call core.mod(%rows_i_279, %t1392) :: integer
        %t1394 = call core.add(%t1393, %t1392) :: integer
        %t1395 = call core.mod(%t1394, %t1392) :: integer
        %t1396 = gather %t1391, %t1395 :: any
        %t1397 = length %t1396 :: integer
        %t1398 = const 1 :: integer
        %t1399 = call core.sub(%col_i_281, %t1398) :: integer
        %t1400 = const 0 :: integer
        %t1401 = call core.gte(%t1399, %t1400) :: boolean
        %t1402 = call core.lt(%t1399, %t1397) :: boolean
        %t1403 = call core.and(%t1401, %t1402) :: boolean
        %t1404 = const 1 :: integer
        %t1405 = call core.sub(%t1397, %t1404) :: integer
        %t1406 = const 0 :: integer
        %t1407 = call core.clamp(%t1399, %t1406, %t1405) :: integer
        %t1408 = gather %t1396, %t1407 :: integer
        %t1409 = const 0 :: integer
        %t1410 = select %t1403, %t1408, %t1409 :: integer
        %t1411 = load_input "rows" :: array
        %t1412 = length %t1411 :: integer
        %t1413 = const -1 :: integer
        %t1414 = call core.sub(%rows_i_279, %t1413) :: integer
        %t1415 = const 0 :: integer
        %t1416 = call core.gte(%t1414, %t1415) :: boolean
        %t1417 = call core.lt(%t1414, %t1412) :: boolean
        %t1418 = call core.and(%t1416, %t1417) :: boolean
        %t1419 = const 1 :: integer
        %t1420 = call core.sub(%t1412, %t1419) :: integer
        %t1421 = const 0 :: integer
        %t1422 = call core.clamp(%t1414, %t1421, %t1420) :: integer
        %t1423 = gather %t1411, %t1422 :: any
        %t1424 = length %t1423 :: integer
        %t1425 = const -1 :: integer
        %t1426 = call core.sub(%col_i_281, %t1425) :: integer
        %t1427 = const 0 :: integer
        %t1428 = call core.gte(%t1426, %t1427) :: boolean
        %t1429 = call core.lt(%t1426, %t1424) :: boolean
        %t1430 = call core.and(%t1428, %t1429) :: boolean
        %t1431 = call core.and(%t1418, %t1430) :: boolean
        %t1432 = const 1 :: integer
        %t1433 = call core.sub(%t1424, %t1432) :: integer
        %t1434 = const 0 :: integer
        %t1435 = call core.clamp(%t1426, %t1434, %t1433) :: integer
        %t1436 = gather %t1423, %t1435 :: integer
        %t1437 = const 0 :: integer
        %t1438 = select %t1431, %t1436, %t1437 :: integer
        %t1439 = load_input "rows" :: array
        %t1440 = length %t1439 :: integer
        %t1441 = const -1 :: integer
        %t1442 = call core.sub(%rows_i_279, %t1441) :: integer
        %t1443 = const 0 :: integer
        %t1444 = call core.gte(%t1442, %t1443) :: boolean
        %t1445 = call core.lt(%t1442, %t1440) :: boolean
        %t1446 = call core.and(%t1444, %t1445) :: boolean
        %t1447 = const 1 :: integer
        %t1448 = call core.sub(%t1440, %t1447) :: integer
        %t1449 = const 0 :: integer
        %t1450 = call core.clamp(%t1442, %t1449, %t1448) :: integer
        %t1451 = gather %t1439, %t1450 :: any
        %t1452 = length %t1451 :: integer
        %t1453 = const 1 :: integer
        %t1454 = call core.sub(%col_i_281, %t1453) :: integer
        %t1455 = const 0 :: integer
        %t1456 = call core.gte(%t1454, %t1455) :: boolean
        %t1457 = call core.lt(%t1454, %t1452) :: boolean
        %t1458 = call core.and(%t1456, %t1457) :: boolean
        %t1459 = call core.and(%t1446, %t1458) :: boolean
        %t1460 = const 1 :: integer
        %t1461 = call core.sub(%t1452, %t1460) :: integer
        %t1462 = const 0 :: integer
        %t1463 = call core.clamp(%t1454, %t1462, %t1461) :: integer
        %t1464 = gather %t1451, %t1463 :: integer
        %t1465 = const 0 :: integer
        %t1466 = select %t1459, %t1464, %t1465 :: integer
        %t1467 = load_input "rows" :: array
        %t1468 = length %t1467 :: integer
        %t1469 = const 1 :: integer
        %t1470 = call core.sub(%rows_i_279, %t1469) :: integer
        %t1471 = const 0 :: integer
        %t1472 = call core.gte(%t1470, %t1471) :: boolean
        %t1473 = call core.lt(%t1470, %t1468) :: boolean
        %t1474 = call core.and(%t1472, %t1473) :: boolean
        %t1475 = const 1 :: integer
        %t1476 = call core.sub(%t1468, %t1475) :: integer
        %t1477 = const 0 :: integer
        %t1478 = call core.clamp(%t1470, %t1477, %t1476) :: integer
        %t1479 = gather %t1467, %t1478 :: any
        %t1480 = length %t1479 :: integer
        %t1481 = const -1 :: integer
        %t1482 = call core.sub(%col_i_281, %t1481) :: integer
        %t1483 = const 0 :: integer
        %t1484 = call core.gte(%t1482, %t1483) :: boolean
        %t1485 = call core.lt(%t1482, %t1480) :: boolean
        %t1486 = call core.and(%t1484, %t1485) :: boolean
        %t1487 = call core.and(%t1474, %t1486) :: boolean
        %t1488 = const 1 :: integer
        %t1489 = call core.sub(%t1480, %t1488) :: integer
        %t1490 = const 0 :: integer
        %t1491 = call core.clamp(%t1482, %t1490, %t1489) :: integer
        %t1492 = gather %t1479, %t1491 :: integer
        %t1493 = const 0 :: integer
        %t1494 = select %t1487, %t1492, %t1493 :: integer
        %t1495 = load_input "rows" :: array
        %t1496 = length %t1495 :: integer
        %t1497 = const 1 :: integer
        %t1498 = call core.sub(%rows_i_279, %t1497) :: integer
        %t1499 = const 0 :: integer
        %t1500 = call core.gte(%t1498, %t1499) :: boolean
        %t1501 = call core.lt(%t1498, %t1496) :: boolean
        %t1502 = call core.and(%t1500, %t1501) :: boolean
        %t1503 = const 1 :: integer
        %t1504 = call core.sub(%t1496, %t1503) :: integer
        %t1505 = const 0 :: integer
        %t1506 = call core.clamp(%t1498, %t1505, %t1504) :: integer
        %t1507 = gather %t1495, %t1506 :: any
        %t1508 = length %t1507 :: integer
        %t1509 = const 1 :: integer
        %t1510 = call core.sub(%col_i_281, %t1509) :: integer
        %t1511 = const 0 :: integer
        %t1512 = call core.gte(%t1510, %t1511) :: boolean
        %t1513 = call core.lt(%t1510, %t1508) :: boolean
        %t1514 = call core.and(%t1512, %t1513) :: boolean
        %t1515 = call core.and(%t1502, %t1514) :: boolean
        %t1516 = const 1 :: integer
        %t1517 = call core.sub(%t1508, %t1516) :: integer
        %t1518 = const 0 :: integer
        %t1519 = call core.clamp(%t1510, %t1518, %t1517) :: integer
        %t1520 = gather %t1507, %t1519 :: integer
        %t1521 = const 0 :: integer
        %t1522 = select %t1515, %t1520, %t1521 :: integer
        %t1329 = make_tuple(%t1350, %t1370, %t1390, %t1410, %t1438, %t1466, %t1494, %t1522) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t1330 = fold %t1329 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t1318 = const 2 :: integer
        %t1319 = call core.eq(%t1330, %t1318) :: boolean
        %t1523 = load_input "rows" :: array
        %t1527 = load_input "rows" :: array
        %t1525 = const 0 :: integer
        %t1526 = call core.gt(%col_el_280, %t1525) :: boolean
        %t1315 = call core.and(%t1319, %t1526) :: boolean
        %t284 = call core.or(%t1108, %t1315) :: boolean
        yield %t284
      end_loop
    end_loop
  )
  (Declaration next_state
    %t285 = load_input "rows" :: array
    loop rows id=L31 in %t285 as el=%rows_el_286, idx=%rows_i_287
      loop col id=L32 in %rows_el_286 as el=%col_el_288, idx=%col_i_289
        %t1528 = load_input "rows" :: array
        %t1532 = load_input "rows" :: array
        %t1536 = load_input "rows" :: array
        %t1547 = load_input "rows" :: array
        %t1548 = length %t1547 :: integer
        %t1549 = const -1 :: integer
        %t1550 = call core.sub(%rows_i_287, %t1549) :: integer
        %t1551 = const 0 :: integer
        %t1552 = call core.gte(%t1550, %t1551) :: boolean
        %t1553 = call core.lt(%t1550, %t1548) :: boolean
        %t1554 = call core.and(%t1552, %t1553) :: boolean
        %t1555 = const 1 :: integer
        %t1556 = call core.sub(%t1548, %t1555) :: integer
        %t1557 = const 0 :: integer
        %t1558 = call core.clamp(%t1550, %t1557, %t1556) :: integer
        %t1559 = gather %t1547, %t1558 :: any
        %t1560 = length %t1559 :: integer
        %t1561 = call core.mod(%col_i_289, %t1560) :: integer
        %t1562 = call core.add(%t1561, %t1560) :: integer
        %t1563 = call core.mod(%t1562, %t1560) :: integer
        %t1564 = gather %t1559, %t1563 :: integer
        %t1565 = const 0 :: integer
        %t1566 = select %t1554, %t1564, %t1565 :: integer
        %t1567 = load_input "rows" :: array
        %t1568 = length %t1567 :: integer
        %t1569 = const 1 :: integer
        %t1570 = call core.sub(%rows_i_287, %t1569) :: integer
        %t1571 = const 0 :: integer
        %t1572 = call core.gte(%t1570, %t1571) :: boolean
        %t1573 = call core.lt(%t1570, %t1568) :: boolean
        %t1574 = call core.and(%t1572, %t1573) :: boolean
        %t1575 = const 1 :: integer
        %t1576 = call core.sub(%t1568, %t1575) :: integer
        %t1577 = const 0 :: integer
        %t1578 = call core.clamp(%t1570, %t1577, %t1576) :: integer
        %t1579 = gather %t1567, %t1578 :: any
        %t1580 = length %t1579 :: integer
        %t1581 = call core.mod(%col_i_289, %t1580) :: integer
        %t1582 = call core.add(%t1581, %t1580) :: integer
        %t1583 = call core.mod(%t1582, %t1580) :: integer
        %t1584 = gather %t1579, %t1583 :: integer
        %t1585 = const 0 :: integer
        %t1586 = select %t1574, %t1584, %t1585 :: integer
        %t1587 = load_input "rows" :: array
        %t1588 = length %t1587 :: integer
        %t1589 = call core.mod(%rows_i_287, %t1588) :: integer
        %t1590 = call core.add(%t1589, %t1588) :: integer
        %t1591 = call core.mod(%t1590, %t1588) :: integer
        %t1592 = gather %t1587, %t1591 :: any
        %t1593 = length %t1592 :: integer
        %t1594 = const -1 :: integer
        %t1595 = call core.sub(%col_i_289, %t1594) :: integer
        %t1596 = const 0 :: integer
        %t1597 = call core.gte(%t1595, %t1596) :: boolean
        %t1598 = call core.lt(%t1595, %t1593) :: boolean
        %t1599 = call core.and(%t1597, %t1598) :: boolean
        %t1600 = const 1 :: integer
        %t1601 = call core.sub(%t1593, %t1600) :: integer
        %t1602 = const 0 :: integer
        %t1603 = call core.clamp(%t1595, %t1602, %t1601) :: integer
        %t1604 = gather %t1592, %t1603 :: integer
        %t1605 = const 0 :: integer
        %t1606 = select %t1599, %t1604, %t1605 :: integer
        %t1607 = load_input "rows" :: array
        %t1608 = length %t1607 :: integer
        %t1609 = call core.mod(%rows_i_287, %t1608) :: integer
        %t1610 = call core.add(%t1609, %t1608) :: integer
        %t1611 = call core.mod(%t1610, %t1608) :: integer
        %t1612 = gather %t1607, %t1611 :: any
        %t1613 = length %t1612 :: integer
        %t1614 = const 1 :: integer
        %t1615 = call core.sub(%col_i_289, %t1614) :: integer
        %t1616 = const 0 :: integer
        %t1617 = call core.gte(%t1615, %t1616) :: boolean
        %t1618 = call core.lt(%t1615, %t1613) :: boolean
        %t1619 = call core.and(%t1617, %t1618) :: boolean
        %t1620 = const 1 :: integer
        %t1621 = call core.sub(%t1613, %t1620) :: integer
        %t1622 = const 0 :: integer
        %t1623 = call core.clamp(%t1615, %t1622, %t1621) :: integer
        %t1624 = gather %t1612, %t1623 :: integer
        %t1625 = const 0 :: integer
        %t1626 = select %t1619, %t1624, %t1625 :: integer
        %t1627 = load_input "rows" :: array
        %t1628 = length %t1627 :: integer
        %t1629 = const -1 :: integer
        %t1630 = call core.sub(%rows_i_287, %t1629) :: integer
        %t1631 = const 0 :: integer
        %t1632 = call core.gte(%t1630, %t1631) :: boolean
        %t1633 = call core.lt(%t1630, %t1628) :: boolean
        %t1634 = call core.and(%t1632, %t1633) :: boolean
        %t1635 = const 1 :: integer
        %t1636 = call core.sub(%t1628, %t1635) :: integer
        %t1637 = const 0 :: integer
        %t1638 = call core.clamp(%t1630, %t1637, %t1636) :: integer
        %t1639 = gather %t1627, %t1638 :: any
        %t1640 = length %t1639 :: integer
        %t1641 = const -1 :: integer
        %t1642 = call core.sub(%col_i_289, %t1641) :: integer
        %t1643 = const 0 :: integer
        %t1644 = call core.gte(%t1642, %t1643) :: boolean
        %t1645 = call core.lt(%t1642, %t1640) :: boolean
        %t1646 = call core.and(%t1644, %t1645) :: boolean
        %t1647 = call core.and(%t1634, %t1646) :: boolean
        %t1648 = const 1 :: integer
        %t1649 = call core.sub(%t1640, %t1648) :: integer
        %t1650 = const 0 :: integer
        %t1651 = call core.clamp(%t1642, %t1650, %t1649) :: integer
        %t1652 = gather %t1639, %t1651 :: integer
        %t1653 = const 0 :: integer
        %t1654 = select %t1647, %t1652, %t1653 :: integer
        %t1655 = load_input "rows" :: array
        %t1656 = length %t1655 :: integer
        %t1657 = const -1 :: integer
        %t1658 = call core.sub(%rows_i_287, %t1657) :: integer
        %t1659 = const 0 :: integer
        %t1660 = call core.gte(%t1658, %t1659) :: boolean
        %t1661 = call core.lt(%t1658, %t1656) :: boolean
        %t1662 = call core.and(%t1660, %t1661) :: boolean
        %t1663 = const 1 :: integer
        %t1664 = call core.sub(%t1656, %t1663) :: integer
        %t1665 = const 0 :: integer
        %t1666 = call core.clamp(%t1658, %t1665, %t1664) :: integer
        %t1667 = gather %t1655, %t1666 :: any
        %t1668 = length %t1667 :: integer
        %t1669 = const 1 :: integer
        %t1670 = call core.sub(%col_i_289, %t1669) :: integer
        %t1671 = const 0 :: integer
        %t1672 = call core.gte(%t1670, %t1671) :: boolean
        %t1673 = call core.lt(%t1670, %t1668) :: boolean
        %t1674 = call core.and(%t1672, %t1673) :: boolean
        %t1675 = call core.and(%t1662, %t1674) :: boolean
        %t1676 = const 1 :: integer
        %t1677 = call core.sub(%t1668, %t1676) :: integer
        %t1678 = const 0 :: integer
        %t1679 = call core.clamp(%t1670, %t1678, %t1677) :: integer
        %t1680 = gather %t1667, %t1679 :: integer
        %t1681 = const 0 :: integer
        %t1682 = select %t1675, %t1680, %t1681 :: integer
        %t1683 = load_input "rows" :: array
        %t1684 = length %t1683 :: integer
        %t1685 = const 1 :: integer
        %t1686 = call core.sub(%rows_i_287, %t1685) :: integer
        %t1687 = const 0 :: integer
        %t1688 = call core.gte(%t1686, %t1687) :: boolean
        %t1689 = call core.lt(%t1686, %t1684) :: boolean
        %t1690 = call core.and(%t1688, %t1689) :: boolean
        %t1691 = const 1 :: integer
        %t1692 = call core.sub(%t1684, %t1691) :: integer
        %t1693 = const 0 :: integer
        %t1694 = call core.clamp(%t1686, %t1693, %t1692) :: integer
        %t1695 = gather %t1683, %t1694 :: any
        %t1696 = length %t1695 :: integer
        %t1697 = const -1 :: integer
        %t1698 = call core.sub(%col_i_289, %t1697) :: integer
        %t1699 = const 0 :: integer
        %t1700 = call core.gte(%t1698, %t1699) :: boolean
        %t1701 = call core.lt(%t1698, %t1696) :: boolean
        %t1702 = call core.and(%t1700, %t1701) :: boolean
        %t1703 = call core.and(%t1690, %t1702) :: boolean
        %t1704 = const 1 :: integer
        %t1705 = call core.sub(%t1696, %t1704) :: integer
        %t1706 = const 0 :: integer
        %t1707 = call core.clamp(%t1698, %t1706, %t1705) :: integer
        %t1708 = gather %t1695, %t1707 :: integer
        %t1709 = const 0 :: integer
        %t1710 = select %t1703, %t1708, %t1709 :: integer
        %t1711 = load_input "rows" :: array
        %t1712 = length %t1711 :: integer
        %t1713 = const 1 :: integer
        %t1714 = call core.sub(%rows_i_287, %t1713) :: integer
        %t1715 = const 0 :: integer
        %t1716 = call core.gte(%t1714, %t1715) :: boolean
        %t1717 = call core.lt(%t1714, %t1712) :: boolean
        %t1718 = call core.and(%t1716, %t1717) :: boolean
        %t1719 = const 1 :: integer
        %t1720 = call core.sub(%t1712, %t1719) :: integer
        %t1721 = const 0 :: integer
        %t1722 = call core.clamp(%t1714, %t1721, %t1720) :: integer
        %t1723 = gather %t1711, %t1722 :: any
        %t1724 = length %t1723 :: integer
        %t1725 = const 1 :: integer
        %t1726 = call core.sub(%col_i_289, %t1725) :: integer
        %t1727 = const 0 :: integer
        %t1728 = call core.gte(%t1726, %t1727) :: boolean
        %t1729 = call core.lt(%t1726, %t1724) :: boolean
        %t1730 = call core.and(%t1728, %t1729) :: boolean
        %t1731 = call core.and(%t1718, %t1730) :: boolean
        %t1732 = const 1 :: integer
        %t1733 = call core.sub(%t1724, %t1732) :: integer
        %t1734 = const 0 :: integer
        %t1735 = call core.clamp(%t1726, %t1734, %t1733) :: integer
        %t1736 = gather %t1723, %t1735 :: integer
        %t1737 = const 0 :: integer
        %t1738 = select %t1731, %t1736, %t1737 :: integer
        %t1545 = make_tuple(%t1566, %t1586, %t1606, %t1626, %t1654, %t1682, %t1710, %t1738) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t1546 = fold %t1545 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t1534 = const 3 :: integer
        %t1535 = call core.eq(%t1546, %t1534) :: boolean
        %t1739 = load_input "rows" :: array
        %t1743 = load_input "rows" :: array
        %t1747 = load_input "rows" :: array
        %t1758 = load_input "rows" :: array
        %t1759 = length %t1758 :: integer
        %t1760 = const -1 :: integer
        %t1761 = call core.sub(%rows_i_287, %t1760) :: integer
        %t1762 = const 0 :: integer
        %t1763 = call core.gte(%t1761, %t1762) :: boolean
        %t1764 = call core.lt(%t1761, %t1759) :: boolean
        %t1765 = call core.and(%t1763, %t1764) :: boolean
        %t1766 = const 1 :: integer
        %t1767 = call core.sub(%t1759, %t1766) :: integer
        %t1768 = const 0 :: integer
        %t1769 = call core.clamp(%t1761, %t1768, %t1767) :: integer
        %t1770 = gather %t1758, %t1769 :: any
        %t1771 = length %t1770 :: integer
        %t1772 = call core.mod(%col_i_289, %t1771) :: integer
        %t1773 = call core.add(%t1772, %t1771) :: integer
        %t1774 = call core.mod(%t1773, %t1771) :: integer
        %t1775 = gather %t1770, %t1774 :: integer
        %t1776 = const 0 :: integer
        %t1777 = select %t1765, %t1775, %t1776 :: integer
        %t1778 = load_input "rows" :: array
        %t1779 = length %t1778 :: integer
        %t1780 = const 1 :: integer
        %t1781 = call core.sub(%rows_i_287, %t1780) :: integer
        %t1782 = const 0 :: integer
        %t1783 = call core.gte(%t1781, %t1782) :: boolean
        %t1784 = call core.lt(%t1781, %t1779) :: boolean
        %t1785 = call core.and(%t1783, %t1784) :: boolean
        %t1786 = const 1 :: integer
        %t1787 = call core.sub(%t1779, %t1786) :: integer
        %t1788 = const 0 :: integer
        %t1789 = call core.clamp(%t1781, %t1788, %t1787) :: integer
        %t1790 = gather %t1778, %t1789 :: any
        %t1791 = length %t1790 :: integer
        %t1792 = call core.mod(%col_i_289, %t1791) :: integer
        %t1793 = call core.add(%t1792, %t1791) :: integer
        %t1794 = call core.mod(%t1793, %t1791) :: integer
        %t1795 = gather %t1790, %t1794 :: integer
        %t1796 = const 0 :: integer
        %t1797 = select %t1785, %t1795, %t1796 :: integer
        %t1798 = load_input "rows" :: array
        %t1799 = length %t1798 :: integer
        %t1800 = call core.mod(%rows_i_287, %t1799) :: integer
        %t1801 = call core.add(%t1800, %t1799) :: integer
        %t1802 = call core.mod(%t1801, %t1799) :: integer
        %t1803 = gather %t1798, %t1802 :: any
        %t1804 = length %t1803 :: integer
        %t1805 = const -1 :: integer
        %t1806 = call core.sub(%col_i_289, %t1805) :: integer
        %t1807 = const 0 :: integer
        %t1808 = call core.gte(%t1806, %t1807) :: boolean
        %t1809 = call core.lt(%t1806, %t1804) :: boolean
        %t1810 = call core.and(%t1808, %t1809) :: boolean
        %t1811 = const 1 :: integer
        %t1812 = call core.sub(%t1804, %t1811) :: integer
        %t1813 = const 0 :: integer
        %t1814 = call core.clamp(%t1806, %t1813, %t1812) :: integer
        %t1815 = gather %t1803, %t1814 :: integer
        %t1816 = const 0 :: integer
        %t1817 = select %t1810, %t1815, %t1816 :: integer
        %t1818 = load_input "rows" :: array
        %t1819 = length %t1818 :: integer
        %t1820 = call core.mod(%rows_i_287, %t1819) :: integer
        %t1821 = call core.add(%t1820, %t1819) :: integer
        %t1822 = call core.mod(%t1821, %t1819) :: integer
        %t1823 = gather %t1818, %t1822 :: any
        %t1824 = length %t1823 :: integer
        %t1825 = const 1 :: integer
        %t1826 = call core.sub(%col_i_289, %t1825) :: integer
        %t1827 = const 0 :: integer
        %t1828 = call core.gte(%t1826, %t1827) :: boolean
        %t1829 = call core.lt(%t1826, %t1824) :: boolean
        %t1830 = call core.and(%t1828, %t1829) :: boolean
        %t1831 = const 1 :: integer
        %t1832 = call core.sub(%t1824, %t1831) :: integer
        %t1833 = const 0 :: integer
        %t1834 = call core.clamp(%t1826, %t1833, %t1832) :: integer
        %t1835 = gather %t1823, %t1834 :: integer
        %t1836 = const 0 :: integer
        %t1837 = select %t1830, %t1835, %t1836 :: integer
        %t1838 = load_input "rows" :: array
        %t1839 = length %t1838 :: integer
        %t1840 = const -1 :: integer
        %t1841 = call core.sub(%rows_i_287, %t1840) :: integer
        %t1842 = const 0 :: integer
        %t1843 = call core.gte(%t1841, %t1842) :: boolean
        %t1844 = call core.lt(%t1841, %t1839) :: boolean
        %t1845 = call core.and(%t1843, %t1844) :: boolean
        %t1846 = const 1 :: integer
        %t1847 = call core.sub(%t1839, %t1846) :: integer
        %t1848 = const 0 :: integer
        %t1849 = call core.clamp(%t1841, %t1848, %t1847) :: integer
        %t1850 = gather %t1838, %t1849 :: any
        %t1851 = length %t1850 :: integer
        %t1852 = const -1 :: integer
        %t1853 = call core.sub(%col_i_289, %t1852) :: integer
        %t1854 = const 0 :: integer
        %t1855 = call core.gte(%t1853, %t1854) :: boolean
        %t1856 = call core.lt(%t1853, %t1851) :: boolean
        %t1857 = call core.and(%t1855, %t1856) :: boolean
        %t1858 = call core.and(%t1845, %t1857) :: boolean
        %t1859 = const 1 :: integer
        %t1860 = call core.sub(%t1851, %t1859) :: integer
        %t1861 = const 0 :: integer
        %t1862 = call core.clamp(%t1853, %t1861, %t1860) :: integer
        %t1863 = gather %t1850, %t1862 :: integer
        %t1864 = const 0 :: integer
        %t1865 = select %t1858, %t1863, %t1864 :: integer
        %t1866 = load_input "rows" :: array
        %t1867 = length %t1866 :: integer
        %t1868 = const -1 :: integer
        %t1869 = call core.sub(%rows_i_287, %t1868) :: integer
        %t1870 = const 0 :: integer
        %t1871 = call core.gte(%t1869, %t1870) :: boolean
        %t1872 = call core.lt(%t1869, %t1867) :: boolean
        %t1873 = call core.and(%t1871, %t1872) :: boolean
        %t1874 = const 1 :: integer
        %t1875 = call core.sub(%t1867, %t1874) :: integer
        %t1876 = const 0 :: integer
        %t1877 = call core.clamp(%t1869, %t1876, %t1875) :: integer
        %t1878 = gather %t1866, %t1877 :: any
        %t1879 = length %t1878 :: integer
        %t1880 = const 1 :: integer
        %t1881 = call core.sub(%col_i_289, %t1880) :: integer
        %t1882 = const 0 :: integer
        %t1883 = call core.gte(%t1881, %t1882) :: boolean
        %t1884 = call core.lt(%t1881, %t1879) :: boolean
        %t1885 = call core.and(%t1883, %t1884) :: boolean
        %t1886 = call core.and(%t1873, %t1885) :: boolean
        %t1887 = const 1 :: integer
        %t1888 = call core.sub(%t1879, %t1887) :: integer
        %t1889 = const 0 :: integer
        %t1890 = call core.clamp(%t1881, %t1889, %t1888) :: integer
        %t1891 = gather %t1878, %t1890 :: integer
        %t1892 = const 0 :: integer
        %t1893 = select %t1886, %t1891, %t1892 :: integer
        %t1894 = load_input "rows" :: array
        %t1895 = length %t1894 :: integer
        %t1896 = const 1 :: integer
        %t1897 = call core.sub(%rows_i_287, %t1896) :: integer
        %t1898 = const 0 :: integer
        %t1899 = call core.gte(%t1897, %t1898) :: boolean
        %t1900 = call core.lt(%t1897, %t1895) :: boolean
        %t1901 = call core.and(%t1899, %t1900) :: boolean
        %t1902 = const 1 :: integer
        %t1903 = call core.sub(%t1895, %t1902) :: integer
        %t1904 = const 0 :: integer
        %t1905 = call core.clamp(%t1897, %t1904, %t1903) :: integer
        %t1906 = gather %t1894, %t1905 :: any
        %t1907 = length %t1906 :: integer
        %t1908 = const -1 :: integer
        %t1909 = call core.sub(%col_i_289, %t1908) :: integer
        %t1910 = const 0 :: integer
        %t1911 = call core.gte(%t1909, %t1910) :: boolean
        %t1912 = call core.lt(%t1909, %t1907) :: boolean
        %t1913 = call core.and(%t1911, %t1912) :: boolean
        %t1914 = call core.and(%t1901, %t1913) :: boolean
        %t1915 = const 1 :: integer
        %t1916 = call core.sub(%t1907, %t1915) :: integer
        %t1917 = const 0 :: integer
        %t1918 = call core.clamp(%t1909, %t1917, %t1916) :: integer
        %t1919 = gather %t1906, %t1918 :: integer
        %t1920 = const 0 :: integer
        %t1921 = select %t1914, %t1919, %t1920 :: integer
        %t1922 = load_input "rows" :: array
        %t1923 = length %t1922 :: integer
        %t1924 = const 1 :: integer
        %t1925 = call core.sub(%rows_i_287, %t1924) :: integer
        %t1926 = const 0 :: integer
        %t1927 = call core.gte(%t1925, %t1926) :: boolean
        %t1928 = call core.lt(%t1925, %t1923) :: boolean
        %t1929 = call core.and(%t1927, %t1928) :: boolean
        %t1930 = const 1 :: integer
        %t1931 = call core.sub(%t1923, %t1930) :: integer
        %t1932 = const 0 :: integer
        %t1933 = call core.clamp(%t1925, %t1932, %t1931) :: integer
        %t1934 = gather %t1922, %t1933 :: any
        %t1935 = length %t1934 :: integer
        %t1936 = const 1 :: integer
        %t1937 = call core.sub(%col_i_289, %t1936) :: integer
        %t1938 = const 0 :: integer
        %t1939 = call core.gte(%t1937, %t1938) :: boolean
        %t1940 = call core.lt(%t1937, %t1935) :: boolean
        %t1941 = call core.and(%t1939, %t1940) :: boolean
        %t1942 = call core.and(%t1929, %t1941) :: boolean
        %t1943 = const 1 :: integer
        %t1944 = call core.sub(%t1935, %t1943) :: integer
        %t1945 = const 0 :: integer
        %t1946 = call core.clamp(%t1937, %t1945, %t1944) :: integer
        %t1947 = gather %t1934, %t1946 :: integer
        %t1948 = const 0 :: integer
        %t1949 = select %t1942, %t1947, %t1948 :: integer
        %t1756 = make_tuple(%t1777, %t1797, %t1817, %t1837, %t1865, %t1893, %t1921, %t1949) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t1757 = fold %t1756 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t1745 = const 2 :: integer
        %t1746 = call core.eq(%t1757, %t1745) :: boolean
        %t1950 = load_input "rows" :: array
        %t1954 = load_input "rows" :: array
        %t1952 = const 0 :: integer
        %t1953 = call core.gt(%col_el_288, %t1952) :: boolean
        %t1742 = call core.and(%t1746, %t1953) :: boolean
        %t1531 = call core.or(%t1535, %t1742) :: boolean
        %t291 = const 1 :: integer
        %t292 = const 0 :: integer
        %t293 = select %t1531, %t291, %t292 :: integer
        yield %t293
      end_loop
    end_loop
  )
)
