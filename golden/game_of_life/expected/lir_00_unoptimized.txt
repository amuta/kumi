(LIR
  (Declaration a
    %t1 = load_input "rows" :: array
    loop rows id=L1 in %t1 as el=%rows_el_2, idx=%rows_i_3
      loop col id=L2 in %rows_el_2 as el=%col_el_4, idx=%col_i_5
        yield %col_el_4
      end_loop
    end_loop
  )
  (Declaration n
    %t6 = load_input "rows" :: array
    loop rows id=L3 in %t6 as el=%rows_el_7, idx=%rows_i_8
      loop col id=L4 in %rows_el_7 as el=%col_el_9, idx=%col_i_10
        %t11 = length %t6 :: integer
        %t12 = const -1 :: integer
        %t13 = call core.sub(%rows_i_8, %t12) :: integer
        %t14 = const 0 :: integer
        %t15 = call core.gte(%t13, %t14) :: boolean
        %t16 = call core.lt(%t13, %t11) :: boolean
        %t17 = call core.and(%t15, %t16) :: boolean
        %t18 = const 1 :: integer
        %t19 = call core.sub(%t11, %t18) :: integer
        %t20 = const 0 :: integer
        %t21 = call core.clamp(%t13, %t20, %t19) :: integer
        %t22 = gather %t6, %t21 :: any
        %t23 = length %t22 :: integer
        %t24 = call core.mod(%col_i_10, %t23) :: integer
        %t25 = call core.add(%t24, %t23) :: integer
        %t26 = call core.mod(%t25, %t23) :: integer
        %t27 = gather %t22, %t26 :: integer
        %t28 = const 0 :: integer
        %t29 = select %t17, %t27, %t28 :: integer
        yield %t29
      end_loop
    end_loop
  )
  (Declaration s
    %t30 = load_input "rows" :: array
    loop rows id=L5 in %t30 as el=%rows_el_31, idx=%rows_i_32
      loop col id=L6 in %rows_el_31 as el=%col_el_33, idx=%col_i_34
        %t35 = length %t30 :: integer
        %t36 = const 1 :: integer
        %t37 = call core.sub(%rows_i_32, %t36) :: integer
        %t38 = const 0 :: integer
        %t39 = call core.gte(%t37, %t38) :: boolean
        %t40 = call core.lt(%t37, %t35) :: boolean
        %t41 = call core.and(%t39, %t40) :: boolean
        %t42 = const 1 :: integer
        %t43 = call core.sub(%t35, %t42) :: integer
        %t44 = const 0 :: integer
        %t45 = call core.clamp(%t37, %t44, %t43) :: integer
        %t46 = gather %t30, %t45 :: any
        %t47 = length %t46 :: integer
        %t48 = call core.mod(%col_i_34, %t47) :: integer
        %t49 = call core.add(%t48, %t47) :: integer
        %t50 = call core.mod(%t49, %t47) :: integer
        %t51 = gather %t46, %t50 :: integer
        %t52 = const 0 :: integer
        %t53 = select %t41, %t51, %t52 :: integer
        yield %t53
      end_loop
    end_loop
  )
  (Declaration w
    %t54 = load_input "rows" :: array
    loop rows id=L7 in %t54 as el=%rows_el_55, idx=%rows_i_56
      loop col id=L8 in %rows_el_55 as el=%col_el_57, idx=%col_i_58
        %t59 = length %t54 :: integer
        %t60 = call core.mod(%rows_i_56, %t59) :: integer
        %t61 = call core.add(%t60, %t59) :: integer
        %t62 = call core.mod(%t61, %t59) :: integer
        %t63 = gather %t54, %t62 :: any
        %t64 = length %t63 :: integer
        %t65 = const -1 :: integer
        %t66 = call core.sub(%col_i_58, %t65) :: integer
        %t67 = const 0 :: integer
        %t68 = call core.gte(%t66, %t67) :: boolean
        %t69 = call core.lt(%t66, %t64) :: boolean
        %t70 = call core.and(%t68, %t69) :: boolean
        %t71 = const 1 :: integer
        %t72 = call core.sub(%t64, %t71) :: integer
        %t73 = const 0 :: integer
        %t74 = call core.clamp(%t66, %t73, %t72) :: integer
        %t75 = gather %t63, %t74 :: integer
        %t76 = const 0 :: integer
        %t77 = select %t70, %t75, %t76 :: integer
        yield %t77
      end_loop
    end_loop
  )
  (Declaration e
    %t78 = load_input "rows" :: array
    loop rows id=L9 in %t78 as el=%rows_el_79, idx=%rows_i_80
      loop col id=L10 in %rows_el_79 as el=%col_el_81, idx=%col_i_82
        %t83 = length %t78 :: integer
        %t84 = call core.mod(%rows_i_80, %t83) :: integer
        %t85 = call core.add(%t84, %t83) :: integer
        %t86 = call core.mod(%t85, %t83) :: integer
        %t87 = gather %t78, %t86 :: any
        %t88 = length %t87 :: integer
        %t89 = const 1 :: integer
        %t90 = call core.sub(%col_i_82, %t89) :: integer
        %t91 = const 0 :: integer
        %t92 = call core.gte(%t90, %t91) :: boolean
        %t93 = call core.lt(%t90, %t88) :: boolean
        %t94 = call core.and(%t92, %t93) :: boolean
        %t95 = const 1 :: integer
        %t96 = call core.sub(%t88, %t95) :: integer
        %t97 = const 0 :: integer
        %t98 = call core.clamp(%t90, %t97, %t96) :: integer
        %t99 = gather %t87, %t98 :: integer
        %t100 = const 0 :: integer
        %t101 = select %t94, %t99, %t100 :: integer
        yield %t101
      end_loop
    end_loop
  )
  (Declaration nw
    %t102 = load_input "rows" :: array
    loop rows id=L11 in %t102 as el=%rows_el_103, idx=%rows_i_104
      loop col id=L12 in %rows_el_103 as el=%col_el_105, idx=%col_i_106
        %t107 = length %t102 :: integer
        %t108 = const -1 :: integer
        %t109 = call core.sub(%rows_i_104, %t108) :: integer
        %t110 = const 0 :: integer
        %t111 = call core.gte(%t109, %t110) :: boolean
        %t112 = call core.lt(%t109, %t107) :: boolean
        %t113 = call core.and(%t111, %t112) :: boolean
        %t114 = const 1 :: integer
        %t115 = call core.sub(%t107, %t114) :: integer
        %t116 = const 0 :: integer
        %t117 = call core.clamp(%t109, %t116, %t115) :: integer
        %t118 = gather %t102, %t117 :: any
        %t119 = length %t118 :: integer
        %t120 = const -1 :: integer
        %t121 = call core.sub(%col_i_106, %t120) :: integer
        %t122 = const 0 :: integer
        %t123 = call core.gte(%t121, %t122) :: boolean
        %t124 = call core.lt(%t121, %t119) :: boolean
        %t125 = call core.and(%t123, %t124) :: boolean
        %t126 = call core.and(%t113, %t125) :: boolean
        %t127 = const 1 :: integer
        %t128 = call core.sub(%t119, %t127) :: integer
        %t129 = const 0 :: integer
        %t130 = call core.clamp(%t121, %t129, %t128) :: integer
        %t131 = gather %t118, %t130 :: integer
        %t132 = const 0 :: integer
        %t133 = select %t126, %t131, %t132 :: integer
        yield %t133
      end_loop
    end_loop
  )
  (Declaration ne
    %t134 = load_input "rows" :: array
    loop rows id=L13 in %t134 as el=%rows_el_135, idx=%rows_i_136
      loop col id=L14 in %rows_el_135 as el=%col_el_137, idx=%col_i_138
        %t139 = length %t134 :: integer
        %t140 = const -1 :: integer
        %t141 = call core.sub(%rows_i_136, %t140) :: integer
        %t142 = const 0 :: integer
        %t143 = call core.gte(%t141, %t142) :: boolean
        %t144 = call core.lt(%t141, %t139) :: boolean
        %t145 = call core.and(%t143, %t144) :: boolean
        %t146 = const 1 :: integer
        %t147 = call core.sub(%t139, %t146) :: integer
        %t148 = const 0 :: integer
        %t149 = call core.clamp(%t141, %t148, %t147) :: integer
        %t150 = gather %t134, %t149 :: any
        %t151 = length %t150 :: integer
        %t152 = const 1 :: integer
        %t153 = call core.sub(%col_i_138, %t152) :: integer
        %t154 = const 0 :: integer
        %t155 = call core.gte(%t153, %t154) :: boolean
        %t156 = call core.lt(%t153, %t151) :: boolean
        %t157 = call core.and(%t155, %t156) :: boolean
        %t158 = call core.and(%t145, %t157) :: boolean
        %t159 = const 1 :: integer
        %t160 = call core.sub(%t151, %t159) :: integer
        %t161 = const 0 :: integer
        %t162 = call core.clamp(%t153, %t161, %t160) :: integer
        %t163 = gather %t150, %t162 :: integer
        %t164 = const 0 :: integer
        %t165 = select %t158, %t163, %t164 :: integer
        yield %t165
      end_loop
    end_loop
  )
  (Declaration sw
    %t166 = load_input "rows" :: array
    loop rows id=L15 in %t166 as el=%rows_el_167, idx=%rows_i_168
      loop col id=L16 in %rows_el_167 as el=%col_el_169, idx=%col_i_170
        %t171 = length %t166 :: integer
        %t172 = const 1 :: integer
        %t173 = call core.sub(%rows_i_168, %t172) :: integer
        %t174 = const 0 :: integer
        %t175 = call core.gte(%t173, %t174) :: boolean
        %t176 = call core.lt(%t173, %t171) :: boolean
        %t177 = call core.and(%t175, %t176) :: boolean
        %t178 = const 1 :: integer
        %t179 = call core.sub(%t171, %t178) :: integer
        %t180 = const 0 :: integer
        %t181 = call core.clamp(%t173, %t180, %t179) :: integer
        %t182 = gather %t166, %t181 :: any
        %t183 = length %t182 :: integer
        %t184 = const -1 :: integer
        %t185 = call core.sub(%col_i_170, %t184) :: integer
        %t186 = const 0 :: integer
        %t187 = call core.gte(%t185, %t186) :: boolean
        %t188 = call core.lt(%t185, %t183) :: boolean
        %t189 = call core.and(%t187, %t188) :: boolean
        %t190 = call core.and(%t177, %t189) :: boolean
        %t191 = const 1 :: integer
        %t192 = call core.sub(%t183, %t191) :: integer
        %t193 = const 0 :: integer
        %t194 = call core.clamp(%t185, %t193, %t192) :: integer
        %t195 = gather %t182, %t194 :: integer
        %t196 = const 0 :: integer
        %t197 = select %t190, %t195, %t196 :: integer
        yield %t197
      end_loop
    end_loop
  )
  (Declaration se
    %t198 = load_input "rows" :: array
    loop rows id=L17 in %t198 as el=%rows_el_199, idx=%rows_i_200
      loop col id=L18 in %rows_el_199 as el=%col_el_201, idx=%col_i_202
        %t203 = length %t198 :: integer
        %t204 = const 1 :: integer
        %t205 = call core.sub(%rows_i_200, %t204) :: integer
        %t206 = const 0 :: integer
        %t207 = call core.gte(%t205, %t206) :: boolean
        %t208 = call core.lt(%t205, %t203) :: boolean
        %t209 = call core.and(%t207, %t208) :: boolean
        %t210 = const 1 :: integer
        %t211 = call core.sub(%t203, %t210) :: integer
        %t212 = const 0 :: integer
        %t213 = call core.clamp(%t205, %t212, %t211) :: integer
        %t214 = gather %t198, %t213 :: any
        %t215 = length %t214 :: integer
        %t216 = const 1 :: integer
        %t217 = call core.sub(%col_i_202, %t216) :: integer
        %t218 = const 0 :: integer
        %t219 = call core.gte(%t217, %t218) :: boolean
        %t220 = call core.lt(%t217, %t215) :: boolean
        %t221 = call core.and(%t219, %t220) :: boolean
        %t222 = call core.and(%t209, %t221) :: boolean
        %t223 = const 1 :: integer
        %t224 = call core.sub(%t215, %t223) :: integer
        %t225 = const 0 :: integer
        %t226 = call core.clamp(%t217, %t225, %t224) :: integer
        %t227 = gather %t214, %t226 :: integer
        %t228 = const 0 :: integer
        %t229 = select %t222, %t227, %t228 :: integer
        yield %t229
      end_loop
    end_loop
  )
  (Declaration neighbors
    %t230 = load_input "rows" :: array
    loop rows id=L19 in %t230 as el=%rows_el_231, idx=%rows_i_232
      loop col id=L20 in %rows_el_231 as el=%col_el_233, idx=%col_i_234
        %t235 = load_decl n axes=[rows, col] :: integer
        %t236 = load_decl s axes=[rows, col] :: integer
        %t237 = load_decl w axes=[rows, col] :: integer
        %t238 = load_decl e axes=[rows, col] :: integer
        %t239 = load_decl nw axes=[rows, col] :: integer
        %t240 = load_decl ne axes=[rows, col] :: integer
        %t241 = load_decl sw axes=[rows, col] :: integer
        %t242 = load_decl se axes=[rows, col] :: integer
        %t243 = make_tuple(%t235, %t236, %t237, %t238, %t239, %t240, %t241, %t242) :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t244 = fold %t243 fn="agg.sum" :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        yield %t244
      end_loop
    end_loop
  )
  (Declaration alive
    %t245 = load_input "rows" :: array
    loop rows id=L21 in %t245 as el=%rows_el_246, idx=%rows_i_247
      loop col id=L22 in %rows_el_246 as el=%col_el_248, idx=%col_i_249
        %t250 = load_decl a axes=[rows, col] :: integer
        %t251 = const 0 :: integer
        %t252 = call core.gt(%t250, %t251) :: boolean
        yield %t252
      end_loop
    end_loop
  )
  (Declaration n3_alive
    %t253 = load_input "rows" :: array
    loop rows id=L23 in %t253 as el=%rows_el_254, idx=%rows_i_255
      loop col id=L24 in %rows_el_254 as el=%col_el_256, idx=%col_i_257
        %t258 = load_decl neighbors axes=[rows, col] :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t259 = const 3 :: integer
        %t260 = call core.eq(%t258, %t259) :: boolean
        yield %t260
      end_loop
    end_loop
  )
  (Declaration n2_alive
    %t261 = load_input "rows" :: array
    loop rows id=L25 in %t261 as el=%rows_el_262, idx=%rows_i_263
      loop col id=L26 in %rows_el_262 as el=%col_el_264, idx=%col_i_265
        %t266 = load_decl neighbors axes=[rows, col] :: tuple<integer, integer, integer, integer, integer, integer, integer, integer>
        %t267 = const 2 :: integer
        %t268 = call core.eq(%t266, %t267) :: boolean
        yield %t268
      end_loop
    end_loop
  )
  (Declaration keep_alive
    %t269 = load_input "rows" :: array
    loop rows id=L27 in %t269 as el=%rows_el_270, idx=%rows_i_271
      loop col id=L28 in %rows_el_270 as el=%col_el_272, idx=%col_i_273
        %t274 = load_decl n2_alive axes=[rows, col] :: boolean
        %t275 = load_decl alive axes=[rows, col] :: boolean
        %t276 = call core.and(%t274, %t275) :: boolean
        yield %t276
      end_loop
    end_loop
  )
  (Declaration next_alive
    %t277 = load_input "rows" :: array
    loop rows id=L29 in %t277 as el=%rows_el_278, idx=%rows_i_279
      loop col id=L30 in %rows_el_278 as el=%col_el_280, idx=%col_i_281
        %t282 = load_decl n3_alive axes=[rows, col] :: boolean
        %t283 = load_decl keep_alive axes=[rows, col] :: boolean
        %t284 = call core.or(%t282, %t283) :: boolean
        yield %t284
      end_loop
    end_loop
  )
  (Declaration next_state
    %t285 = load_input "rows" :: array
    loop rows id=L31 in %t285 as el=%rows_el_286, idx=%rows_i_287
      loop col id=L32 in %rows_el_286 as el=%col_el_288, idx=%col_i_289
        %t290 = load_decl next_alive axes=[rows, col] :: boolean
        %t291 = const 1 :: integer
        %t292 = const 0 :: integer
        %t293 = select %t290, %t291, %t292 :: integer
        yield %t293
      end_loop
    end_loop
  )
)
