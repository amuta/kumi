# Autogenerated by Kumi Codegen
module SchemaModule
  def self.from(input_data)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def [](name)
    case name
    when :cube then _cube
    when :layer then _layer
    when :row then _row
    when :cell then _cell
    when :cell_over_limit then _cell_over_limit
    when :cell_sum then _cell_sum
    when :count_over_limit then _count_over_limit
    else raise KeyError, "Unknown declaration"
    end
  end

  def _cube
    @input["cube"]
  end

  def _layer
    out = []
    t2 = @input["cube"]
    t2.each_with_index do |cube_el_3, _cube_i_4|
      out << cube_el_3
    end
    out
  end

  def _row
    out = []
    t5 = @input["cube"]
    t5.each_with_index do |cube_el_6, _cube_i_7|
      out_1 = []
      cube_el_6.each_with_index do |layer_el_8, _layer_i_9|
        out_1 << layer_el_8
      end
      out << out_1
    end
    out
  end

  def _cell
    out = []
    t10 = @input["cube"]
    t10.each_with_index do |cube_el_11, _cube_i_12|
      out_1 = []
      cube_el_11.each_with_index do |layer_el_13, _layer_i_14|
        out_2 = []
        layer_el_13.each_with_index do |row_el_15, _row_i_16|
          out_2 << row_el_15
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _cell_over_limit
    out = []
    t17 = @input["cube"]
    t17.each_with_index do |cube_el_18, _cube_i_19|
      out_1 = []
      cube_el_18.each_with_index do |layer_el_20, _layer_i_21|
        out_2 = []
        layer_el_20.each_with_index do |row_el_22, _row_i_23|
          t25 = row_el_22 > 100
          out_2 << t25
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _cell_sum
    out = []
    t26 = @input["cube"]
    t26.each_with_index do |cube_el_27, _cube_i_28|
      out_1 = []
      cube_el_27.each_with_index do |layer_el_29, _layer_i_30|
        acc_31 = 0
        layer_el_29.each_with_index do |row_el_32, _row_i_33|
          t57 = row_el_32 > 100
          t36 = t57 ? row_el_32 : 0
          acc_31 += t36
        end
        t37 = acc_31
        out_1 << t37
      end
      out << out_1
    end
    out
  end

  def _count_over_limit
    acc_38 = 0
    t39 = @input["cube"]
    t39.each_with_index do |cube_el_40, _cube_i_41|
      acc_42 = 0
      cube_el_40.each_with_index do |layer_el_43, _layer_i_44|
        acc_45 = 0
        layer_el_43.each_with_index do |row_el_46, _row_i_47|
          t60 = row_el_46 > 100
          t51 = t60 ? 1 : 0
          acc_45 += t51
        end
        t52 = acc_45
        acc_42 += t52
      end
      t53 = acc_42
      acc_38 += t53
    end
    acc_38
  end
end
