# Autogenerated by Kumi Codegen
module SchemaModule
  def self.from(input_data)
      instance = Object.new
      instance.extend(self)
      instance.instance_variable_set(:@input, input_data)
      instance
  end

  def [](name)
      case name
        when :cube then _eval_cube
        when :layer then _eval_layer
        when :row then _eval_row
        when :cell then _eval_cell
        when :cell_over_limit then _eval_cell_over_limit
        when :cell_sum then _eval_cell_sum
        when :count_over_limit then _eval_count_over_limit
        else raise KeyError, "Unknown declaration"
      end
  end

  def _eval_cube
    out = nil
    t1 = @input["cube"]
    out = t1
    out
  end

  def _eval_layer
    out = []
    t2 = @input["cube"]
    t2.each_with_index do |cube_el_3, cube_i_4|
      out << cube_el_3
    end
    out
  end

  def _eval_row
    out = []
    t5 = @input["cube"]
    t5.each_with_index do |cube_el_6, cube_i_7|
      out_1 = []
      cube_el_6.each_with_index do |layer_el_8, layer_i_9|
        out_1 << layer_el_8
      end
      out << out_1
    end
    out
  end

  def _eval_cell
    out = []
    t10 = @input["cube"]
    t10.each_with_index do |cube_el_11, cube_i_12|
      out_1 = []
      cube_el_11.each_with_index do |layer_el_13, layer_i_14|
        out_2 = []
        layer_el_13.each_with_index do |row_el_15, row_i_16|
          out_2 << row_el_15
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _eval_cell_over_limit
    out = []
    t17 = @input["cube"]
    t17.each_with_index do |cube_el_18, cube_i_19|
      out_1 = []
      cube_el_18.each_with_index do |layer_el_20, layer_i_21|
        out_2 = []
        layer_el_20.each_with_index do |row_el_22, row_i_23|
          t24 = 100
          t25 = __gt(row_el_22, t24)
          out_2 << t25
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _eval_cell_sum
    out = []
    t26 = @input["cube"]
    t26.each_with_index do |cube_el_27, cube_i_28|
      out_1 = []
      cube_el_27.each_with_index do |layer_el_29, layer_i_30|
        acc_31 = 0
        layer_el_29.each_with_index do |row_el_32, row_i_33|
          t1 = 100
          t2 = __gt(row_el_32, t1)
          t35 = 0
          t36 = (t2) ? (row_el_32) : (t35)
          acc_31 = __sum(acc_31, t36)
        end
        t37 = acc_31
        out_1 << t37
      end
      out << out_1
    end
    out
  end

  def _eval_count_over_limit
    out = nil
    acc_38 = 0
    t39 = @input["cube"]
    t39.each_with_index do |cube_el_40, cube_i_41|
      acc_42 = 0
      cube_el_40.each_with_index do |layer_el_43, layer_i_44|
        acc_45 = 0
        layer_el_43.each_with_index do |row_el_46, row_i_47|
          t3 = 100
          t4 = __gt(row_el_46, t3)
          t49 = 1
          t50 = 0
          t51 = (t4) ? (t49) : (t50)
          acc_45 = __sum(acc_45, t51)
        end
        t52 = acc_45
        acc_42 = __sum(acc_42, t52)
      end
      t53 = acc_42
      acc_38 = __sum(acc_38, t53)
    end
    t54 = acc_38
    out = t54
    out
  end

  private

    def __count(a,b)
      a + b
    end

    def __sum(a,b)
      a + b
    end

    def __add(a, b)
      a + b
    end

    def __and(a, b)
      a && b
    end

    def __concat(a, b)
      a.to_s + b.to_s
    end

    def __div(a, b)
      a / b
    end

    def __eq(a, b)
      a == b
    end

    def __gt(a, b)
      a > b
    end

    def __gte(a, b)
      a >= b
    end

    def __length(collection)
      collection.size
    end

    def __mul(a, b)
      a * b
    end

    def __or(a, b)
      a || b
    end

    def __pow(a, b)
      a ** b
    end

    def __select(condition, true_val, false_val)
      condition ? true_val : false_val
    end

    def __sub(a, b)
      a - b
    end

end
