// Autogenerated by Kumi Codegen for schema KUMI_c654f38ca90cf0aba385b2e1d0541cfcd5246cfffe8616946a4e1112ecc54653
export class KumiCompiledModule {
  constructor(inputData = {}) {
    this.input = inputData;
  }

  static from(inputData = {}) {
    return new KumiCompiledModule(inputData);
  }

  update(inputData) {
    this.input = { ...this.input, ...inputData };
    return this;
  }

  get(name) {
    switch (name) {
      case 'cube': return this._cube();
      case 'layer': return this._layer();
      case 'row': return this._row();
      case 'cell': return this._cell();
      case 'cell_over_limit': return this._cell_over_limit();
      case 'cell_sum': return this._cell_sum();
      case 'count_over_limit': return this._count_over_limit();
      default: throw new Error(`Unknown declaration: ${name}`);
    }
  }

  _cube(input = this.input) {
    let t1 = input["cube"];
    return t1;
  }

  _layer(input = this.input) {
    let out = [];
    let t2 = input["cube"];
    t2?.forEach((cube_el_3, cube_i_4) => {
      out.push(cube_el_3);
    });
    return out;
  }

  _row(input = this.input) {
    let out = [];
    let t5 = input["cube"];
    t5?.forEach((cube_el_6, cube_i_7) => {
      let out_1 = [];
      cube_el_6?.forEach((layer_el_8, layer_i_9) => {
        out_1.push(layer_el_8);
      });
      out.push(out_1);
    });
    return out;
  }

  _cell(input = this.input) {
    let out = [];
    let t10 = input["cube"];
    t10?.forEach((cube_el_11, cube_i_12) => {
      let out_1 = [];
      cube_el_11?.forEach((layer_el_13, layer_i_14) => {
        let out_2 = [];
        layer_el_13?.forEach((row_el_15, row_i_16) => {
          out_2.push(row_el_15);
        });
        out_1.push(out_2);
      });
      out.push(out_1);
    });
    return out;
  }

  _cell_over_limit(input = this.input) {
    let out = [];
    let t17 = input["cube"];
    t17?.forEach((cube_el_18, cube_i_19) => {
      let out_1 = [];
      cube_el_18?.forEach((layer_el_20, layer_i_21) => {
        let out_2 = [];
        layer_el_20?.forEach((row_el_22, row_i_23) => {
          let t25 = row_el_22 > 100;
          out_2.push(t25);
        });
        out_1.push(out_2);
      });
      out.push(out_1);
    });
    return out;
  }

  _cell_sum(input = this.input) {
    let out = [];
    let t26 = input["cube"];
    t26?.forEach((cube_el_27, cube_i_28) => {
      let out_1 = [];
      cube_el_27?.forEach((layer_el_29, layer_i_30) => {
        let acc_31 = 0;
        layer_el_29?.forEach((row_el_32, row_i_33) => {
          let t57 = row_el_32 > 100;
          let t36 = t57 ? row_el_32 : 0;
          acc_31 += t36;
        });
        out_1.push(acc_31);
      });
      out.push(out_1);
    });
    return out;
  }

  _count_over_limit(input = this.input) {
    let acc_38 = 0;
    let t39 = input["cube"];
    t39?.forEach((cube_el_40, cube_i_41) => {
      let acc_42 = 0;
      cube_el_40?.forEach((layer_el_43, layer_i_44) => {
        let acc_45 = 0;
        layer_el_43?.forEach((row_el_46, row_i_47) => {
          let t60 = row_el_46 > 100;
          let t51 = t60 ? 1 : 0;
          acc_45 += t51;
        });
        acc_42 += acc_45;
      });
      acc_38 += acc_42;
    });
    return acc_38;
  }

}
