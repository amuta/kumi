(LIR
  (Declaration cube
  %t1 = load_input "cube" :: array
  yield %t1
  )
  (Declaration layer
  %t1 = load_input "cube" :: array
  loop cube id=L1 in %t1 as el=%cube_el_2, idx=%cube_i_3
    %t4 = load_field cube_el_2["layer"] :: array
    yield %t4
  end_loop
  )
  (Declaration row
  %t1 = load_input "cube" :: array
  loop cube id=L2 in %t1 as el=%cube_el_5, idx=%cube_i_6
    %t1 = load_field cube_el_5["layer"] :: array
    loop layer id=L3 in %t1 as el=%layer_el_7, idx=%layer_i_8
      %t9 = load_field layer_el_7["row"] :: array
      yield %t9
    end_loop
  end_loop
  )
  (Declaration cell
  %t1 = load_input "cube" :: array
  loop cube id=L4 in %t1 as el=%cube_el_10, idx=%cube_i_11
    %t1 = load_field cube_el_10["layer"] :: array
    loop layer id=L5 in %t1 as el=%layer_el_12, idx=%layer_i_13
      %t1 = load_field layer_el_12["row"] :: array
      loop row id=L6 in %t1 as el=%row_el_14, idx=%row_i_15
        %t16 = load_field row_el_14["cell"] :: integer
        yield %t16
      end_loop
    end_loop
  end_loop
  )
  (Declaration cell_over_limit
  %t1 = load_input "cube" :: array
  loop cube id=L7 in %t1 as el=%cube_el_17, idx=%cube_i_18
    %t1 = load_field cube_el_17["layer"] :: array
    loop layer id=L8 in %t1 as el=%layer_el_19, idx=%layer_i_20
      %t1 = load_field layer_el_19["row"] :: array
      loop row id=L9 in %t1 as el=%row_el_21, idx=%row_i_22
        %t23 = load_field row_el_21["cell"] :: integer
        %t24 = const 100 :: integer
        %t25 = call core.gt(%t23, %t24) :: boolean
        yield %t25
      end_loop
    end_loop
  end_loop
  )
  (Declaration cell_sum
  %t1 = load_input "cube" :: array
  loop cube id=L10 in %t1 as el=%cube_el_26, idx=%cube_i_27
    %t1 = load_field cube_el_26["layer"] :: array
    loop layer id=L11 in %t1 as el=%layer_el_28, idx=%layer_i_29
      %t1 = load_field layer_el_28["row"] :: array
      loop row id=L12 in %t1 as el=%row_el_30, idx=%row_i_31
        acc.declare acc_32=0
        %t33 = load_decl cell_over_limit axes=[cube, layer, row] :: boolean
        %t34 = load_field row_el_30["cell"] :: integer
        %t35 = const 0 :: integer
        %t36 = select %t33, %t34, %t35 :: integer
        acc.add acc_32 using agg.sum <- %t36
      end_loop
      %t37 = acc.load acc_32 :: integer
      yield %t37
    end_loop
  end_loop
  )
  (Declaration count_over_limit
  %t1 = load_input "cube" :: array
  loop cube id=L13 in %t1 as el=%cube_el_38, idx=%cube_i_39
    acc.declare acc_40=0
    %t1 = load_field cube_el_38["layer"] :: array
    loop layer id=L14 in %t1 as el=%layer_el_41, idx=%layer_i_42
      acc.declare acc_43=0
      %t1 = load_field layer_el_41["row"] :: array
      loop row id=L15 in %t1 as el=%row_el_44, idx=%row_i_45
        acc.declare acc_46=0
        %t47 = load_decl cell_over_limit axes=[cube, layer, row] :: boolean
        %t48 = const 1 :: integer
        %t49 = const 0 :: integer
        %t50 = select %t47, %t48, %t49 :: integer
        acc.add acc_46 using agg.sum <- %t50
      end_loop
      %t51 = acc.load acc_46 :: integer
      acc.add acc_43 using agg.sum <- %t51
    end_loop
    %t52 = acc.load acc_43 :: integer
    acc.add acc_40 using agg.sum <- %t52
  end_loop
  %t53 = acc.load acc_40 :: integer
  yield %t53
  )
)
