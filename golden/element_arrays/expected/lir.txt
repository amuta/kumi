(LIR
  (Declaration cube
  %t1 = load_input "cube" :: array
  yield %t1
  )
  (Declaration layer
  %t2 = load_input "cube" :: array
  loop cube id=L1 in %t2 as el=%cube_el_3, idx=%cube_i_4
    %t5 = load_field cube_el_3["layer"] :: array
    yield %t5
  end_loop
  )
  (Declaration row
  %t6 = load_input "cube" :: array
  loop cube id=L2 in %t6 as el=%cube_el_7, idx=%cube_i_8
    %t9 = load_field cube_el_7["layer"] :: array
    loop layer id=L3 in %t9 as el=%layer_el_10, idx=%layer_i_11
      %t12 = load_field layer_el_10["row"] :: array
      yield %t12
    end_loop
  end_loop
  )
  (Declaration cell
  %t13 = load_input "cube" :: array
  loop cube id=L4 in %t13 as el=%cube_el_14, idx=%cube_i_15
    %t16 = load_field cube_el_14["layer"] :: array
    loop layer id=L5 in %t16 as el=%layer_el_17, idx=%layer_i_18
      %t19 = load_field layer_el_17["row"] :: array
      loop row id=L6 in %t19 as el=%row_el_20, idx=%row_i_21
        %t22 = load_field row_el_20["cell"] :: integer
        yield %t22
      end_loop
    end_loop
  end_loop
  )
  (Declaration cell_over_limit
  %t23 = load_input "cube" :: array
  loop cube id=L7 in %t23 as el=%cube_el_24, idx=%cube_i_25
    %t26 = load_field cube_el_24["layer"] :: array
    loop layer id=L8 in %t26 as el=%layer_el_27, idx=%layer_i_28
      %t29 = load_field layer_el_27["row"] :: array
      loop row id=L9 in %t29 as el=%row_el_30, idx=%row_i_31
        %t32 = load_field row_el_30["cell"] :: integer
        %t33 = const 100 :: integer
        %t34 = call core.gt(%t32, %t33) :: boolean
        yield %t34
      end_loop
    end_loop
  end_loop
  )
  (Declaration cell_sum
  %t35 = load_input "cube" :: array
  loop cube id=L10 in %t35 as el=%cube_el_36, idx=%cube_i_37
    %t38 = load_field cube_el_36["layer"] :: array
    loop layer id=L11 in %t38 as el=%layer_el_39, idx=%layer_i_40
      acc.declare acc_41=0
      %t42 = load_field layer_el_39["row"] :: array
      loop row id=L12 in %t42 as el=%row_el_43, idx=%row_i_44
        %t45 = load_decl cell_over_limit axes=[cube, layer, row] :: boolean
        %t46 = load_field row_el_43["cell"] :: integer
        %t47 = const 0 :: integer
        %t48 = select %t45, %t46, %t47 :: integer
        acc.add acc_41 using agg.sum <- %t48
      end_loop
      %t49 = acc.load acc_41 :: integer
      yield %t49
    end_loop
  end_loop
  )
  (Declaration count_over_limit
  acc.declare acc_50=0
  %t51 = load_input "cube" :: array
  loop cube id=L13 in %t51 as el=%cube_el_52, idx=%cube_i_53
    acc.declare acc_54=0
    %t55 = load_field cube_el_52["layer"] :: array
    loop layer id=L14 in %t55 as el=%layer_el_56, idx=%layer_i_57
      acc.declare acc_58=0
      %t59 = load_field layer_el_56["row"] :: array
      loop row id=L15 in %t59 as el=%row_el_60, idx=%row_i_61
        %t62 = load_decl cell_over_limit axes=[cube, layer, row] :: boolean
        %t63 = const 1 :: integer
        %t64 = const 0 :: integer
        %t65 = select %t62, %t63, %t64 :: integer
        acc.add acc_58 using agg.sum <- %t65
      end_loop
      %t66 = acc.load acc_58 :: integer
      acc.add acc_54 using agg.sum <- %t66
    end_loop
    %t67 = acc.load acc_54 :: integer
    acc.add acc_50 using agg.sum <- %t67
  end_loop
  %t68 = acc.load acc_50 :: integer
  yield %t68
  )
)
