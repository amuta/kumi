(LIR
  (Declaration cube
    %t1 = load_input "cube" :: array
    loop cube id=L1 in %t1 as el=%cube_el_2, idx=%cube_i_3
      yield %cube_el_2
    end_loop
  )
  (Declaration layer
    %t4 = load_input "cube" :: array
    loop cube id=L2 in %t4 as el=%cube_el_5, idx=%cube_i_6
      loop layer id=L3 in %cube_el_5 as el=%layer_el_7, idx=%layer_i_8
        yield %layer_el_7
      end_loop
    end_loop
  )
  (Declaration row
    %t9 = load_input "cube" :: array
    loop cube id=L4 in %t9 as el=%cube_el_10, idx=%cube_i_11
      loop layer id=L5 in %cube_el_10 as el=%layer_el_12, idx=%layer_i_13
        loop row id=L6 in %layer_el_12 as el=%row_el_14, idx=%row_i_15
          yield %row_el_14
        end_loop
      end_loop
    end_loop
  )
  (Declaration cell
    %t16 = load_input "cube" :: array
    loop cube id=L7 in %t16 as el=%cube_el_17, idx=%cube_i_18
      loop layer id=L8 in %cube_el_17 as el=%layer_el_19, idx=%layer_i_20
        loop row id=L9 in %layer_el_19 as el=%row_el_21, idx=%row_i_22
          yield %row_el_21
        end_loop
      end_loop
    end_loop
  )
  (Declaration cell_over_limit
    %t23 = load_input "cube" :: array
    loop cube id=L10 in %t23 as el=%cube_el_24, idx=%cube_i_25
      loop layer id=L11 in %cube_el_24 as el=%layer_el_26, idx=%layer_i_27
        loop row id=L12 in %layer_el_26 as el=%row_el_28, idx=%row_i_29
          %t30 = const 100 :: integer
          %t31 = call core.gt(%row_el_28, %t30) :: boolean
          yield %t31
        end_loop
      end_loop
    end_loop
  )
  (Declaration cell_sum
    %t32 = load_input "cube" :: array
    loop cube id=L13 in %t32 as el=%cube_el_33, idx=%cube_i_34
      loop layer id=L14 in %cube_el_33 as el=%layer_el_35, idx=%layer_i_36
        %acc_37 = decl_acc :: integer
        loop row id=L15 in %layer_el_35 as el=%row_el_38, idx=%row_i_39
          %t40 = load_decl cell_over_limit axes=[cube, layer, row] :: boolean
          %t41 = const 0 :: integer
          %t42 = select %t40, %row_el_38, %t41 :: integer
          %acc_37 = acc_add agg.sum(%acc_37, %t42) :: integer
        end_loop
        %t43 = acc_load %acc_37 :: integer
        yield %t43
      end_loop
    end_loop
  )
  (Declaration count_over_limit
    %acc_44 = decl_acc :: integer
    %t45 = load_input "cube" :: array
    loop cube id=L16 in %t45 as el=%cube_el_46, idx=%cube_i_47
      %acc_48 = decl_acc :: integer
      loop layer id=L17 in %cube_el_46 as el=%layer_el_49, idx=%layer_i_50
        %acc_51 = decl_acc :: integer
        loop row id=L18 in %layer_el_49 as el=%row_el_52, idx=%row_i_53
          %t54 = load_decl cell_over_limit axes=[cube, layer, row] :: boolean
          %t55 = const 1 :: integer
          %t56 = const 0 :: integer
          %t57 = select %t54, %t55, %t56 :: integer
          %acc_51 = acc_add agg.sum(%acc_51, %t57) :: integer
        end_loop
        %t58 = acc_load %acc_51 :: integer
        %acc_48 = acc_add agg.sum(%acc_48, %t58) :: integer
      end_loop
      %t59 = acc_load %acc_48 :: integer
      %acc_44 = acc_add agg.sum(%acc_44, %t59) :: integer
    end_loop
    %t60 = acc_load %acc_44 :: integer
    yield %t60
  )
)
