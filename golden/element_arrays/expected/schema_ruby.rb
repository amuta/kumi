# Autogenerated by Kumi Codegen
module Kumi::Compiled::KUMI_0c5896f495c673cb497152d5ccde9d5efbe406d23829b4528bf6a512e3401de8
  def self.from(input_data = nil)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def self.__kumi_executable__
    instance = Object.new
    instance.extend(self)
    instance
  end

  def update(input_data)
    @input = @input.merge(input_data)
    self
  end

  def [](name)
    case name
    when :cube then _cube
    when :layer then _layer
    when :row then _row
    when :cell then _cell
    when :cell_over_limit then _cell_over_limit
    when :cell_sum then _cell_sum
    when :count_over_limit then _count_over_limit
    else raise KeyError, "Unknown declaration"
    end
  end

  def _cube(input = @input)
    out = []
    t1 = input["cube"] || input[:cube]
    t1.each_with_index do |cube_el_2, cube_i_3|
      out << cube_el_2
    end
    out
  end

  def _layer(input = @input)
    out = []
    t4 = input["cube"] || input[:cube]
    t4.each_with_index do |cube_el_5, cube_i_6|
      out << cube_el_5
    end
    out
  end

  def _row(input = @input)
    out = []
    t7 = input["cube"] || input[:cube]
    t7.each_with_index do |cube_el_8, cube_i_9|
      out_1 = []
      cube_el_8.each_with_index do |layer_el_10, layer_i_11|
        out_1 << layer_el_10
      end
      out << out_1
    end
    out
  end

  def _cell(input = @input)
    out = []
    t12 = input["cube"] || input[:cube]
    t12.each_with_index do |cube_el_13, cube_i_14|
      out_1 = []
      cube_el_13.each_with_index do |layer_el_15, layer_i_16|
        out_2 = []
        layer_el_15.each_with_index do |row_el_17, row_i_18|
          out_2 << row_el_17
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _cell_over_limit(input = @input)
    out = []
    t19 = input["cube"] || input[:cube]
    t26 = 100
    t19.each_with_index do |cube_el_20, cube_i_21|
      out_1 = []
      cube_el_20.each_with_index do |layer_el_22, layer_i_23|
        out_2 = []
        layer_el_22.each_with_index do |row_el_24, row_i_25|
          t27 = row_el_24 > t26
          out_2 << t27
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _cell_sum(input = @input)
    out = []
    t28 = input["cube"] || input[:cube]
    t58 = 100
    t37 = 0
    t28.each_with_index do |cube_el_29, cube_i_30|
      out_1 = []
      cube_el_29.each_with_index do |layer_el_31, layer_i_32|
        acc_33 = 0
        layer_el_31.each_with_index do |row_el_34, row_i_35|
          t59 = row_el_34 > t58
          t38 = t59 ? row_el_34 : t37
          acc_33 += t38
        end
        t39 = acc_33
        out_1 << t39
      end
      out << out_1
    end
    out
  end

  def _count_over_limit(input = @input)
    acc_40 = 0
    t41 = input["cube"] || input[:cube]
    t61 = 100
    t51 = 1
    t52 = 0
    t41.each_with_index do |cube_el_42, cube_i_43|
      acc_44 = 0
      cube_el_42.each_with_index do |layer_el_45, layer_i_46|
        acc_47 = 0
        layer_el_45.each_with_index do |row_el_48, row_i_49|
          t62 = row_el_48 > t61
          t53 = t62 ? t51 : t52
          acc_47 += t53
        end
        t54 = acc_47
        acc_44 += t54
      end
      t55 = acc_44
      acc_40 += t55
    end
    acc_40
  end
end
