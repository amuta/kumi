# Autogenerated by Kumi Codegen
module Kumi::Compiled::KUMI_0c5896f495c673cb497152d5ccde9d5efbe406d23829b4528bf6a512e3401de8
  def self.from(input_data = nil)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def self.__kumi_executable__
    instance = Object.new
    instance.extend(self)
    instance
  end

  def update(input_data)
    @input = @input.merge(input_data)
    self
  end

  def [](name)
    case name
    when :cube then _cube
    when :layer then _layer
    when :row then _row
    when :cell then _cell
    when :cell_over_limit then _cell_over_limit
    when :cell_sum then _cell_sum
    when :count_over_limit then _count_over_limit
    else raise KeyError, "Unknown declaration"
    end
  end

  def _cube(input = @input)
    out = []
    t1 = input["cube"] || input[:cube]
    t1.each_with_index do |cube_el_2, cube_i_3|
      out << cube_el_2
    end
    out
  end

  def _layer(input = @input)
    out = []
    t4 = input["cube"] || input[:cube]
    t4.each_with_index do |cube_el_5, cube_i_6|
      out_1 = []
      cube_el_5.each_with_index do |layer_el_7, layer_i_8|
        out_1 << layer_el_7
      end
      out << out_1
    end
    out
  end

  def _row(input = @input)
    out = []
    t9 = input["cube"] || input[:cube]
    t9.each_with_index do |cube_el_10, cube_i_11|
      out_1 = []
      cube_el_10.each_with_index do |layer_el_12, layer_i_13|
        out_2 = []
        layer_el_12.each_with_index do |row_el_14, row_i_15|
          out_2 << row_el_14
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _cell(input = @input)
    out = []
    t16 = input["cube"] || input[:cube]
    t16.each_with_index do |cube_el_17, cube_i_18|
      out_1 = []
      cube_el_17.each_with_index do |layer_el_19, layer_i_20|
        out_2 = []
        layer_el_19.each_with_index do |row_el_21, row_i_22|
          out_2 << row_el_21
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _cell_over_limit(input = @input)
    out = []
    t23 = input["cube"] || input[:cube]
    t30 = 100
    t23.each_with_index do |cube_el_24, cube_i_25|
      out_1 = []
      cube_el_24.each_with_index do |layer_el_26, layer_i_27|
        out_2 = []
        layer_el_26.each_with_index do |row_el_28, row_i_29|
          t31 = row_el_28 > t30
          out_2 << t31
        end
        out_1 << out_2
      end
      out << out_1
    end
    out
  end

  def _cell_sum(input = @input)
    out = []
    t32 = input["cube"] || input[:cube]
    t62 = 100
    t41 = 0
    t32.each_with_index do |cube_el_33, cube_i_34|
      out_1 = []
      cube_el_33.each_with_index do |layer_el_35, layer_i_36|
        acc_37 = 0
        layer_el_35.each_with_index do |row_el_38, row_i_39|
          t63 = row_el_38 > t62
          t42 = t63 ? row_el_38 : t41
          acc_37 += t42
        end
        t43 = acc_37
        out_1 << t43
      end
      out << out_1
    end
    out
  end

  def _count_over_limit(input = @input)
    acc_44 = 0
    t45 = input["cube"] || input[:cube]
    t65 = 100
    t55 = 1
    t56 = 0
    t45.each_with_index do |cube_el_46, cube_i_47|
      acc_48 = 0
      cube_el_46.each_with_index do |layer_el_49, layer_i_50|
        acc_51 = 0
        layer_el_49.each_with_index do |row_el_52, row_i_53|
          t66 = row_el_52 > t65
          t57 = t66 ? t55 : t56
          acc_51 += t57
        end
        t58 = acc_51
        acc_48 += t58
      end
      t59 = acc_48
      acc_44 += t59
    end
    acc_44
  end
end
