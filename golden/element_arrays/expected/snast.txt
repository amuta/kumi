(SNAST
  (VALUE cube
    (InputRef cube key_chain=[]) :: [cube] -> array
  ) :: [cube] -> array
  (VALUE layer
    (InputRef cube.layer key_chain=[]) :: [cube, layer] -> array
  ) :: [cube, layer] -> array
  (VALUE row
    (InputRef cube.layer.row key_chain=[]) :: [cube, layer, row] -> array
  ) :: [cube, layer, row] -> array
  (VALUE cell
    (InputRef cube.layer.row.cell key_chain=[]) :: [cube, layer, row] -> integer
  ) :: [cube, layer, row] -> integer
  (TRAIT cell_over_limit
    (Call :core.gt
      (InputRef cube.layer.row.cell key_chain=[]) :: [cube, layer, row] -> integer
      (Const 100) :: [] -> integer
    ) :: [cube, layer, row] -> boolean
  ) :: [cube, layer, row] -> boolean
  (VALUE cell_sum
    (Reduce :agg.sum over [row]
      (Select
        (Ref cell_over_limit) :: [cube, layer, row] -> boolean
        (InputRef cube.layer.row.cell key_chain=[]) :: [cube, layer, row] -> integer
        (Const 0) :: [] -> integer
      ) :: [cube, layer, row] -> integer
    ) :: [cube, layer] -> integer
  ) :: [cube, layer] -> integer
  (VALUE count_over_limit
    (Reduce :agg.sum over [cube]
      (Reduce :agg.sum over [layer]
        (Reduce :agg.sum over [row]
          (Select
            (Ref cell_over_limit) :: [cube, layer, row] -> boolean
            (Const 1) :: [] -> integer
            (Const 0) :: [] -> integer
          ) :: [cube, layer, row] -> integer
        ) :: [cube, layer] -> integer
      ) :: [cube] -> integer
    ) :: [] -> integer
  ) :: [] -> integer
)