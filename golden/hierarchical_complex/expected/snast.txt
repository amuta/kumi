(SNAST
  (TRAIT high_performer
    (Call :core.gte
      (InputRef regions.offices.teams.employees.rating key_chain=[rating]) :: [regions, offices, teams, employees] -> float
      (Const 4.5) :: [] -> float
    ) :: [regions, offices, teams, employees] -> boolean
  ) :: [regions, offices, teams, employees] -> boolean
  (TRAIT senior_level
    (Call :core.eq
      (InputRef regions.offices.teams.employees.level key_chain=[level]) :: [regions, offices, teams, employees] -> string
      (Const "senior") :: [] -> string
    ) :: [regions, offices, teams, employees] -> boolean
  ) :: [regions, offices, teams, employees] -> boolean
  (TRAIT top_team
    (Call :core.gte
      (InputRef regions.offices.teams.performance_score key_chain=[performance_score]) :: [regions, offices, teams] -> float
      (Const 0.9) :: [] -> float
    ) :: [regions, offices, teams] -> boolean
  ) :: [regions, offices, teams] -> boolean
  (VALUE employee_bonus
    (Select
      (Call :core.and
        (Ref high_performer) :: [regions, offices, teams, employees] -> boolean
        (Call :core.and
          (Ref senior_level) :: [regions, offices, teams, employees] -> boolean
          (Ref top_team) :: [regions, offices, teams] -> boolean
        ) :: [regions, offices, teams, employees] -> boolean
      ) :: [regions, offices, teams, employees] -> boolean
      (Call :core.mul
        (InputRef regions.offices.teams.employees.salary key_chain=[salary]) :: [regions, offices, teams, employees] -> float
        (Const 0.3) :: [] -> float
      ) :: [regions, offices, teams, employees] -> float
      (Select
        (Call :core.and
          (Ref high_performer) :: [regions, offices, teams, employees] -> boolean
          (Ref top_team) :: [regions, offices, teams] -> boolean
        ) :: [regions, offices, teams, employees] -> boolean
        (Call :core.mul
          (InputRef regions.offices.teams.employees.salary key_chain=[salary]) :: [regions, offices, teams, employees] -> float
          (Const 0.2) :: [] -> float
        ) :: [regions, offices, teams, employees] -> float
        (Call :core.mul
          (InputRef regions.offices.teams.employees.salary key_chain=[salary]) :: [regions, offices, teams, employees] -> float
          (Const 0.05) :: [] -> float
        ) :: [regions, offices, teams, employees] -> float
      ) :: [regions, offices, teams, employees] -> float
    ) :: [regions, offices, teams, employees] -> float
  ) :: [regions, offices, teams, employees] -> float
)