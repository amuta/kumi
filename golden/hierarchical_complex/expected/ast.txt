(Root
  inputs: [
    (InputDeclaration :regions :array
      [
        (InputDeclaration :region :hash
          [
            (InputDeclaration :offices :array
              [
                (InputDeclaration :office :hash
                  [
                    (InputDeclaration :teams :array
                      [
                        (InputDeclaration :team :hash
                          [
                            (InputDeclaration :performance_score :float)
                            (InputDeclaration :employees :array
                              [
                                (InputDeclaration :employee :hash
                                  [
                                    (InputDeclaration :salary :float)
                                    (InputDeclaration :rating :float)
                                    (InputDeclaration :level :string)
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  ]
                )
              ]
            )
          ]
        )
      ]
    )
  ]
  values: [
    (ValueDeclaration :employee_bonus
      (CascadeExpression
        ((CallExpression :cascade_and
        (DeclarationReference :high_performer)
        (DeclarationReference :senior_level)
        (DeclarationReference :top_team)
      ) (CallExpression :multiply
        (InputElementReference regions.region.offices.office.teams.team.employees.employee.salary)
        (Literal 0.3)
      ))
        ((CallExpression :cascade_and
        (DeclarationReference :high_performer)
        (DeclarationReference :top_team)
      ) (CallExpression :multiply
        (InputElementReference regions.region.offices.office.teams.team.employees.employee.salary)
        (Literal 0.2)
      ))
        ((Literal true) (CallExpression :multiply
        (InputElementReference regions.region.offices.office.teams.team.employees.employee.salary)
        (Literal 0.05)
      ))
      )
    )
  ]
  traits: [
    (TraitDeclaration :high_performer
      (CallExpression :>=
        (InputElementReference regions.region.offices.office.teams.team.employees.employee.rating)
        (Literal 4.5)
      )
    )
    (TraitDeclaration :senior_level
      (CallExpression :==
        (InputElementReference regions.region.offices.office.teams.team.employees.employee.level)
        (Literal "senior")
      )
    )
    (TraitDeclaration :top_team
      (CallExpression :>=
        (InputElementReference regions.region.offices.office.teams.team.performance_score)
        (Literal 0.9)
      )
    )
  ]
)