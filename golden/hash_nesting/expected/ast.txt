(Root
  inputs: [
    (InputDeclaration :organization :hash access_mode: :field
      [
        (InputDeclaration :name :string)
        (InputDeclaration :regions :array access_mode: :field
          [
            (InputDeclaration :region_name :string)
            (InputDeclaration :headquarters :hash access_mode: :field
              [
                (InputDeclaration :city :string)
                (InputDeclaration :buildings :array access_mode: :field
                  [
                    (InputDeclaration :building_name :string)
                    (InputDeclaration :facilities :hash access_mode: :field
                      [
                        (InputDeclaration :facility_type :string)
                        (InputDeclaration :capacity :integer)
                        (InputDeclaration :utilization_rate :float)
                      ]
                    )
                  ]
                )
              ]
            )
          ]
        )
      ]
    )
  ]
  values: [
    (ValueDeclaration :org_name
      (InputElementReference organization.name)
    )
    (ValueDeclaration :region_names
      (InputElementReference organization.regions.region_name)
    )
    (ValueDeclaration :hq_cities
      (InputElementReference organization.regions.headquarters.city)
    )
    (ValueDeclaration :building_names
      (InputElementReference organization.regions.headquarters.buildings.building_name)
    )
    (ValueDeclaration :facility_types
      (InputElementReference organization.regions.headquarters.buildings.facilities.facility_type)
    )
    (ValueDeclaration :capacities
      (InputElementReference organization.regions.headquarters.buildings.facilities.capacity)
    )
    (ValueDeclaration :utilization_rates
      (InputElementReference organization.regions.headquarters.buildings.facilities.utilization_rate)
    )
    (ValueDeclaration :org_classification
      (CascadeExpression
        ((CallExpression :cascade_and
        (DeclarationReference :large_organization)
      ) (Literal "Enterprise"))
        ((Literal true) (Literal "Standard"))
      )
    )
    (ValueDeclaration :total_capacity
      (CallExpression :sum
        (InputElementReference organization.regions.headquarters.buildings.facilities.capacity)
      )
    )
  ]
  traits: [
    (TraitDeclaration :large_organization
      (CallExpression :>
        (CallExpression :size
          (InputElementReference organization.regions)
        )
        (Literal 1)
      )
    )
  ]
)