# Autogenerated by Kumi Codegen
module Kumi::Compiled::KUMI_df4cd4752d2252979fd1a091a1103fcd535d2973a90dc1f48593f4c0872c6936
  def self.from(input_data = nil)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def self.__kumi_executable__
    instance = Object.new
    instance.extend(self)
    instance
  end

  def update(input_data)
    @input = @input.merge(input_data)
    self
  end

  def [](name)
    case name
    when :subtotal then _subtotal
    when :tax_amount then _tax_amount
    when :total then _total
    else raise KeyError, "Unknown declaration"
    end
  end

  def _subtotal(input = @input)
    t14 = input["unit_price"] || input[:unit_price]
    t15 = t14.is_a?(BigDecimal) ? t14 : BigDecimal(t14.to_s)
    t6 = input["quantity"] || input[:quantity]
    t15 * t6
  end

  def _tax_amount(input = @input)
    t19 = input["unit_price"] || input[:unit_price]
    t20 = t19.is_a?(BigDecimal) ? t19 : BigDecimal(t19.to_s)
    t17 = input["quantity"] || input[:quantity]
    t18 = t20 * t17
    t21 = input["tax_rate"] || input[:tax_rate]
    t22 = t21.is_a?(BigDecimal) ? t21 : BigDecimal(t21.to_s)
    t18 * t22
  end

  def _total(input = @input)
    t26 = input["unit_price"] || input[:unit_price]
    t27 = t26.is_a?(BigDecimal) ? t26 : BigDecimal(t26.to_s)
    t24 = input["quantity"] || input[:quantity]
    t25 = t27 * t24
    t36 = input["tax_rate"] || input[:tax_rate]
    t37 = t36.is_a?(BigDecimal) ? t36 : BigDecimal(t36.to_s)
    t30 = t25 * t37
    t25 + t30
  end
end
