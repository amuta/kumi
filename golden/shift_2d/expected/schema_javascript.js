// Autogenerated by Kumi Codegen for schema KUMI_6fdf019c4927ac72bbf49d09261f8162d74babc6d6f40926c1976974a4888190
export class KumiCompiledModule {
  constructor(inputData = {}) {
    this.input = inputData;
  }

  static from(inputData = {}) {
    return new KumiCompiledModule(inputData);
  }

  update(inputData) {
    this.input = { ...this.input, ...inputData };
    return this;
  }

  get(name) {
    switch (name) {
      case 'shift_cols_right_zero': return this._shift_cols_right_zero();
      case 'shift_cols_right_clamp': return this._shift_cols_right_clamp();
      case 'shift_cols_right_wrap': return this._shift_cols_right_wrap();
      case 'shift_cols_left_zero': return this._shift_cols_left_zero();
      case 'shift_cols_left_clamp': return this._shift_cols_left_clamp();
      case 'shift_cols_left_wrap': return this._shift_cols_left_wrap();
      case 'shift_rows_down_zero': return this._shift_rows_down_zero();
      case 'shift_rows_down_clamp': return this._shift_rows_down_clamp();
      case 'shift_rows_down_wrap': return this._shift_rows_down_wrap();
      case 'shift_rows_up_zero': return this._shift_rows_up_zero();
      case 'shift_rows_up_clamp': return this._shift_rows_up_clamp();
      case 'shift_rows_up_wrap': return this._shift_rows_up_wrap();
      default: throw new Error(`Unknown declaration: ${name}`);
    }
  }

  _shift_cols_right_zero(input = this.input) {
    let out = [];
    let t1 = input["rows"];
    const t8 = 1;
    const t10 = 0;
    t1.forEach((rows_el_2, rows_i_3) => {
      let out_1 = [];
      let t4 = rows_el_2.col;
      let t7 = t4.length
      let t15 = t7 - t8;
      t4.forEach((col_el_5, col_i_6) => {
        let t9 = col_i_6 - t8;
        let t11 = t9 >= t10;
        let t12 = t9 < t7;
        let t13 = t11 && t12;
        let t17 = Math.min(Math.max(t9, t10), t15);
        let t18 = t4[t17]
        let t20 = t13 ? t18 : t10;
        out_1.push(t20);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_cols_right_clamp(input = this.input) {
    let out = [];
    let t21 = input["rows"];
    const t28 = 1;
    const t32 = 0;
    t21.forEach((rows_el_22, rows_i_23) => {
      let out_1 = [];
      let t24 = rows_el_22.col;
      let t27 = t24.length
      let t31 = t27 - t28;
      t24.forEach((col_el_25, col_i_26) => {
        let t29 = col_i_26 - t28;
        let t33 = Math.min(Math.max(t29, t32), t31);
        let t34 = t24[t33]
        out_1.push(t34);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_cols_right_wrap(input = this.input) {
    let out = [];
    let t35 = input["rows"];
    const t42 = 1;
    t35.forEach((rows_el_36, rows_i_37) => {
      let out_1 = [];
      let t38 = rows_el_36.col;
      let t41 = t38.length
      t38.forEach((col_el_39, col_i_40) => {
        let t43 = col_i_40 - t42;
        let t44 = t43 % t41;
        let t45 = t44 + t41;
        let t46 = t45 % t41;
        let t47 = t38[t46]
        out_1.push(t47);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_cols_left_zero(input = this.input) {
    let out = [];
    let t48 = input["rows"];
    const t55 = -1;
    const t57 = 0;
    const t61 = 1;
    t48.forEach((rows_el_49, rows_i_50) => {
      let out_1 = [];
      let t51 = rows_el_49.col;
      let t54 = t51.length
      let t62 = t54 - t61;
      t51.forEach((col_el_52, col_i_53) => {
        let t56 = col_i_53 - t55;
        let t58 = t56 >= t57;
        let t59 = t56 < t54;
        let t60 = t58 && t59;
        let t64 = Math.min(Math.max(t56, t57), t62);
        let t65 = t51[t64]
        let t67 = t60 ? t65 : t57;
        out_1.push(t67);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_cols_left_clamp(input = this.input) {
    let out = [];
    let t68 = input["rows"];
    const t75 = -1;
    const t77 = 1;
    const t79 = 0;
    t68.forEach((rows_el_69, rows_i_70) => {
      let out_1 = [];
      let t71 = rows_el_69.col;
      let t74 = t71.length
      let t78 = t74 - t77;
      t71.forEach((col_el_72, col_i_73) => {
        let t76 = col_i_73 - t75;
        let t80 = Math.min(Math.max(t76, t79), t78);
        let t81 = t71[t80]
        out_1.push(t81);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_cols_left_wrap(input = this.input) {
    let out = [];
    let t82 = input["rows"];
    const t89 = -1;
    t82.forEach((rows_el_83, rows_i_84) => {
      let out_1 = [];
      let t85 = rows_el_83.col;
      let t88 = t85.length
      t85.forEach((col_el_86, col_i_87) => {
        let t90 = col_i_87 - t89;
        let t91 = t90 % t88;
        let t92 = t91 + t88;
        let t93 = t92 % t88;
        let t94 = t85[t93]
        out_1.push(t94);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_rows_down_zero(input = this.input) {
    let out = [];
    let t95 = input["rows"];
    let t101 = t95.length
    const t102 = 1;
    const t104 = 0;
    let t109 = t101 - t102;
    t95.forEach((rows_el_96, rows_i_97) => {
      let out_1 = [];
      let t98 = rows_el_96.col;
      let t103 = rows_i_97 - t102;
      let t105 = t103 >= t104;
      let t106 = t103 < t101;
      let t111 = Math.min(Math.max(t103, t104), t109);
      let t107 = t105 && t106;
      let t112 = t95[t111]
      let t113 = t112.col;
      let t114 = t113.length
      let t116 = t114 - t102;
      t98.forEach((col_el_99, col_i_100) => {
        let t118 = Math.min(Math.max(col_i_100, t104), t116);
        let t119 = t113[t118]
        let t121 = t107 ? t119 : t104;
        out_1.push(t121);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_rows_down_clamp(input = this.input) {
    let out = [];
    let t122 = input["rows"];
    let t128 = t122.length
    const t129 = 1;
    const t133 = 0;
    let t132 = t128 - t129;
    t122.forEach((rows_el_123, rows_i_124) => {
      let out_1 = [];
      let t125 = rows_el_123.col;
      let t130 = rows_i_124 - t129;
      let t134 = Math.min(Math.max(t130, t133), t132);
      let t135 = t122[t134]
      let t136 = t135.col;
      let t137 = t136.length
      let t139 = t137 - t129;
      t125.forEach((col_el_126, col_i_127) => {
        let t141 = Math.min(Math.max(col_i_127, t133), t139);
        let t142 = t136[t141]
        out_1.push(t142);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_rows_down_wrap(input = this.input) {
    let out = [];
    let t143 = input["rows"];
    let t149 = t143.length
    const t150 = 1;
    const t160 = 0;
    t143.forEach((rows_el_144, rows_i_145) => {
      let out_1 = [];
      let t146 = rows_el_144.col;
      let t151 = rows_i_145 - t150;
      let t152 = t151 % t149;
      let t153 = t152 + t149;
      let t154 = t153 % t149;
      let t155 = t143[t154]
      let t156 = t155.col;
      let t157 = t156.length
      let t159 = t157 - t150;
      t146.forEach((col_el_147, col_i_148) => {
        let t161 = Math.min(Math.max(col_i_148, t160), t159);
        let t162 = t156[t161]
        out_1.push(t162);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_rows_up_zero(input = this.input) {
    let out = [];
    let t163 = input["rows"];
    let t169 = t163.length
    const t170 = -1;
    const t172 = 0;
    const t176 = 1;
    let t177 = t169 - t176;
    t163.forEach((rows_el_164, rows_i_165) => {
      let out_1 = [];
      let t166 = rows_el_164.col;
      let t171 = rows_i_165 - t170;
      let t173 = t171 >= t172;
      let t174 = t171 < t169;
      let t179 = Math.min(Math.max(t171, t172), t177);
      let t175 = t173 && t174;
      let t180 = t163[t179]
      let t181 = t180.col;
      let t182 = t181.length
      let t184 = t182 - t176;
      t166.forEach((col_el_167, col_i_168) => {
        let t186 = Math.min(Math.max(col_i_168, t172), t184);
        let t187 = t181[t186]
        let t189 = t175 ? t187 : t172;
        out_1.push(t189);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_rows_up_clamp(input = this.input) {
    let out = [];
    let t190 = input["rows"];
    let t196 = t190.length
    const t197 = -1;
    const t199 = 1;
    const t201 = 0;
    let t200 = t196 - t199;
    t190.forEach((rows_el_191, rows_i_192) => {
      let out_1 = [];
      let t193 = rows_el_191.col;
      let t198 = rows_i_192 - t197;
      let t202 = Math.min(Math.max(t198, t201), t200);
      let t203 = t190[t202]
      let t204 = t203.col;
      let t205 = t204.length
      let t207 = t205 - t199;
      t193.forEach((col_el_194, col_i_195) => {
        let t209 = Math.min(Math.max(col_i_195, t201), t207);
        let t210 = t204[t209]
        out_1.push(t210);
      });
      out.push(out_1);
    });
    return out;
  }

  _shift_rows_up_wrap(input = this.input) {
    let out = [];
    let t211 = input["rows"];
    let t217 = t211.length
    const t218 = -1;
    const t226 = 1;
    const t228 = 0;
    t211.forEach((rows_el_212, rows_i_213) => {
      let out_1 = [];
      let t214 = rows_el_212.col;
      let t219 = rows_i_213 - t218;
      let t220 = t219 % t217;
      let t221 = t220 + t217;
      let t222 = t221 % t217;
      let t223 = t211[t222]
      let t224 = t223.col;
      let t225 = t224.length
      let t227 = t225 - t226;
      t214.forEach((col_el_215, col_i_216) => {
        let t229 = Math.min(Math.max(col_i_216, t228), t227);
        let t230 = t224[t229]
        out_1.push(t230);
      });
      out.push(out_1);
    });
    return out;
  }

}
