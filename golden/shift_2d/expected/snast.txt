(SNAST
  (VALUE shift_cols_right_zero
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const 1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_cols_right_clamp
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const 1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_cols_right_wrap
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const 1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_cols_left_zero
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const -1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_cols_left_clamp
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const -1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_cols_left_wrap
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const -1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_rows_down_zero
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const 1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_rows_down_clamp
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const 1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_rows_down_wrap
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const 1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_rows_up_zero
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const -1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_rows_up_clamp
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const -1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
  (VALUE shift_rows_up_wrap
    (Call :shift
      (InputRef rows.col.v key_chain=[]) :: [rows, col] -> integer
      (Const -1) :: [] -> integer
    ) :: [rows, col] -> integer
  ) :: [rows, col] -> integer
)