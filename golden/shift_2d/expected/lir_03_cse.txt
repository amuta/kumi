(LIR
  (Declaration shift_cols_right_zero
    %t1 = load_input "rows" :: array
    loop rows id=L1 in %t1 as el=%rows_el_2, idx=%rows_i_3
      %t4 = load_field rows_el_2["col"] :: any
      loop col id=L2 in %t4 as el=%col_el_5, idx=%col_i_6
        %t7 = Length %t1 :: integer
        %t8 = call core.mod(%rows_i_3, %t7) :: integer
        %t9 = call core.add(%t8, %t7) :: integer
        %t10 = call core.mod(%t9, %t7) :: integer
        %t11 = Gather %t1, %t10 :: any
        %t12 = load_field t11["col"] :: any
        %t13 = Length %t12 :: integer
        %t14 = const 1 :: integer
        %t15 = call core.sub(%col_i_6, %t14) :: integer
        %t16 = const 0 :: integer
        %t17 = call core.gte(%t15, %t16) :: boolean
        %t18 = call core.lt(%t15, %t13) :: boolean
        %t19 = call core.and(%t17, %t18) :: boolean
        %t21 = call core.sub(%t13, %t14) :: integer
        %t23 = call core.clamp(%t15, %t16, %t21) :: integer
        %t24 = Gather %t12, %t23 :: integer
        %t26 = select %t19, %t24, %t16 :: integer
        yield %t26
      end_loop
    end_loop
  )
  (Declaration shift_cols_right_clamp
    %t27 = load_input "rows" :: array
    loop rows id=L3 in %t27 as el=%rows_el_28, idx=%rows_i_29
      %t30 = load_field rows_el_28["col"] :: any
      loop col id=L4 in %t30 as el=%col_el_31, idx=%col_i_32
        %t33 = Length %t27 :: integer
        %t34 = call core.mod(%rows_i_29, %t33) :: integer
        %t35 = call core.add(%t34, %t33) :: integer
        %t36 = call core.mod(%t35, %t33) :: integer
        %t37 = Gather %t27, %t36 :: any
        %t38 = load_field t37["col"] :: any
        %t39 = Length %t38 :: integer
        %t40 = const 1 :: integer
        %t41 = call core.sub(%col_i_32, %t40) :: integer
        %t43 = call core.sub(%t39, %t40) :: integer
        %t44 = const 0 :: integer
        %t45 = call core.clamp(%t41, %t44, %t43) :: integer
        %t46 = Gather %t38, %t45 :: integer
        yield %t46
      end_loop
    end_loop
  )
  (Declaration shift_cols_right_wrap
    %t47 = load_input "rows" :: array
    loop rows id=L5 in %t47 as el=%rows_el_48, idx=%rows_i_49
      %t50 = load_field rows_el_48["col"] :: any
      loop col id=L6 in %t50 as el=%col_el_51, idx=%col_i_52
        %t53 = Length %t47 :: integer
        %t54 = call core.mod(%rows_i_49, %t53) :: integer
        %t55 = call core.add(%t54, %t53) :: integer
        %t56 = call core.mod(%t55, %t53) :: integer
        %t57 = Gather %t47, %t56 :: any
        %t58 = load_field t57["col"] :: any
        %t59 = Length %t58 :: integer
        %t60 = const 1 :: integer
        %t61 = call core.sub(%col_i_52, %t60) :: integer
        %t62 = call core.mod(%t61, %t59) :: integer
        %t63 = call core.add(%t62, %t59) :: integer
        %t64 = call core.mod(%t63, %t59) :: integer
        %t65 = Gather %t58, %t64 :: integer
        yield %t65
      end_loop
    end_loop
  )
  (Declaration shift_cols_left_zero
    %t66 = load_input "rows" :: array
    loop rows id=L7 in %t66 as el=%rows_el_67, idx=%rows_i_68
      %t69 = load_field rows_el_67["col"] :: any
      loop col id=L8 in %t69 as el=%col_el_70, idx=%col_i_71
        %t72 = Length %t66 :: integer
        %t73 = call core.mod(%rows_i_68, %t72) :: integer
        %t74 = call core.add(%t73, %t72) :: integer
        %t75 = call core.mod(%t74, %t72) :: integer
        %t76 = Gather %t66, %t75 :: any
        %t77 = load_field t76["col"] :: any
        %t78 = Length %t77 :: integer
        %t79 = const -1 :: integer
        %t80 = call core.sub(%col_i_71, %t79) :: integer
        %t81 = const 0 :: integer
        %t82 = call core.gte(%t80, %t81) :: boolean
        %t83 = call core.lt(%t80, %t78) :: boolean
        %t84 = call core.and(%t82, %t83) :: boolean
        %t85 = const 1 :: integer
        %t86 = call core.sub(%t78, %t85) :: integer
        %t88 = call core.clamp(%t80, %t81, %t86) :: integer
        %t89 = Gather %t77, %t88 :: integer
        %t91 = select %t84, %t89, %t81 :: integer
        yield %t91
      end_loop
    end_loop
  )
  (Declaration shift_cols_left_clamp
    %t92 = load_input "rows" :: array
    loop rows id=L9 in %t92 as el=%rows_el_93, idx=%rows_i_94
      %t95 = load_field rows_el_93["col"] :: any
      loop col id=L10 in %t95 as el=%col_el_96, idx=%col_i_97
        %t98 = Length %t92 :: integer
        %t99 = call core.mod(%rows_i_94, %t98) :: integer
        %t100 = call core.add(%t99, %t98) :: integer
        %t101 = call core.mod(%t100, %t98) :: integer
        %t102 = Gather %t92, %t101 :: any
        %t103 = load_field t102["col"] :: any
        %t104 = Length %t103 :: integer
        %t105 = const -1 :: integer
        %t106 = call core.sub(%col_i_97, %t105) :: integer
        %t107 = const 1 :: integer
        %t108 = call core.sub(%t104, %t107) :: integer
        %t109 = const 0 :: integer
        %t110 = call core.clamp(%t106, %t109, %t108) :: integer
        %t111 = Gather %t103, %t110 :: integer
        yield %t111
      end_loop
    end_loop
  )
  (Declaration shift_cols_left_wrap
    %t112 = load_input "rows" :: array
    loop rows id=L11 in %t112 as el=%rows_el_113, idx=%rows_i_114
      %t115 = load_field rows_el_113["col"] :: any
      loop col id=L12 in %t115 as el=%col_el_116, idx=%col_i_117
        %t118 = Length %t112 :: integer
        %t119 = call core.mod(%rows_i_114, %t118) :: integer
        %t120 = call core.add(%t119, %t118) :: integer
        %t121 = call core.mod(%t120, %t118) :: integer
        %t122 = Gather %t112, %t121 :: any
        %t123 = load_field t122["col"] :: any
        %t124 = Length %t123 :: integer
        %t125 = const -1 :: integer
        %t126 = call core.sub(%col_i_117, %t125) :: integer
        %t127 = call core.mod(%t126, %t124) :: integer
        %t128 = call core.add(%t127, %t124) :: integer
        %t129 = call core.mod(%t128, %t124) :: integer
        %t130 = Gather %t123, %t129 :: integer
        yield %t130
      end_loop
    end_loop
  )
  (Declaration shift_rows_down_zero
    %t131 = load_input "rows" :: array
    loop rows id=L13 in %t131 as el=%rows_el_132, idx=%rows_i_133
      %t134 = load_field rows_el_132["col"] :: any
      loop col id=L14 in %t134 as el=%col_el_135, idx=%col_i_136
        %t137 = Length %t131 :: integer
        %t138 = const 1 :: integer
        %t139 = call core.sub(%rows_i_133, %t138) :: integer
        %t140 = const 0 :: integer
        %t141 = call core.gte(%t139, %t140) :: boolean
        %t142 = call core.lt(%t139, %t137) :: boolean
        %t143 = call core.and(%t141, %t142) :: boolean
        %t145 = call core.sub(%t137, %t138) :: integer
        %t147 = call core.clamp(%t139, %t140, %t145) :: integer
        %t148 = Gather %t131, %t147 :: any
        %t149 = load_field t148["col"] :: any
        %t150 = Length %t149 :: integer
        %t151 = call core.mod(%col_i_136, %t150) :: integer
        %t152 = call core.add(%t151, %t150) :: integer
        %t153 = call core.mod(%t152, %t150) :: integer
        %t154 = Gather %t149, %t153 :: integer
        %t156 = select %t143, %t154, %t140 :: integer
        yield %t156
      end_loop
    end_loop
  )
  (Declaration shift_rows_down_clamp
    %t157 = load_input "rows" :: array
    loop rows id=L15 in %t157 as el=%rows_el_158, idx=%rows_i_159
      %t160 = load_field rows_el_158["col"] :: any
      loop col id=L16 in %t160 as el=%col_el_161, idx=%col_i_162
        %t163 = Length %t157 :: integer
        %t164 = const 1 :: integer
        %t165 = call core.sub(%rows_i_159, %t164) :: integer
        %t167 = call core.sub(%t163, %t164) :: integer
        %t168 = const 0 :: integer
        %t169 = call core.clamp(%t165, %t168, %t167) :: integer
        %t170 = Gather %t157, %t169 :: any
        %t171 = load_field t170["col"] :: any
        %t172 = Length %t171 :: integer
        %t173 = call core.mod(%col_i_162, %t172) :: integer
        %t174 = call core.add(%t173, %t172) :: integer
        %t175 = call core.mod(%t174, %t172) :: integer
        %t176 = Gather %t171, %t175 :: integer
        yield %t176
      end_loop
    end_loop
  )
  (Declaration shift_rows_down_wrap
    %t177 = load_input "rows" :: array
    loop rows id=L17 in %t177 as el=%rows_el_178, idx=%rows_i_179
      %t180 = load_field rows_el_178["col"] :: any
      loop col id=L18 in %t180 as el=%col_el_181, idx=%col_i_182
        %t183 = Length %t177 :: integer
        %t184 = const 1 :: integer
        %t185 = call core.sub(%rows_i_179, %t184) :: integer
        %t186 = call core.mod(%t185, %t183) :: integer
        %t187 = call core.add(%t186, %t183) :: integer
        %t188 = call core.mod(%t187, %t183) :: integer
        %t189 = Gather %t177, %t188 :: any
        %t190 = load_field t189["col"] :: any
        %t191 = Length %t190 :: integer
        %t192 = call core.mod(%col_i_182, %t191) :: integer
        %t193 = call core.add(%t192, %t191) :: integer
        %t194 = call core.mod(%t193, %t191) :: integer
        %t195 = Gather %t190, %t194 :: integer
        yield %t195
      end_loop
    end_loop
  )
  (Declaration shift_rows_up_zero
    %t196 = load_input "rows" :: array
    loop rows id=L19 in %t196 as el=%rows_el_197, idx=%rows_i_198
      %t199 = load_field rows_el_197["col"] :: any
      loop col id=L20 in %t199 as el=%col_el_200, idx=%col_i_201
        %t202 = Length %t196 :: integer
        %t203 = const -1 :: integer
        %t204 = call core.sub(%rows_i_198, %t203) :: integer
        %t205 = const 0 :: integer
        %t206 = call core.gte(%t204, %t205) :: boolean
        %t207 = call core.lt(%t204, %t202) :: boolean
        %t208 = call core.and(%t206, %t207) :: boolean
        %t209 = const 1 :: integer
        %t210 = call core.sub(%t202, %t209) :: integer
        %t212 = call core.clamp(%t204, %t205, %t210) :: integer
        %t213 = Gather %t196, %t212 :: any
        %t214 = load_field t213["col"] :: any
        %t215 = Length %t214 :: integer
        %t216 = call core.mod(%col_i_201, %t215) :: integer
        %t217 = call core.add(%t216, %t215) :: integer
        %t218 = call core.mod(%t217, %t215) :: integer
        %t219 = Gather %t214, %t218 :: integer
        %t221 = select %t208, %t219, %t205 :: integer
        yield %t221
      end_loop
    end_loop
  )
  (Declaration shift_rows_up_clamp
    %t222 = load_input "rows" :: array
    loop rows id=L21 in %t222 as el=%rows_el_223, idx=%rows_i_224
      %t225 = load_field rows_el_223["col"] :: any
      loop col id=L22 in %t225 as el=%col_el_226, idx=%col_i_227
        %t228 = Length %t222 :: integer
        %t229 = const -1 :: integer
        %t230 = call core.sub(%rows_i_224, %t229) :: integer
        %t231 = const 1 :: integer
        %t232 = call core.sub(%t228, %t231) :: integer
        %t233 = const 0 :: integer
        %t234 = call core.clamp(%t230, %t233, %t232) :: integer
        %t235 = Gather %t222, %t234 :: any
        %t236 = load_field t235["col"] :: any
        %t237 = Length %t236 :: integer
        %t238 = call core.mod(%col_i_227, %t237) :: integer
        %t239 = call core.add(%t238, %t237) :: integer
        %t240 = call core.mod(%t239, %t237) :: integer
        %t241 = Gather %t236, %t240 :: integer
        yield %t241
      end_loop
    end_loop
  )
  (Declaration shift_rows_up_wrap
    %t242 = load_input "rows" :: array
    loop rows id=L23 in %t242 as el=%rows_el_243, idx=%rows_i_244
      %t245 = load_field rows_el_243["col"] :: any
      loop col id=L24 in %t245 as el=%col_el_246, idx=%col_i_247
        %t248 = Length %t242 :: integer
        %t249 = const -1 :: integer
        %t250 = call core.sub(%rows_i_244, %t249) :: integer
        %t251 = call core.mod(%t250, %t248) :: integer
        %t252 = call core.add(%t251, %t248) :: integer
        %t253 = call core.mod(%t252, %t248) :: integer
        %t254 = Gather %t242, %t253 :: any
        %t255 = load_field t254["col"] :: any
        %t256 = Length %t255 :: integer
        %t257 = call core.mod(%col_i_247, %t256) :: integer
        %t258 = call core.add(%t257, %t256) :: integer
        %t259 = call core.mod(%t258, %t256) :: integer
        %t260 = Gather %t255, %t259 :: integer
        yield %t260
      end_loop
    end_loop
  )
)
