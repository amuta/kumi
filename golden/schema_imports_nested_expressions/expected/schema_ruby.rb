# Autogenerated by Kumi Codegen
module Kumi::Compiled::KUMI_8be3d4966f8aad6e90f4ac6b0b11919080af1c5b1f9d01f1cc4c7d06d283e1a7
  def self.from(input_data = nil)
    instance = Object.new
    instance.extend(self)
    instance.instance_variable_set(:@input, input_data)
    instance
  end

  def self.__kumi_executable__
    instance = Object.new
    instance.extend(self)
    instance
  end

  def update(input_data)
    @input = @input.merge(input_data)
    self
  end

  def [](name)
    case name
    when :interest then _interest
    when :total_over_periods then _total_over_periods
    when :doubled then _doubled
    else raise KeyError, "Unknown declaration"
    end
  end

  def _interest(input = @input)
    t1 = input["amount"] || input[:amount]
    t2 = 1.05
    t3 = t1 * t2
    t4 = input["rate"] || input[:rate]
    GoldenSchemas::Compound.from({"principal" => t3, "rate" => t4})._annual_interest
  end

  def _total_over_periods(input = @input)
    t12 = input["amount"] || input[:amount]
    t13 = 1.05
    t14 = t12 * t13
    t15 = input["rate"] || input[:rate]
    t16 = GoldenSchemas::Compound.from({"principal" => t14, "rate" => t15})._annual_interest
    t7 = input["periods"] || input[:periods]
    t16 * t7
  end

  def _doubled(input = @input)
    t20 = input["amount"] || input[:amount]
    t21 = 1.05
    t22 = t20 * t21
    t23 = input["rate"] || input[:rate]
    t24 = GoldenSchemas::Compound.from({"principal" => t22, "rate" => t23})._annual_interest
    t18 = input["periods"] || input[:periods]
    t19 = t24 * t18
    t10 = 2
    t19 * t10
  end
end
