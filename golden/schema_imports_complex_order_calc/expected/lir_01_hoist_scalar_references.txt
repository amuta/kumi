(LIR
  (Declaration order_subtotals
    %t1 = load_input "orders" :: array
    loop orders id=L1 in %t1 as el=%orders_el_2, idx=%orders_i_3
      %t4 = load_field orders_el_2["items"] :: array
      %t5 = importschemacall %t4 fn_name="subtotal" source_module="GoldenSchemas::Subtotal" input_mapping_keys=["items"] :: integer
      yield %t5
    end_loop
  )
  (Declaration order_with_shipping
    %t6 = load_input "orders" :: array
    loop orders id=L2 in %t6 as el=%orders_el_7, idx=%orders_i_8
      %t9 = load_decl order_subtotals axes=[orders] :: integer
      %t10 = load_field orders_el_7["shipping_cost"] :: decimal
      %t11 = call core.add(%t9, %t10) :: integer
      yield %t11
    end_loop
  )
  (Declaration order_discounted
    %t12 = load_input "orders" :: array
    loop orders id=L3 in %t12 as el=%orders_el_13, idx=%orders_i_14
      %t15 = load_decl order_with_shipping axes=[orders] :: integer
      %t16 = load_input "global_discount_rate" :: decimal
      %t17 = importschemacall %t15, %t16 fn_name="discounted" source_module="GoldenSchemas::Discount" input_mapping_keys=["price", "rate"] :: float
      yield %t17
    end_loop
  )
  (Declaration order_tax
    %t18 = load_input "orders" :: array
    loop orders id=L4 in %t18 as el=%orders_el_19, idx=%orders_i_20
      %t21 = load_decl order_discounted axes=[orders] :: float
      %t22 = importschemacall %t21 fn_name="tax" source_module="GoldenSchemas::Tax" input_mapping_keys=["amount"] :: float
      yield %t22
    end_loop
  )
  (Declaration order_totals
    %t23 = load_input "orders" :: array
    loop orders id=L5 in %t23 as el=%orders_el_24, idx=%orders_i_25
      %t26 = load_decl order_discounted axes=[orders] :: float
      %t27 = load_decl order_tax axes=[orders] :: float
      %t28 = call core.add(%t26, %t27) :: float
      yield %t28
    end_loop
  )
  (Declaration discount_per_order
    %t29 = load_input "orders" :: array
    loop orders id=L6 in %t29 as el=%orders_el_30, idx=%orders_i_31
      %t32 = load_decl order_with_shipping axes=[orders] :: integer
      %t33 = load_decl order_discounted axes=[orders] :: float
      %t34 = call core.sub(%t32, %t33) :: float
      yield %t34
    end_loop
  )
  (Declaration total_orders
    %acc_35 = decl_acc :: integer
    %t36 = load_input "orders" :: array
    loop orders id=L7 in %t36 as el=%orders_el_37, idx=%orders_i_38
      %t39 = load_field orders_el_37["id"] :: string
      %acc_35 = acc_add agg.count(%acc_35, %t39) :: integer
    end_loop
    %t40 = acc_load %acc_35 :: integer
    yield %t40
  )
  (Declaration total_revenue
    %acc_41 = decl_acc :: float
    %t42 = load_input "orders" :: array
    loop orders id=L8 in %t42 as el=%orders_el_43, idx=%orders_i_44
      %t45 = load_decl order_totals axes=[orders] :: float
      %acc_41 = acc_add agg.sum(%acc_41, %t45) :: float
    end_loop
    %t46 = acc_load %acc_41 :: float
    yield %t46
  )
  (Declaration total_tax_collected
    %acc_47 = decl_acc :: float
    %t48 = load_input "orders" :: array
    loop orders id=L9 in %t48 as el=%orders_el_49, idx=%orders_i_50
      %t51 = load_decl order_tax axes=[orders] :: float
      %acc_47 = acc_add agg.sum(%acc_47, %t51) :: float
    end_loop
    %t52 = acc_load %acc_47 :: float
    yield %t52
  )
  (Declaration total_discount_given
    %acc_53 = decl_acc :: float
    %t54 = load_input "orders" :: array
    loop orders id=L10 in %t54 as el=%orders_el_55, idx=%orders_i_56
      %t57 = load_decl discount_per_order axes=[orders] :: float
      %acc_53 = acc_add agg.sum(%acc_53, %t57) :: float
    end_loop
    %t58 = acc_load %acc_53 :: float
    yield %t58
  )
)
