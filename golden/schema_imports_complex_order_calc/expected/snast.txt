(SNAST
  (VALUE order_subtotals
    (ImportCall :subtotal
      (items (InputRef orders.order.items key_chain=[]) :: [orders] -> array)
    ) :: [orders] -> integer
  ) :: [orders] -> integer
  (VALUE order_with_shipping
    (Call :core.add
      (Ref order_subtotals) :: [orders] -> integer
      (InputRef orders.order.shipping_cost key_chain=[]) :: [orders] -> decimal
    ) :: [orders] -> integer
  ) :: [orders] -> integer
  (VALUE order_discounted
    (ImportCall :discounted
      (price (Ref order_with_shipping) :: [orders] -> integer)
      (rate (InputRef global_discount_rate key_chain=[]) :: [] -> decimal)
    ) :: [orders] -> float
  ) :: [orders] -> float
  (VALUE order_tax
    (ImportCall :tax
      (amount (Ref order_discounted) :: [orders] -> float)
    ) :: [orders] -> float
  ) :: [orders] -> float
  (VALUE order_totals
    (Call :core.add
      (Ref order_discounted) :: [orders] -> float
      (Ref order_tax) :: [orders] -> float
    ) :: [orders] -> float
  ) :: [orders] -> float
  (VALUE discount_per_order
    (Call :core.sub
      (Ref order_with_shipping) :: [orders] -> integer
      (Ref order_discounted) :: [orders] -> float
    ) :: [orders] -> float
  ) :: [orders] -> float
  (VALUE total_orders
    (Reduce :agg.count over [orders]
      (InputRef orders.order.id key_chain=[]) :: [orders] -> string
    ) :: [] -> integer
  ) :: [] -> integer
  (VALUE total_revenue
    (Reduce :agg.sum over [orders]
      (Ref order_totals) :: [orders] -> float
    ) :: [] -> float
  ) :: [] -> float
  (VALUE total_tax_collected
    (Reduce :agg.sum over [orders]
      (Ref order_tax) :: [orders] -> float
    ) :: [] -> float
  ) :: [] -> float
  (VALUE total_discount_given
    (Reduce :agg.sum over [orders]
      (Ref discount_per_order) :: [orders] -> float
    ) :: [] -> float
  ) :: [] -> float
)